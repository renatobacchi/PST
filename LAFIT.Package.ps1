#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: cfba2739-092a-48d5-9ae9-9fc3160d1664
# Source File: C:\GIT\LAFIT\LAFIT.psproj
#------------------------------------------------------------------------
#region Project Recovery Data (DO NOT MODIFY)
<#RecoveryData:
dQQAAB+LCAAAAAAABACllNtugkAQhu9NfAfCPSJqbUlwE+uhNbHaKPaqSTPCYGiXXbILTX37rhwM
panB9PKff+ab2d0BZ4Me/0RxnEICpN3SNOdZ8Hf0kkwo+YJChpwRq2M5ZikKbx5SXEyJF+yhd9u3
ja7dA2Nw598YNqBt2IHXt4Zd3xoOB45ZJBelRRf3GCPpOmZVlnBOfdWukOcA8dGYzhQuV3UXmTFb
/emq2snjpdrdtuaWUlbPXB1KSW2DAQpkHq4gwpGua/dpSP2R3tXJNgGRpHEnljK/gsulE6DUeIKQ
zbmI3mIZVFllXMGCxrAHyvdAFcqqoLQJjyJg/uwrQXZ60ZHuihR1kmdL1cFq3GG852lSnzULXjXo
Ok7UILIOKsJXoVyQH+p4cEBRx1WspshzuaXny/e6BHZIFUIR/Eb3VEVkG/o/RLbG/55it72AyEW+
6OfPM1drER5CBvSUcAKT5Xi+cBUiVlmO+ctutxzzx2/mG8fYmzN1BAAA#>
#endregion
<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2016 v5.2.120
     Generated on:       13.06.2016 13:19
     Generated by:        
     Organization:        
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2016
#>


#region Source: Startup.pss
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
YgMAAB+LCAAAAAAABAC9k01LA0EMhu9C/8PQ87If3a5rYXZBWnopqFhRr9lttgzOR0lmLPvvbatU
0YMgsuSSNyF5CEnkPbbuFalfgAdxcFg5W40n43p0IYS8JbVVFvRSabwBg/XaA/mwi3fMMvmRPdVc
M6NptEI+6c9IXxtuHWnVROLxgzSN06NFYh60D4SVxeAJdCTuwqFHu8L+wb2grZqyhKItLrNZPsX0
aiaTc9fvlHXPHs0QjPhJ2Y3bc7x0ZHgQ4nFPw4AI9spu/8JK867oyi7LNkUKOfzOejZ6kJnmjvD/
QWf5fvIy+fpT9RvJGdnIYgMAAA==#>
#endregion
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
[void][Reflection.Assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
#endregion Import Assemblies

#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)

function Main {
	Param ([String]$Commandline)
	#Note: This function starts the application
	#Note: $Commandline contains the complete argument string passed to the packager 
	#Note: To get the script directory in the Packager use: Split-Path $hostinvocation.MyCommand.path
	#Note: To get the console output in the Packager (Forms Mode) use: $ConsoleOutput (Type: System.Collections.ArrayList)
	#TODO: Initialize and add Function calls to forms
	
	if((Call-MainForm_psf) -eq "OK")
	{
		
	}
	
	$global:ExitCode = 0 #Set the exit code for the Packager
}






#endregion Source: Startup.pss

#region Source: MainForm.psf
function Call-MainForm_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
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
qswk+sy262qR1oW5hGLvQ6Lj3SqEfDvIhQ6LNHg5CnwdG0DAXfUWrCmSuRESHXw8Q8KF4LDak4SJ
W7fXsLF4igvyFoOmuYPcQD/RTHRwzNb58wk/0gt7A2ihabvHAoLKtmaCB29rFJX7nXr77/narzlG
URpoIhxOisGT3hnGVGr29+tL9yvufv7hXP9pb39+tpU//N+qSv8/34Ur/A/L/lcniH6eygX6ToDh
s3L2s3L2s3L2s3L2s3L2s3L2s3L2s3L2s3L2s3L2s3L2s3L2s3L2s3L296mcTeCfK2dfFTHJPMTG
25Lp8hWEmLD1vTyf5CWcXYaxLqzd2vfdzYukZ/uFn57cG0/Lneq19DZHTNjdYLrySC9bFSMnYXMS
S1a49/e0muxWzOq4jh/8K89TY3lOGvjelXcQWXBVJimMXVPpvW6sqFCotJcyTe8MVzGiI9N9rjQS
6AfoKzIRNgMCZGm2bVleR01F91CWQLxs38FycO9WQCmGzRVZorTePlLuke1TING1ffFtW3ABYT4z
mQeCdX1cB9zhrjmU1CpYpw+4xJaK7Au+G67l9uxFiNDcoLF6vgRDCynfmNWH3NDwmN5eMYJnOodB
O9hxCvGRCDTSMvDuW2szB5SFZxsnaNUBcxOeiVh1Ge3xOkeAEuLlo4Yjf8vOJyRWcOD5CI1AwHnM
cS8vfk5AaUMKBKor7hjQsr5VdeA71+B9ord+Q6XIVCFTkiuEFxu3yMC0nIjHnOnnk9nV6jNv5vvC
3oc8iYnkwCr36vJRfvBOC8QImGqtLadFKgvPbE8vM1jlYG4hPMMYphuUSQMY7JCHGfTG08ttkiJO
cHCHJ/O8mO8ucr36TgH6ibkfAKJm8lHgo5vgohALgBnc877u48ItS5rjGUWsRIBsUib31zeeDrCM
x3raEvfnOkXDfaPb5kX3t7F+5k9Q9O0iWBjIVHI+cZLOt6bssqx/0jv7v1NOfxhn+eVVyH/jLJVw
nL6mYvUvwFVeoO+Fqvz4y8+Mto+Mtv3na6zmYUTOplGcGt0evQTm7YtTrfZtIzNDXlTh4vh57qXT
dEnhqX+6OC9Hps2+QNcS72bIS6rGCPFlh937NPK0TjN7q3J06LojE4+TK5pMar29j0cTROZoBwDt
Zcd4e+gRjo3H/Jy1Nekfx8KwRscifG34Dmu/cBE7OtYnd/VlWSC7I8BrD30NFhoWBj+usdyE865B
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#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Windows.Forms.DataVisualization, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$MainForm = New-Object 'System.Windows.Forms.Form'
	$richtextbox_output = New-Object 'System.Windows.Forms.RichTextBox'
	$tabcontrol_Home = New-Object 'System.Windows.Forms.TabControl'
	$tabpage1 = New-Object 'System.Windows.Forms.TabPage'
	$groupbox15 = New-Object 'System.Windows.Forms.GroupBox'
	$button_deleteGPO = New-Object 'System.Windows.Forms.Button'
	$button_gpresult = New-Object 'System.Windows.Forms.Button'
	$Button_gpupdate = New-Object 'System.Windows.Forms.Button'
	$groupbox14 = New-Object 'System.Windows.Forms.GroupBox'
	$button_export = New-Object 'System.Windows.Forms.Button'
	$button_clear = New-Object 'System.Windows.Forms.Button'
	$groupbox13 = New-Object 'System.Windows.Forms.GroupBox'
	$button_nbbattery = New-Object 'System.Windows.Forms.Button'
	$buttonFixWMI = New-Object 'System.Windows.Forms.Button'
	$button_shutdown = New-Object 'System.Windows.Forms.Button'
	$button_C = New-Object 'System.Windows.Forms.Button'
	$button_WOL = New-Object 'System.Windows.Forms.Button'
	$groupbox12 = New-Object 'System.Windows.Forms.GroupBox'
	$button_logoff_user = New-Object 'System.Windows.Forms.Button'
	$button_get_session = New-Object 'System.Windows.Forms.Button'
	$button_Userunlock = New-Object 'System.Windows.Forms.Button'
	$button_ResetPWD = New-Object 'System.Windows.Forms.Button'
	$groupbox11 = New-Object 'System.Windows.Forms.GroupBox'
	$button_DNScheck = New-Object 'System.Windows.Forms.Button'
	$button_ping4 = New-Object 'System.Windows.Forms.Button'
	$button_ipconfig = New-Object 'System.Windows.Forms.Button'
	$groupbox9 = New-Object 'System.Windows.Forms.GroupBox'
	$button_regedit = New-Object 'System.Windows.Forms.Button'
	$button_cmd = New-Object 'System.Windows.Forms.Button'
	$button_psremote = New-Object 'System.Windows.Forms.Button'
	$button_MSRA = New-Object 'System.Windows.Forms.Button'
	$button_Remotecontrol = New-Object 'System.Windows.Forms.Button'
	$button_rdp = New-Object 'System.Windows.Forms.Button'
	$tabpage2 = New-Object 'System.Windows.Forms.TabPage'
	$groupbox16 = New-Object 'System.Windows.Forms.GroupBox'
	$button_hotfix = New-Object 'System.Windows.Forms.Button'
	$groupbox7 = New-Object 'System.Windows.Forms.GroupBox'
	$button_MMCServices = New-Object 'System.Windows.Forms.Button'
	$button_compmgmt = New-Object 'System.Windows.Forms.Button'
	$groupbox6 = New-Object 'System.Windows.Forms.GroupBox'
	$button_localadmins = New-Object 'System.Windows.Forms.Button'
	$button_folderrights = New-Object 'System.Windows.Forms.Button'
	$button_profilerights = New-Object 'System.Windows.Forms.Button'
	$button_homerights = New-Object 'System.Windows.Forms.Button'
	$groupbox5 = New-Object 'System.Windows.Forms.GroupBox'
	$button_PCGroups = New-Object 'System.Windows.Forms.Button'
	$button_ComputerGroups = New-Object 'System.Windows.Forms.Button'
	$groupbox2 = New-Object 'System.Windows.Forms.GroupBox'
	$button_autostart = New-Object 'System.Windows.Forms.Button'
	$button_installedSoftware = New-Object 'System.Windows.Forms.Button'
	$groupbox1 = New-Object 'System.Windows.Forms.GroupBox'
	$button_printer = New-Object 'System.Windows.Forms.Button'
	$button_USBDevice = New-Object 'System.Windows.Forms.Button'
	$button_systemtype = New-Object 'System.Windows.Forms.Button'
	$button_memory = New-Object 'System.Windows.Forms.Button'
	$button_processor = New-Object 'System.Windows.Forms.Button'
	$button_mainboard = New-Object 'System.Windows.Forms.Button'
	$tabpage3 = New-Object 'System.Windows.Forms.TabPage'
	$groupbox19 = New-Object 'System.Windows.Forms.GroupBox'
	$button_ipconfig2 = New-Object 'System.Windows.Forms.Button'
	$button_testport = New-Object 'System.Windows.Forms.Button'
	$button_hosts = New-Object 'System.Windows.Forms.Button'
	$button_routetable = New-Object 'System.Windows.Forms.Button'
	$button_checkWLAN = New-Object 'System.Windows.Forms.Button'
	$tabpage4 = New-Object 'System.Windows.Forms.TabPage'
	$chart1 = New-Object 'System.Windows.Forms.DataVisualization.Charting.Chart'
	$groupbox21 = New-Object 'System.Windows.Forms.GroupBox'
	$labelPleaseEnterFileExten = New-Object 'System.Windows.Forms.Label'
	$button_process_stop = New-Object 'System.Windows.Forms.Button'
	$button_process_start = New-Object 'System.Windows.Forms.Button'
	$textbox_Process = New-Object 'System.Windows.Forms.TextBox'
	$groupbox20 = New-Object 'System.Windows.Forms.GroupBox'
	$button_cpuram = New-Object 'System.Windows.Forms.Button'
	$button_taskmanager = New-Object 'System.Windows.Forms.Button'
	$button_process_cmd = New-Object 'System.Windows.Forms.Button'
	$button_process_grid = New-Object 'System.Windows.Forms.Button'
	$button_process_owner = New-Object 'System.Windows.Forms.Button'
	$button_process_100 = New-Object 'System.Windows.Forms.Button'
	$button_proclasthour = New-Object 'System.Windows.Forms.Button'
	$button_process = New-Object 'System.Windows.Forms.Button'
	$tabpage5 = New-Object 'System.Windows.Forms.TabPage'
	$groupbox8 = New-Object 'System.Windows.Forms.GroupBox'
	$button_servicesrunning = New-Object 'System.Windows.Forms.Button'
	$button_services = New-Object 'System.Windows.Forms.Button'
	$button_servicesauto = New-Object 'System.Windows.Forms.Button'
	$button_servicesautostop = New-Object 'System.Windows.Forms.Button'
	$button_servicesnonstandard = New-Object 'System.Windows.Forms.Button'
	$groupbox4 = New-Object 'System.Windows.Forms.GroupBox'
	$button_servicesstop = New-Object 'System.Windows.Forms.Button'
	$button_servicesstart = New-Object 'System.Windows.Forms.Button'
	$button_servicesrestart = New-Object 'System.Windows.Forms.Button'
	$button_servicescheck = New-Object 'System.Windows.Forms.Button'
	$textbox_services = New-Object 'System.Windows.Forms.TextBox'
	$tabpage6 = New-Object 'System.Windows.Forms.TabPage'
	$groupbox22 = New-Object 'System.Windows.Forms.GroupBox'
	$button_diskusage = New-Object 'System.Windows.Forms.Button'
	$button_deleteoffline = New-Object 'System.Windows.Forms.Button'
	$button_volumes = New-Object 'System.Windows.Forms.Button'
	$tabpage8 = New-Object 'System.Windows.Forms.TabPage'
	$groupbox23 = New-Object 'System.Windows.Forms.GroupBox'
	$button_eventlogmmc = New-Object 'System.Windows.Forms.Button'
	$button_eventlog20 = New-Object 'System.Windows.Forms.Button'
	$button_eventlognames = New-Object 'System.Windows.Forms.Button'
	$tabpage10 = New-Object 'System.Windows.Forms.TabPage'
	$groupbox18 = New-Object 'System.Windows.Forms.GroupBox'
	$buttonTSHanging = New-Object 'System.Windows.Forms.Button'
	$button_getsccmcache = New-Object 'System.Windows.Forms.Button'
	$button_getadvertisedsoftware = New-Object 'System.Windows.Forms.Button'
	$groupbox17 = New-Object 'System.Windows.Forms.GroupBox'
	$button_sccm_start = New-Object 'System.Windows.Forms.Button'
	$combobox1 = New-Object 'System.Windows.Forms.ComboBox'
	$tabpage11 = New-Object 'System.Windows.Forms.TabPage'
	$button_search = New-Object 'System.Windows.Forms.Button'
	$textbox_search = New-Object 'System.Windows.Forms.TextBox'
	$tabpage_debug = New-Object 'System.Windows.Forms.TabPage'
	$button_getvariablesfilter = New-Object 'System.Windows.Forms.Button'
	$button_listvariables = New-Object 'System.Windows.Forms.Button'
	$textbox_debug = New-Object 'System.Windows.Forms.TextBox'
	$button_debug = New-Object 'System.Windows.Forms.Button'
	$statusbar1 = New-Object 'System.Windows.Forms.StatusBar'
	$toolstrip1 = New-Object 'System.Windows.Forms.ToolStrip'
	$menustrip1 = New-Object 'System.Windows.Forms.MenuStrip'
	$toolstriplabel2 = New-Object 'System.Windows.Forms.ToolStripLabel'
	$FileToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$button_Check = New-Object 'System.Windows.Forms.ToolStripButton'
	$toolstripmenuitem1 = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$aboutToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$textbox_username = New-Object 'System.Windows.Forms.ToolStripTextBox'
	$button_GetPC = New-Object 'System.Windows.Forms.ToolStripButton'
	$toolstripseparator10 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$quitToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$toolstripseparator4 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$toolsToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$aDExplorerToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$procexpToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$procmonToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$nirLauncherToolStripMenuItem1 = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$optionsToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$textbox_computername = New-Object 'System.Windows.Forms.ToolStripTextBox'
	$Toolstrip_os = New-Object 'System.Windows.Forms.ToolStripLabel'
	$Toolstrip_OSStatus = New-Object 'System.Windows.Forms.ToolStripLabel'
	$toolstrip_home = New-Object 'System.Windows.Forms.ToolStripLabel'
	$toolstrip_home_status = New-Object 'System.Windows.Forms.ToolStripLabel'
	$toolstrip_user = New-Object 'System.Windows.Forms.ToolStripLabel'
	$toolstrip_user_status = New-Object 'System.Windows.Forms.ToolStripLabel'
	$toolstripseparator2 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$toolstripseparator1 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$toolstripseparator11 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$toolstripseparator12 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$imagelist1 = New-Object 'System.Windows.Forms.ImageList'
	$contextmenustrip1 = New-Object 'System.Windows.Forms.ContextMenuStrip'
	$folderbrowserdialog1 = New-Object 'System.Windows.Forms.FolderBrowserDialog'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	############################################################################################
	#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!Lazy AfI Toolkit!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	############################################################################################
	############################################################################################
	#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!O P E N I N G    A C T I O N S!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	############################################################################################
	$OnLoadFormEvent = {
		# Add 1 New Line in Richtextbox an the Date/Time	
		$Date = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
		$Fill = "-"
		$Fill = $Fill * $Fillchar
		$richtextbox_output.AppendText($Fill)
		$richtextbox_output.AppendText($Newline)
		Add-RichTextBoxTitle -text "$Date"
		
		# Get List of all PoSH-Functions for debugging
		$debugger = (Get-Command -CommandType 'Cmdlet', 'Function', 'Workflow').name
		$textbox_debug.AutoCompleteCustomSource.AddRange($debugger)
		
		#region Load Config
		# # # Load Config # # #	
		
		# # # # Checking if Configfolder exisits # # # #
		$Folderexisting = Test-Path $global:Confpath
		if ($Folderexisting -eq $true)
		{
			Add-RichTextBoxOK -text "$folder $global:Confpath $existing"
		}
		if ($Folderexisting -eq $false)
		{
			New-Item -ItemType directory -Path $global:Confpath
			$Folderexisting = Test-Path $global:Confpath
			if ($Folderexisting -eq $true)
			{
				$created = $lang.created
				Add-RichTextBoxOK -text "$folder $global:Confpath $created"
				if ($Folderexisting -eq $false)
				{
					Add-RichTextBoxWarn -text "$configerror $global:Confpath"
				}
			}
		}
		
		# # # # Checking if Configfile exists # # # #
		$loadconfig = $Confpath + "/Config.csv"
		if (Test-Path $loadconfig -PathType Leaf)
		{
			$load = Import-Csv -Path $loadconfig
			foreach ($Line in $Load)
			{
				$global:Profilefolder = $($Line."global:Profilefolder")
				$global:Homefolder = $($Line."global:Homefolder")
				$global:Outfile = $($Line."global:Outfile")
				$global:SiteName = $($Line."global:SiteName")
				$global:SCCMServer = $($Line."global:SCCMServer")
				$global:SCCMNameSpace = $($Line."global:SCCMNameSpace")
				$global:SCCMEnabled = $($Line."global:SCCMEnabled")
				$global:Nirlauncher = $($Line."global:Nirlauncher")
				$global:Sysinternals = $($Line."global:Sysinternals")
				$global:CmRCViewer = $($Line."global:CmRCViewer")
				Add-RichTextBoxOK -text "$configfrom $global:Confpath $loaded"
			}
		}
		else
		{
			Add-RichTextBox -text $lang.noConfigFound
			Show-MsgBox -BoxType OKOnly -Prompt "You need to configure the shown options"
			Call-Options_psf
		}
		
		# Loading Combobox	
		Load-ComboBox $combobox1 $Cycle1, $Cycle2, $Cycle3, $Cycle4, $Cycle7, $Cycle8, $Cycle9
	
		# # # # Deactivating SCCM based functions if SCCM is unchecked # # # #
		if ($global:SCCMEnabled -eq $false)
		{
			$button_GetPC.Enabled = $false
			$tabpage10.Enabled = $false
			$textbox_username.Enabled = $false
		}
		#endregion
		
		# # # Some Settings # # #
		
		# Set the status bar name
		$statusbar1.Text = $StatusBarStartUp
		
		# Set the Form Title
		$MainForm.Text = $MainFormTitle
		
		# Set Variable for Computername		
		$textbox_computername.Text = $env:COMPUTERNAME
		
		# Language		
		Set-Culture -CultureInfo de-CH
		Import-LocalizedData -BindingVariable lang -FileName Language.psd1 -BaseDirectory ($PWD)
	
		## Verify External Tools are presents
		
		# SystemInfo.exe
		if (Test-Path "$env:systemroot/system32/systeminfo.exe" -ErrorAction 'SilentlyContinue')
		{
			Add-RichTextBoxOK -text "External Tools check - Systeminfo.exe found"
		}
		else
		{
			Add-RichTextBoxWarn -text "External Tools check - Systeminfo.exe not found"
		}
		
		# MSInfo32.exe
		if (Test-Path "$env:programfiles\Common Files\Microsoft Shared\MSInfo\msinfo32.exe" -ErrorAction 'SilentlyContinue')
		{
			Add-RichTextBoxOK -text "External Tools check - msinfo32.exe found"
		}
		else
		{
			Add-RichTextBoxWarn -text "External Tools check - msinfo32.exe not found"
		}
		
		# DriverQuery.exe
		if (Test-Path "$env:systemroot/system32/driverquery.exe" -ErrorAction 'SilentlyContinue')
		{
			Add-RichTextBoxOK -text "External Tools check - Driverquery.exe found"
		}
		else
		{
			Add-RichTextBoxWarn -text "External Tools check - Driverquery.exe not found"
		}
		
		# Sysinternals
		if (Test-Path "$global:Sysinternals" -ErrorAction 'SilentlyContinue')
		{
			Add-RichTextBoxOK -text "External Tools check - Sysinternals found"
		}
		else
		{
			Add-RichTextBoxWarn -text "External Tools check - Sysinternals not found - Buttons ADExplorer, procexp, Procmon, PSExec, Disabled"
			$button_cmd.Enabled = $false
			$aDExplorerToolStripMenuItem.Enabled = $false
			$procexpToolStripMenuItem.Enabled = $false
			$procmonToolStripMenuItem.Enabled = $false
		}
		
		## Verify Quest.ActiveRoles.ADManagement Snapin is present			
		$QuestSnapin = Get-PSSnapin -Name Quest.ActiveRoles.ADManagement
		if (!$QuestSnapin)
		{
			Add-RichTextBoxWarn -text "External Tools check - Quest.ActiveRoles.ADManagement not found.`nPlease download it on https://software.dell.com/register/71110/"
		}
		else
		{
			Add-RichTextBoxOK -text "Questtools found!"
			# Get List of all AD-Computers for AutoComplete in $ComputerTxtBox
			# Disabled because it needs about 20-30 secs in our Domain (too slow)
			#$PCList = (Get-QADComputer -SizeLimit 5000).name
			#$textbox_computername.AutoCompleteCustomSource.AddRange($PCList)
		}
		Add-RichTextBox -text ""
	}
	############################################################################################
	#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	############################################################################################
	#endregion load
	#------------------------------------------------------------------------------------------#
	#region Code
	############################################################################################
	#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!C O D E!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	############################################################################################
	#region Buttons
	#-------#############################################################################
	#-------#!!!!!!!!!!!!!!!!!!!!!!!!!!!!B U T T O N S!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	#-------#############################################################################
	############################################################################################
	$button_autostart_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Startup Commands"
		$result = Get-WmiObject Win32_StartupCommand –ComputerName $ComputerName | Sort-Object Caption | Format-Table Caption, User, Command -auto | out-string -Width $richtextbox_output.Width
		Add-richtextbox $result
		Add-RichTextBox -text "$ComputerName - Startup Commands - Done."
	}
	############################################################################################
	$button_C_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Open C$ Drive"
		$PathToCDrive = "\\$ComputerName\c$"
		Explorer.exe $PathToCDrive
	}
	############################################################################################
	$button_check_Click = {
		$MainForm.Cursor = 'WaitCursor'
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - $Checkconn"
		if (Test-Connection $ComputerName -Count 1 -Quiet -TimeToLive 4)
		{
			$button_Check.Text = "Online"; $button_Check.ForeColor = "green"
			# Base64 Code of the "green" cable icon
			$button_Check.Image = [System.Convert]::FromBase64String('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAg9JREFUeNqkU99LU2EYfr6zQ13sJvwLmpgIYQitMJo/aUNTDAlWN
0oXXgTexBS60UbSRTdeFF0EBUYoCqITdFuj7WKOM1s67KKurK1QCBW3icyp53hevy/cwXRTqBfOOXB4nud9n+d7P0ZE+K/6F4H374YoOhebEVz5LHD9Ux/pOkG00WBC76UVWCoqMTIy3HKj+vrpE9
S6vRRZI/rwi2jqB9H4EtG1JwHq7+kWpKuCKxUjNwz4qavjNlyDHqxvqYgt56D8zKLzTi3CF9oFJC5eRQU0HdhPZ3DP2Y5Xw9MoObeDPU1DaisLE6kGTirU2eb20etbDG+mo9CzG8nG5lZMzYRhlra
Rzu5BYigsIDx33m9Ct7Mu0RXQEB1osXpDMYtZzyQv1zTis7KAdE7lAuzkMYq0lXUe0uMJej5P9HIulajjgiIsG/++UFbJ6dkg+zP/n395rnRUaG0TcD1og2diEquq2WK7WZXkUy28dciYDC4i9W0e
H/uarfkARRl7QGDc3y6SXKTjrh2jHi+q6h2W8sqKxMPQUmnY3WQ9hMaP2jYmEEuyuaNB1XV8zwAOew2+RkLYPV9SKksGMX48dEOgt2wZY14FKjNhn7tcycm4Um3F7y+fEOwzup8oOb/bF/l6OhaHM
DsrQSYNjHFTTEKw/2/PBS+Tzx+I9Lge5dM9/px+EQ+PsewscDGBAwEGAIugAWGn5gy5AAAAAElFTkSuQmCC')
			Add-RichTextBoxOK -text "$Computername is online"
			
			# Get OS
			$OSWin32_OS = Get-WmiObject -Query "SELECT * FROM Win32_OperatingSystem" -ComputerName $ComputerName
			$OSCaption = ($OSWin32_OS | Select-Object caption).Caption
			$OSVersion = $OSWin32_OS.Version
			#2003/xp+
			$OSOther = $OSWin32_OS.OtherTypeDescription
			$OSSP = $OSWin32_OS.CSDVersion
			#2008/win7+
			$OSArchi = $OSWin32_OS.OSArchitecture
			$OSFullCaption = "$OSCaption $OSOther $OSArchi $OSSP"
			if ($OSFullCaption -contains "64")
			{
				$OSFullCaption = "$OSCaption $OSOther x86 $OSSP"
			}
			$Toolstrip_Os.Text = "OS:"
			$toolstrip_OSStatus.Text = $OSFullCaption.Replace('  ', ' ')
			$toolstrip_OSStatus.ForeColor = "blue"
			
			# Get the uptime
			# Uptime incorrect in Windows 8.1 / 10 if fast reboot is enabled (default)
			$LBTime = $OSWin32_OS.ConvertToDateTime($OSWin32_OS.Lastbootuptime)
			[TimeSpan]$uptime = New-TimeSpan $LBTime $(get-date)
			$OS = get-wmiobject -class win32_operatingsystem -ComputerName $ComputerName | select-object -expand Version
			
			# Get the User
			$Username = (get-wmiobject -class win32_computersystem -ComputerName $ComputerName | select-object -expand username).Split("\")[1]
			$textbox_username.Text = $Username
			if ($OS -lt "6.3.9600")
			{
				$Profilepath = "$Profilefolder$username.v2"
				# Deactivate functions that do not work with OS < Windows 8.1"
				$Button_gpupdate.Enabled = $false
			}
			else
			{
				$Profilepath = "$Profilefolder$username.v4"
				# Activate functions that only work with Windows 8.1 and 10"
				$Button_gpupdate.Enabled = $true
			}
			
			$toolstrip_User.Text = "User:"
			$toolstrip_user_status.Text = "$Profilepath"
			$toolstrip_user_status.ForeColor = "blue"
			$toolstrip_user_status.islink = $true
			
			# Get Home Drive
			$Homepath = "$Homefolder$Username"
			$toolstrip_home.Text = "Home:"
			$toolstrip_home_status.Text = "$Homepath"
			$toolstrip_home_status.ForeColor = "blue"
			$toolstrip_home_status.IsLink = $true
			$toolstripseparator1.Visible = $true
			$toolstripseparator2.Visible = $true
			
			# Activate Buttons Rights Home and Rights Profile
			$button_homerights.Enabled = $true
			$button_profilerights.Enabled = $true
			# Output
			Add-RichTextBox -text "Username: `t$Username`nWindows: `t$OS`nProfile: `t$Profilepath `nHome: `t`t$Homepath`nUptime: `t$($uptime.days) Days $($uptime.hours) Hours $($uptime.minutes) Minutes $($uptime.seconds) Seconds"
		}
		else
		{
			# Base64 Code of the "red" cable icon
			$button_Check.Image = [System.Convert]::FromBase64String('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAMAAAAoLQ9TAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyJpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZ
Wdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYxID
Y0LjE0MDk0OSwgMjAxMC8xMi8wNy0xMDo1NzowMSAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjp
EZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIg
eG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNS4xIFdpbmRvd3MiIHhtc
E1NOkluc3RhbmNlSUQ9InhtcC5paWQ6Q0M1NzBEQTQ3RjBEMTFFNUE5QjdGMkUwMzJFNTYyQTAiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6Q0M1NzBEQTU3RjBEMTFFNUE5QjdGMkUwMzJFNT
YyQTAiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDpDQzU3MERBMjdGMEQxMUU1QTlCN0YyRTAzMkU1NjJBMCIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDp
DQzU3MERBMzdGMEQxMUU1QTlCN0YyRTAzMkU1NjJBMCIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/PogXkCcAAACuUExURczM
zL8zM7QxMcU1NcQ1Ncc2Nr0zM7IwMNx+fuenp+KTk9lwcOCMjMI0NOqystdqasE0NOy3t+7AwN2Bge29vbwzM+28vOahoeemproyMuOWluGOjuekpNt4eLkyMu/ExOWenvLQ0OWbm9zc3Nt5edx8f
Npzc7YxMa8vL9+GhvPS0vTX1+aiouu0tNhubtdra8uurtx7e7cxMeKRkemtrfX19fDHx+irq96EhP///4XRHlAAAAA6dFJOU/////////////////////////////////////////////////////
///////////////////////wA3wP8KAAAAoElEQVR42kTPRRLDMAwFUMkUbpjLzEy+/8XqtImrlfXGkuaD7MpDFMeRhK7HyTNKSqKBhUav3vSZBrQKUpnuHyDd34bmhbbgZxLEdIE+/4HTW6s/ojp
xaMDDgjQOTPUSdnjISvXwEwlf9rZGbgVqymi3B1FIbButFXRwt/NrbDJ9H8f12xVL3kUAJ3Xj+YDqTPAilFJ+1qFhBk09NHwEGABOxiQDxhPG6wAAAABJRU5ErkJggg==')
			$textbox_username.Text = ""
			$button_Check.Text = "Offline"; $button_Check.ForeColor = "red"
			Add-RichTextBoxWarn -text "$Computername is offline!"
			$Toolstrip_Os.Text = ""
			$toolstrip_OSStatus.Text = ""
			$toolstrip_User.Text = ""
			$toolstrip_user_status.Text = ""
			$toolstrip_home.Text = ""
			$toolstrip_home_status.Text = ""
			$toolstripseparator1.Visible = $false
			$toolstripseparator2.Visible = $false
		}
		$MainForm.Cursor = 'Default'
	}
	############################################################################################
	$button_checkWLAN_Click = {
		# This only works with Centrino NICs ATM, it must be filled with more nic types
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "Checking Wireless-Adapter"
		$NicInfo = Get-NICInfo -ComputerName $ComputerName | Where { $_.Name -like "*Centrino*" } | Out-String
		if ($NicInfo -eq "")
		{
			Add-RichTextBoxWarn -text "No WLAN-Hardware found"
		}
		else
		{
			Add-RichTextBox -text "$NicInfo"
		}
	}
	############################################################################################
	$button_clear_Click = {
		$richtextbox_output.Text = ""
		$Date = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
		Add-RichTextBox -text ""
		Add-RichTextBoxTitle -text "$Date"
	}
	############################################################################################
	$button_cmd_Click = {
	Get-ComputerTxtBox
	Add-RichTextBoxTitle -text "$ComputerName - $RunRemoteCMD"
	if (Test-Connection $ComputerName -Count 1 -Quiet)
	{
		$RemoteCommand = Show-Inputbox -message "$EnterCommand" -title "$Computername - Run-RemoteCMD" -default "ipconfig /all"
		if ($RemoteCommand -ne "")
		{
			Run-RemoteCMD -ComputerName $ComputerName -Command $RemoteCommand
			Add-RichTextBox -text "$ComputerName - $RemoteCommandSent"
		}
	}
	else
	{
		Add-RichTextBoxWarn -text "$ComputerOfflineOrWrong"
		Show-MsgBox -Prompt "$ComputerOfflineOrWrong" -BoxType "OKOnly" -Title "Computer offline!" -Icon "Exclamation"
	}
	}
	############################################################################################
	$button_compmgmt_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "Compmgmt $Computername"
		$command = "compmgmt.msc"
		$arguments = "/computer:$ComputerName"
		Start-Process $command $arguments
	}
	############################################################################################
	$button_ComputerGroups_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$CheckComputerGroups $Computername"
		$ComputerGroups = Get-QADComputer $ComputerName -Properties Memberof | Select-Object -Expand memberof | Out-String
		$ComputerGroups = $ComputerGroups -split ',*CN=*,'
		$ComputerGroups = $ComputerGroups -replace ('CN=', '') -replace (',OU.*', '')
		Add-RichTextBox -text "$ComputerGroups"
	}
	############################################################################################
	$button_cpuram_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "Performance of $Computername"
		$Perf = Get-ComputerStats -ComputerName $ComputerName | fl | Out-String
		Add-RichTextBox -text $Perf
		$cpu = Get-WmiObject win32_processor -computername $computername |
		Measure-Object -property LoadPercentage -Average |
		Foreach { $_.Average }
		$ram = Get-WmiObject win32_operatingsystem -ComputerName $computername |
		Foreach { "{0:N2}" -f ((($_.TotalVisibleMemorySize - $_.FreePhysicalMemory) * 100)/ $_.TotalVisibleMemorySize) }
		Load-Chart $chart1 -XPoints ("RAM $ram%" -f $ram), ("CPU $cpu%" -f $cpu) -YPoints $ram, $cpu -ChartType 'Bar'
	}
	############################################################################################
	$button_debug_Click = {
		$Command_debug = $textbox_debug.Text
		Get-ComputerTxtBox
		Add-RichTextBox -text "$command_debug"
		try
		{
			$result = Invoke-Expression $Command_debug | Out-String -Width $richtextbox_output.Width
			Add-RichTextBox -text "$result"
		}
		catch [Exception]{
			Add-RichTextBoxWarn $_.Exception.Message
		}
	}
	############################################################################################
	$button_deleteGPO_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "Deleting local gpo of the computer $Computername"
		Remove-Item "\\$ComputerName\c$\windows\system32\Grouppolicy" -Force -Recurse
		Remove-Item "\\$ComputerName\c$\windows\system32\grouppolicyusers" -Force -Recurse
		Add-RichTextBox -text "Deleted folder grouppolicy and grouppolicyusers."
	}
	############################################################################################
	$button_deleteoffline_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$Computername - Reset Offline Files"
		New-RegistryValue HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\CSC\Parameters -Name FormatDatabase -Value 1 -Type Dword -ComputerName $ComputerName
		Add-RichTextBox -text "$RegKeySet"
	}
	############################################################################################
	$button_diskusage_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Hard Drive - DiskSpace"
		$result = Get-DiskSpace -ComputerName $ComputerName | Out-String
		Add-RichTextBox -text $result
	}
	############################################################################################
	$button_DNScheck_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - $DnsConf"
		#		
		$DNS = Resolve-DnsName $ComputerName
		Add-RichTextBox -text "$DNS"
	}
	############################################################################################
	$button_eventlog20_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle "$ComputerName - EventLog - Last 20"
		if ($ComputerName -like "localhost")
		{
			$Events_Last20Sytem = Get-EventLog -Newest 20 | Select-Object Index, EventID, Source, Message, MachineName, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_Last20Sytem
		}
		else
		{
			$Events_Last20Sytem = Get-EventLog -Newest 20 -ComputerName $ComputerName | Select-Object Index, EventID, Source, Message, MachineName, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_Last20Sytem
		}
	}
	############################################################################################
	$button_eventlogmmc_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Event Viewer MMC (eventvwr $Computername)"
		$command = "eventvwr"
		$arguments = "$ComputerName"
		Start-Process $command $arguments
	}
	############################################################################################
	$button_eventlognames_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - EventLog - LogNames list"
		if ($ComputerName -eq "localhost")
		{
			$EventsLog = Get-EventLog -list | Format-List | Out-String
			Add-RichTextBox $EventsLog
		}
		else
		{
			$EventsLog = Get-EventLog -list -ComputerName $ComputerName | Format-List | Out-String
			Add-RichTextBox $EventsLog
		}
	}
	############################################################################################
	$button_export_Click = {
		$timestamp = Get-Date -Format "dd-MM-yyyy HH-mm"
		$Filepath = "$Outfile" + "\log-$timestamp"
		($richtextbox_output.Text | Out-String) -replace "`n", "`r`n" | Out-File -FilePath "$Filepath.log"
		Add-RichTextBoxOK -text "Saved in $Filepath.log."
	}
	############################################################################################
	$buttonFixWMI_Click = {
		#not sure if this is working when WMI actually needs a fix! 
		Get-ComputerTxtBox
		Invoke-Command -ComputerName $ComputerName -ScriptBlock {
			WinMgmt /standalonehost
			WinMgmt /resetrepository
		}
		Add-RichTextBox -text "WMI on Computer $ComputerName reset. Please reboot."
	}
	############################################################################################
	$button_folderrights_Click = {
		$Folderpath = Show-InputBox -title "$FolderPathInputBoxTitle" -message "$FolderPathInputBoxMsg"
		Add-RichTextBoxTitle -text "$ShowFolderRights $Folderpath"
		Try
		{
			$Folderrights = Get-Acl "$Folderpath" | Format-List | Out-String
			Add-RichTextBox -text "$Folderrights"
		}
		catch [Exception]{
			Add-RichTextBoxWarn $_.Exception.Message
		}
	}
	############################################################################################
	$button_getadvertisedsoftware_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "Software of $Computername"
		$MainForm.Cursor = 'WaitCursor'
		$Applications = Get-WmiObject -Query "Select * From CCM_Application" -Namespace "Root\ccm\ClientSDK" -ComputerName $ComputerName | Sort-Object -Property Fullname | Select-Object -Property Fullname, @{ label = "Installed"; Expression = { $_.convertToDateTime($_.LastInstallTime) } }, InstallState | format-table | Out-String
		Add-RichTextBoxWarn $_.Exception.Message
		Add-RichTextBox $Applications
		$MainForm.Cursor = 'Default'
	}
	############################################################################################
	$button_GetPC_Click = {
		# This only Works with SCCM!
		$MainForm.Cursor = 'WaitCursor'
		Get-UserTxtBox
		$SamAccountName = $textbox_username.Text
		Add-RichTextBoxTitle -text "$ShowingLastPC"
		Get-QADUser -Identity $SamAccountName
		try
		{
			$User_Computer = Get-WmiObject -namespace $SCCMNameSpace -computer $SCCMServer -query "select SMS_R_System.Name, SMS_R_System.SystemOUName from  SMS_R_System where SMS_R_System.LastLogonUserName = ""$SamAccountName""" | Select-Object -ExpandProperty Name
			Add-RichTextBox -text "User: $SamAccountName Computer: $User_Computer"
			$textbox_computername.Text = "$User_Computer"
			$button_Check.PerformClick()
		}
		catch [Exception]{
			Add-RichTextBoxWarn -text "Error checking Computer of $SamAccountname. User maybe not existing."
		}
		$MainForm.Cursor = 'Default'
	}
	############################################################################################
	$button_getsccmcache_Click = {
		Get-ComputerTxtBox
		$CacheSize = (Get-WmiObject -Namespace 'Root\ccm\SoftMgmtAgent' -Class CacheConfig -ComputerName $ComputerName).size
		Add-RichTextBoxTitle -text "Cache Size of $Computername"
		Add-RichTextBox -text "Cache $CacheSize MB"
	}
	############################################################################################
	$button_get_session_Click = {
		Get-ComputerTxtBox
		$Result = Invoke-Command -ComputerName $ComputerName -ScriptBlock { qwinsta } | Out-String
		Add-RichTextBoxTitle -text "Getting Sessions on $Computername"
		Add-RichTextBox -text "$Result"
	}
	############################################################################################
	$button_getvariablesfilter_Click = {
		$Variables = Get-Variable -Exclude button*, textbox*, label*, toolstrip*, *menu*, tab* | Out-String
		Add-RichTextBox -text "$Variables"
	}
	############################################################################################
	$Button_gpupdate_Click = {
		#Not sure if this stuff is working....
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - GPUpdate (Remotely via WMI)"
		$Force = Show-MsgBox -Title "Force?" -BoxType 'YesNo' -Icon 'Question' -Prompt "Force?"
		if ($Force -eq "YES")
		{
			Run-RemoteCMD -ComputerName $ComputerName -Command "gpupdate /force"
		}
		else
		{
			Run-RemoteCMD -ComputerName $ComputerName -Command "gpupdate"
		}
	}
	############################################################################################
	$button_gpresult_Click = {
		# maybe polish this so that you can select only possible users? maybe like in the default 
		# gpresult.
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "Get GPResult of $Computername"
		$GPUser = Show-InputBox -title "Enter Username" -message "Enter Username"
		$folderbrowserdialog1.ShowDialog()
		$folder = $folderbrowserdialog1.SelectedPath
		$timestamp = Get-Date -Format "dd-MM-yyyy HH-mm"
		$Filepath = "$Folder" + "\report-$timestamp.htm"
		Get-GPResultantSetOfPolicy -Computer $ComputerName -User $GPUser -ReportType html -path $Filepath
		Add-RichTextBox -text "GPResult of User $GPUser on Computer $Computername saved in $Filepath"
	}
	############################################################################################
	$button_homerights_Click = {
		$Username = $textbox_username.Text
		Add-RichTextBoxTitle -text "$checkHomeRights $Username"
		$Homepath = $toolstrip_home_status.Text
		try
		{
			$Homerights = Get-Acl -Path "$Homepath" | format-list | Out-String
			Add-RichTextBox -text "$Homerights"
		}
		catch [Exception]{
			Add-RichTextBoxWarn $_.Exception.Message
		}
	}
	############################################################################################
	$button_hosts_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "Showing hostsfile of $Computername"
		$Hostsfile = Get-Content "\\$computername\c$\windows\system32\drivers\etc\hosts" | Out-String -Width $richtextbox_output.Width
		Add-RichTextBox -text $Hostsfile
	}
	############################################################################################
	$button_hotfix_Click = {
		$MainForm.Cursor = 'WaitCursor'
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Get the Windows Updates Installed"
		$result = Get-HotFix -ComputerName $ComputerName | Sort-Object InstalledOn | Format-Table __SERVER, Description, HotFixID, InstalledBy, InstalledOn, Caption -AutoSize | Out-String -Width $richtextbox_output.Width
		Add-RichTextBox $result
		$MainForm.Cursor = 'Default'
	}
	############################################################################################
	$button_installedSoftware_Click = {
		Get-ComputerTxtBox
		$result = Get-InstalledSoftware -ComputerName $ComputerName | Sort-Object -Property Name | Format-Table -AutoSize | Out-String -Width $richtextbox_output.Width
		Add-RichTextBoxTitle -text "$ComputerName - Installed Softwares List"
		Add-RichTextBox $result
	}
	############################################################################################
	$button_ipconfig_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - $NetConf"
		$result = Get-IP -ComputerName $ComputerName | Format-List Name, IP4, IP4Subnet, DefaultGWY, MacAddress, DNSServer | out-string -Width $richtextbox_output.Width
		Add-RichTextBox "$result`n"
	}
	############################################################################################
	$button_ipconfig2_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - $NetConf"
		$result = Get-IP -ComputerName $ComputerName | Format-List Name, IP4, IP4Subnet, DefaultGWY, MacAddress, DNSServer | out-string -Width $richtextbox_output.Width
		Add-RichTextBox "$result`n"
	}
	############################################################################################
	$button_localadmins_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ShowLocalAdminsOf $Computername"
		$LocalAdmins = Get-LocalAdmins $ComputerName | Out-String -Width $richtextbox_output.Width
		Add-RichTextBox -text $LocalAdmins
	}
	############################################################################################
	$button_logoff_user_Click = {
		#this could be polished, get session ids and just let you select them maybe?
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Logoff User Session"
		$Session_Logoff = Show-InputBox -title "Enter Session to logoff" -message "Please enter the Session-ID that will be logged of"
		Add-RichTextBox -text "$ComputerName - Session to Logoff $Session_Logoff"
		Run-RemoteCMD -ComputerName $ComputerName -Command "rwinsta $Session_Logoff /server:$Computername"
		Add-RichTextBox -text "Session logged off!"
	}
	############################################################################################
	$button_listvariables_click = {
		$Variables = Get-Variable | Out-String
		Add-RichTextBox -text "$Variables"
	}
	############################################################################################
	$button_mainboard_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - MotherBoard"
		$result = Get-MotherBoard -ComputerName $ComputerName | out-string -Width $richtextbox_output.Width
		Add-RichTextBox "$result"
	}
	############################################################################################
	$button_memory_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Memory Configuration"
		$result = Get-MemoryConfiguration -ComputerName $ComputerName | out-string -Width $richtextbox_output.Width
		Add-RichTextBox -text "$result"
	}
	############################################################################################
	$button_MMCServices_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Services MMC (services.msc /computer:$ComputerName)"
		$command = "services.msc"
		$arguments = "/computer:$computername"
		Start-Process $command $arguments
	}
	############################################################################################
	$button_MSRA_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Remote Assistance"
		MSRA.exe /OfferRA $ComputerName
	}
	############################################################################################
	$button_nbbattery_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "Getting batterystate of $Computername ..."
		$OnBattery = Get-WmiObject Win32_Battery -ComputerName $ComputerName | Select-Object -ExpandProperty BatteryStatus
		if ($OnBattery -eq 1)
		{
			$CableConnected = "false"
			$BatteryConnected = "true"
		}
		if ($OnBattery -eq 2)
		{
			$CableConnected = "true"
			$BatteryConnected = "false"
		}
		$BatteryState = Get-WmiObject Win32_Battery -ComputerName $ComputerName | Select-Object @{ N = 'Remaining Charge %'; E = { $_.EstimatedChargeRemaining } }, Status | fl | Out-String
		Add-RichTextBox -text "On cable: $Cableconnected`nOn battery: $BatteryConnected `n$BatteryState"
	}
	############################################################################################
	$button_openc_Click = {
		explorer.exe \\$ComputerName\c$
	}
	############################################################################################
	$button_PCGroups_Click = {
		Add-RichTextBoxTitle -text "Transfer Computer Groups"
		$ComputerOLD = Show-InputBox -title "Enter Source Computer" -message "Please enter Source Computer"
		$TestComputerOLD = Get-QADComputer $ComputerOLD
		if ($TestComputerOLD -eq $null)
		{
			Show-MsgBox -Title "Error" -BoxType "OKOnly" -Prompt "ComputerNotFound" -Icon "Exclamation"
			Add-RichTextBoxWarn -text "Computer Not Found!"
		}
		else
		{
			Add-RichTextBox -text "Source Computer = $ComputerOLD"
			$ComputerNEW = Show-InputBox -title "Enter Destination Computer" -message "Enter Destination Computer"
			$TestComputerNEW = Get-QADObject $ComputerNEW
			if ($TestComputerNEW -eq $NULL)
			{
				Show-MsgBox -Title "Error" -BoxType "OKOnly" -Prompt "Computer Not Found" -Icon "Exclamation"
				Add-RichTextBoxWarn -text "Computer Not Found"
			}
			else
			{
				if ($ComputerNEW -eq $ComputerOLD)
				{
					Show-MsgBox -Title "Error" -BoxType "OKOnly" -Prompt "You Have Entered Two Identical Computers" -Icon "Exclamation"
					Add-RichTextBoxWarn -text "Two Identical Computers"
				}
				else
				{
					Add-RichTextBox -text "Destination Computer $ComputerNew"
					$CheckOK = Show-MsgBox -Title "Transferring" -Prompt "Do You Want To Transfer `nSourceComputer : $ComputerOLD `nDestinationComputer : $ComputerNEW" -BoxType "YESNO" -Icon "Exclamation"
					if ($CheckOK -eq "YES")
					{
						#Move AD Groups von OLD to New
						Add-RichTextBox -text "Transferring computergroups..."
						#Auslesen der Computergruppen
						#$ComputerGroups = Get-QADComputer $ComputerOLD -Properties Memberof | Select-Object -Expand memberof | Out-String
						Get-QADComputer $ComputerOLD -Properties Memberof | Select-Object -Expand memberof | ForEach-Object { Add-QADGroupMember -Identity $ComputerNEW -Members $_.Memberof }
						Add-RichTextBox -text "Showing computer Groups of $ComputerOLD`n$Computergroups"
						#Add-QADGroupMember "Group" -Member "Computer"
						$ComputerOLD = $ComputerOLD + "$"
						$ComputerNEW2 = $ComputerNEW + "$"
						$Groups = get-QADMemberOf $ComputerOLD
						$Groups | foreach{
							if ($_.name -ne "Domain Computers")
							{
								Add-RichTextBox -text "$ComputerNew adding to group $_ ..."
								try
								{
									Add-QADGroupMember $_ -Member $ComputerNEW2
									Add-RichTextBoxOK "Finished!"
								}
								catch [Exception]{
									Add-RichTextBoxWarn $_.Exception.Message
								}
							}
						}
					}
					if ($CheckOK -eq "NO")
					{
						Add-RichTextBoxWarn -text "Aborted."
					}
				}
			}
		}
	}
	############################################################################################
	$button_ping_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Ping Test"
		$result = Test-Connection $ComputerName | out-string -Width $richtextbox_output.Width
		Add-RichTextBox -text "Ping`n$result"
	}
	############################################################################################
	$button_printer_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle "$ComputerName - Printers"
		$result = Get-WmiObject Win32_Printer -ComputerName $ComputerName | Format-table SystemName, Name, Comment, PortName, Location, DriverName -AutoSize | Out-String -Width $richtextbox_output.Width
		if ($result -ne $null)
		{
			Add-RichTextBox $result
		}
		else { Add-RichTextBox "$ComputerName - No Printer detected" }
	}
	############################################################################################
	$button_process_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - All Processes"
		if ($ComputerName -eq "localhost") { $ComputerName = "." }
		$ProcessALL = get-process -ComputerName $ComputerName | out-string
		Add-RichTextBox $ProcessALL
	}
	############################################################################################
	$button_process_100_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Processes >100MB"
		if ($ComputerName -eq "localhost") { $ComputerName = "." }
		$owners = @{ }
		Get-WmiObject win32_process -ComputerName $ComputerName | % { $owners[$_.handle] = $_.getowner().user }
		$Processes_Over100MB = Get-Process -ComputerName $ComputerName | Where-Object { $_.WorkingSet -gt 100mb } | Select-Object Handles, NPM, PM, WS, VM, CPU, ID, ProcessName, @{ l = "Owner"; e = { $owners[$_.id.tostring()] } } | sort ws | ft -AutoSize | Out-String
		Add-RichTextBox $Processes_Over100MB
	}
	############################################################################################
	$button_process_cmd_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Get the CommandLine Argument for each process"
		#Get-WmiObject Win32_Process -Filter "Name like '%powershell%'" | select-Object CommandLine
		$result = Get-WmiObject Win32_Process -ComputerName $ComputerName | select-Object Name, ProcessID, CommandLine | Format-Table -AutoSize | Out-String -Width $richtextbox_output.Width
		Add-RichTextBox $result
	}
	############################################################################################
	$button_process_grid_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - All Processes - GridView"
		if ($ComputerName -eq "localhost") { $ComputerName = "." }
		$owners = @{ }
		Get-WmiObject win32_process -ComputerName $ComputerName | % { $owners[$_.handle] = $_.getowner().user }
		$ProcessALL = get-process -ComputerName $ComputerName | Select @{ l = "Owner"; e = { $owners[$_.id.tostring()] } }, * | Out-GridView
	}
	############################################################################################
	$button_process_owner_Click = {
		Add-RichTextBoxTitle -text "$ComputerName - Processes with owners"
		if ($ComputerName -eq "localhost") { $ComputerName = "." }
		$owners = @{ }
		Get-WmiObject win32_process -ComputerName $ComputerName | % { $owners[$_.handle] = $_.getowner().user }
		$ProcessALL = get-process -ComputerName $ComputerName | Select ProcessName, @{ l = "Owner"; e = { $owners[$_.id.tostring()] } }, CPU, WorkingSet, Handles, Id | ft -AutoSize | out-string
		Add-RichTextBox $ProcessALL
	}
	############################################################################################
	$button_process_start_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Start Process"
		$Process_query = $textbox_Process.text
		Add-RichTextBox -text "$ComputerName - Process to Start: $Process_query"
		Run-RemoteCMD -ComputerName $ComputerName -Command $Process_query
		Add-RichTextBox -text "Process $Process_query started"
	}
	############################################################################################
	$button_process_stop_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Terminate Process"
		$Process_query = $textbox_Process.text
		Add-RichTextBox -text "$ComputerName - Process to Terminate: $Process_query"
		Run-RemoteCMD -ComputerName $ComputerName -Command "taskkill /IM $Process_query /F"
		Add-RichTextBox -text "Process $Process_query stopped"
	}
	############################################################################################
	$button_processor_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Processor Information"
		$result = Get-Processor -ComputerName $ComputerName | out-string -Width $richtextbox_output.Width
		Add-RichTextBox -text "$result"
	}
	############################################################################################
	$button_proclasthour_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Processes - Processes started in last hour"
		if ($ComputerName -eq "localhost") { $ComputerName = "." }
		$owners = @{ }
		Get-WmiObject win32_process -ComputerName $ComputerName | % { $owners[$_.handle] = $_.getowner().user }
		$ProcessALL = get-process -ComputerName $ComputerName | Where-Object { trap { continue }  (New-Timespan $_.StartTime).TotalMinutes -le 10 } | Select ProcessName, @{ l = "StartTime"; e = { $_.StartTime } }, @{ l = "Owner"; e = { $owners[$_.id.tostring()] } }, CPU, WorkingSet, Handles, Id | fl | out-string -Width $richtextbox_output.Width
		Add-RichTextBox $ProcessALL
	}
	############################################################################################
	$button_profilerights_Click = {
		$Username = $textbox_username.Text
		Add-RichTextBoxTitle -text "$checkProfileRights $Username"
		$Profilepath = $toolstrip_user_status.Text
		Try
		{
			$Profilerights = Get-Acl "$Profilepath" | format-list | Out-String
			Add-RichTextBox -text "$Profilerights"
		}
		catch [Exception]{
			Add-RichTextBoxWarn $_.Exception.Message
		}
	}
	############################################################################################
	$button_psremote_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - $openPSRS"
		if (Test-PSRemoting -ComputerName $ComputerName)
		{
			Add-RichTextBox -text "$ComputerName - $starting $openPSRS"
			Start-Process powershell.exe -ArgumentList "-noexit -command Enter-PSSession -ComputerName $ComputerName"
		}
		else
		{
			Add-RichTextBoxWarn -text "$ComputerName - $PSRnotEnabled"
		}
	}
	############################################################################################
	$button_rdp_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - RDP"
		$command = "mstsc"
		$argument = "/v:$computername /admin"
		Start-Process $command $argument
	}
	############################################################################################
	$button_regedit_Click = {
		Start-Process regedit.exe
	}
	############################################################################################
	$button_Remotecontrol_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "Starting Remotecontrol $Computername"
		& $global:CmRCviewer $ComputerName
	}
	############################################################################################
	$button_ResetPWD_Click = {
		Add-RichTextBoxTitle -text "User Passwort Reset"
		$PWUser = Show-InputBox -message "$EnterUsername" -title "$EnterUsername"
		if ($PWUser -ne $null)
		{
			$PWUserExists = Get-ADUser -identity $PWUser
			if ($PWUserExists -ne $null)
			{
				$PWPW = Show-InputBox -message "$EnterPassword" -title "$EnterPassword"
				$PWSecure = $PWPW | ConvertTo-SecureString -AsPlainText -Force
				Set-ADAccountPassword $PWUser -NewPassword $PWSecure -Reset -PassThru | Set-AdUser -ChangePasswordAtLogon $True
				Add-RichTextBox -text "Password: $PWPW User: $PWUser. `n$ChangePasswordAtLogon."
				Show-MsgBox -Prompt "Password: $PWPW User: $PWUser. `n$ChangePasswordAtLogon." -Title "$PasswordResetOK" -Icon Information -BoxType OKOnly
			}
			else
			{
				Add-RichTextBoxWarn -text "User $PWUser $NotExistinginAD."
				Show-MsgBox -Prompt "User $PWUser $NotExistinginAD." -Title "$NotExistinginAD" -Icon Information -BoxType OKOnly
			}
		}
		else
		{
			Add-RichTextBoxWarn -text "$NoInputDetected"
			Show-MsgBox -Prompt "$NoInputDetected" -Title "$NoInputDetected" -Icon Information -BoxType OKOnly
		}
	}
	############################################################################################
	$button_routetable_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Route table"
		$result = Get-Routetable -ComputerName $ComputerName | ft -auto | Out-String
		Add-RichTextBox $result
	}
	############################################################################################
	$button_sccm_start_Click = {
		Get-ComputerTxtBox
		$action = $combobox1.SelectedItem
		switch ($action)
		{
			"Auswertungszyklus für Softwareupdatebereitstellung" {
				Invoke-Command -ComputerName $ComputerName -ScriptBlock {
					Invoke-WmiMethod -Namespace "Root\CCM" -Class SMS_Client -Name TriggerSchedule -ArgumentList "{00000000-0000-0000-0000-000000000108}"
				}
			}
			"Benutzerrichtlinienabruf und Auswertungszyklus" {
				Invoke-Command -ComputerName $ComputerName -ScriptBlock {
					Invoke-WmiMethod -Namespace "Root\CCM" -Class SMS_Client -Name TriggerSchedule -ArgumentList "{00000000-0000-0000-0000-000000000027}"
				}
			}
			"Computerrichtlininenabruf und Auswertungszyklus" {
				Invoke-Command -ComputerName $ComputerName -ScriptBlock {
					Invoke-WmiMethod -Namespace "Root\CCM" -Class SMS_Client -Name TriggerSchedule -ArgumentList "{00000000-0000-0000-0000-000000000021}"
				}
			}
			"Dateisammlungszyklus" {
				Invoke-Command -ComputerName $ComputerName -ScriptBlock {
					Invoke-WmiMethod -Namespace "Root\CCM" -Class SMS_Client -Name TriggerSchedule -ArgumentList "{00000000-0000-0000-0000-000000000010}"
				}
			}
			"Hardwareinventurzyklus" {
				Invoke-Command -ComputerName $ComputerName -ScriptBlock {
					Invoke-WmiMethod -Namespace "Root\CCM" -Class SMS_Client -Name TriggerSchedule -ArgumentList "{00000000-0000-0000-0000-000000000001}"
				}
			}
			"Softwareinventurzyklus" {
				Invoke-Command -ComputerName $ComputerName -ScriptBlock {
					Invoke-WmiMethod -Namespace "Root\CCM" -Class SMS_Client -Name TriggerSchedule -ArgumentList "{00000000-0000-0000-0000-000000000002}"
				}
			}
			"Überprüfungszyklus für Softwareupdates"{
				Invoke-Command -ComputerName $ComputerName -ScriptBlock {
					Invoke-WmiMethod -Namespace "Root\CCM" -Class SMS_Client -Name TriggerSchedule -ArgumentList "{00000000-0000-0000-0000-0000000000113}"
				}
			}
			"Software Metering Usage Report Cycle" {
				Invoke-Command -ComputerName $ComputerName -ScriptBlock {
					Invoke-WmiMethod -Namespace "Root\CCM" -Class SMS_Client -Name TriggerSchedule -ArgumentList "{00000000-0000-0000-0000-000000000108}"
				}
			}
			"User Policy Retrieval & Evaluation Cycle" {
				Invoke-Command -ComputerName $ComputerName -ScriptBlock {
					Invoke-WmiMethod -Namespace "Root\CCM" -Class SMS_Client -Name TriggerSchedule -ArgumentList "{00000000-0000-0000-0000-000000000027}"
				}
			}
			"Machine Policy Retrieval & Evaluation Cycle" {
				Invoke-Command -ComputerName $ComputerName -ScriptBlock {
					Invoke-WmiMethod -Namespace "Root\CCM" -Class SMS_Client -Name TriggerSchedule -ArgumentList "{00000000-0000-0000-0000-000000000021}"
				}
			}
			"File Collection Cycle" {
				Invoke-Command -ComputerName $ComputerName -ScriptBlock {
					Invoke-WmiMethod -Namespace "Root\CCM" -Class SMS_Client -Name TriggerSchedule -ArgumentList "{00000000-0000-0000-0000-000000000010}"
				}
			}
			"Hardware Inventory Cycle" {
				Invoke-Command -ComputerName $ComputerName -ScriptBlock {
					Invoke-WmiMethod -Namespace "Root\CCM" -Class SMS_Client -Name TriggerSchedule -ArgumentList "{00000000-0000-0000-0000-000000000001}"
				}
			}
			"Software Inventory Cycle" {
				Invoke-Command -ComputerName $ComputerName -ScriptBlock {
					Invoke-WmiMethod -Namespace "Root\CCM" -Class SMS_Client -Name TriggerSchedule -ArgumentList "{00000000-0000-0000-0000-000000000002}"
				}
			}
			"Software Updates Deployment Evaluation Cycle"{
				Invoke-Command -ComputerName $ComputerName -ScriptBlock {
					Invoke-WmiMethod -Namespace "Root\CCM" -Class SMS_Client -Name TriggerSchedule -ArgumentList "{00000000-0000-0000-0000-0000000000113}"
				}
			}
		}
		
		Add-RichTextBoxTitle -text "Action $action started on Computer $Computername"
	}
	############################################################################################
	$button_search_Click = {
		#on first search set global:run to 1 for "search next". Always adding +1 to the result
		#so the search starts one char later
		if ($global:run -ne 1)
		{
			$global:run = 1
			$Search = $textbox_search.Text
			$Result = $richtextbox_output.Find($Search)
			$global:Start = $Result + 1
		}
		else
		{
			$Search = $textbox_search.Text
			$Result = $richtextbox_output.Find($Search, $global:Start, 'None')
			$global:Start = $Result + 1
		}
	}
	############################################################################################
	$button_services_Click = {
		#Clear-RichTextBox
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Services - All Services + Owners"
		if ($ComputerName -eq "localhost") { $ComputerName = "." }
		$Services_StartModeAuto = Get-WmiObject Win32_Service -ComputerName $ComputerName | select Name, ProcessID, StartMode, State, @{ Name = "Owner"; Expression = { $_.StartName } } | ft -AutoSize | out-string -Width $richtextbox_output.Width
		Add-RichTextBox $Services_StartModeAuto
	}
	############################################################################################
	$button_servicesauto_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Services - StartMode:Automatic"
		if ($ComputerName -eq "localhost") { $ComputerName = "." }
		$Services_StartModeAuto = Get-WmiObject Win32_Service -ComputerName $ComputerName -Filter "startmode='auto'" | Select-Object DisplayName, Name, ProcessID, StartMode, State | Format-Table -AutoSize | out-string -Width $richtextbox_output.Width
		Add-RichTextBox $Services_StartModeAuto
	}
	############################################################################################
	$button_servicesautostop_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Services - Services with StartMode: Automatic and Status: NOT Running"
		if ($ComputerName -eq "localhost") { $ComputerName = "." }
		$Services_StartModeAuto = Get-WmiObject Win32_Service -ComputerName $ComputerName -Filter "startmode='auto' AND state!='running'" | Select-Object DisplayName, Name, StartMode, State | ft -AutoSize | out-string -Width $richtextbox_output.Width
		Add-RichTextBox $Services_StartModeAuto
	}
	############################################################################################
	$button_servicescheck_Click = {
		Get-ComputerTxtBox
		$a = new-object -comobject wscript.shell
		Add-RichTextBoxTitle "$COMPUTERNAME - Query Service"
		#$Service_query = Read-Host "Enter the Service Name to Query `n"
		$Service_query = $textbox_services.text
		$intAnswer = $a.popup("Do you want to continue ?", 0, "$ComputerName - Query Service: $Service_query", 4)
		if (($ComputerName -like "localhost") -and ($intAnswer -eq 6))
		{
			Add-RichTextBox "$COMPUTERNAME - Checking Service $Service_query ..."
			$Service_query_return = Get-WmiObject Win32_Service -Filter "Name='$Service_query'" | Out-String
			Add-RichTextBox "$COMPUTERNAME - Command Sent! Service $Service_query"
			Add-RichTextBox $Service_query_return
			Add-RichTextBox -Text "$ComputerName - Query Service $Service_query - Done."
		}
		else
		{
			if ($intAnswer -eq 6)
			{
				Add-RichTextBox "$COMPUTERNAME - Checking the Service $Service_query ..."
				$Service_query_return = Get-WmiObject -computername $ComputerName Win32_Service -Filter "Name='$Service_query'" | Out-String
				Add-RichTextBox "$COMPUTERNAME - Command Sent! Service $Service_query"
				Add-RichTextBox $Service_query_return
				Add-RichTextBox -Text "$ComputerName - Query Service $Service_query - Done."
			}
		}
	}
	############################################################################################
	$button_servicesnonstandard_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Services - Non-Standard Windows Service Accounts"
		$NormalAccount1 = "LocalSystem"
		$NormalAccount2 = "NT Authority\\LocalService"
		$NormalAccount3 = "NT Authority\\NetworkService"
		$wql = 'Select Name, DisplayName, StartName, __Server From Win32_Service WHERE ((StartName != "LocalSystem") and (StartName != "NT Authority\\LocalService") and (StartName != "NT Authority\\NetworkService"))'
		$query = Get-WmiObject -Query $wql -ComputerName $ComputerName -ErrorAction Stop | Select-Object __SERVER, StartName, Name, DisplayName | Format-Table -AutoSize | Out-String
		if ($query -eq $null) { Add-RichTextBox "$Computername - All the services use Standard Windows Service Accounts" }
		else { Add-RichTextBox $query }
		
	}
	############################################################################################
	$button_servicesrestart_Click = {
		#Clear-RichTextBox
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Restart Service"
		#Add-RichTextBox "# SERVICES - RESTART SERVICE - COMPUTERNAME: $ComputerName `n`n"
		#$Service_query = Read-Host "Enter the Service Name to Start `n"
		$Service_query = $textbox_services.text
		add-richtextbox -text "$ComputerName - Service to Restart: $Service_query"
		#Add-RichTextBox "SERVICE: $Service_query"
		$a = new-object -comobject wscript.shell
		$intAnswer = $a.popup("Do you want to continue ?", 0, "$ComputerName - Start Service: $Service_query", 4)
		if (($ComputerName -like "localhost") -and ($intAnswer -eq 6))
		{
			add-richtextbox -text "$ComputerName - Stopping Service: $Service_query ..."
			$Service_query_return = Get-WmiObject Win32_Service -Filter "Name='$Service_query'"
			$Service_query_return.stopservice()
			add-richtextbox -Text "$ComputerName - Command Sent! $Service_query should be stopped"
			Add-RichTextBox $Service_query_return
			add-richtextbox -Text "$ComputerName - Checking the status of $Service_Query ..."
			Start-Sleep -Milliseconds 1000
			$Service_query_result = Get-WmiObject Win32_Service -Filter "Name='$Service_query'" | Out-String
			Add-RichTextBox $Service_query_result
			add-richtextbox -Text "$ComputerName - Stop Service $Service_query - Done."
			add-richtextbox -Text "$ComputerName - Restarting the Service $Service_query ..."
			#Add-RichTextBox "Starting Service: $Service_query...`r"
			$Service_query_return = Get-WmiObject Win32_Service -Filter "Name='$Service_query'"
			$Service_query_return.startservice()
			add-richtextbox -Text "$ComputerName - Command Sent! $Service_query should be started"
			Add-RichTextBox $Service_query_return
			add-richtextbox -Text "$ComputerName - Checking the status of $Service_Query ..."
			Start-Sleep -Milliseconds 1000
			$Service_query_result = Get-WmiObject Win32_Service -Filter "Name='$Service_query'" | Out-String
			Add-RichTextBox $Service_query_result
			add-richtextbox -Text "$ComputerName - Start Service $Service_query - Done."
		}
		else
		{
			if ($intAnswer -eq 6)
			{
				add-richtextbox -text "$ComputerName - Stopping Service: $Service_query ..."
				$Service_query_return = Get-WmiObject Win32_Service -Filter "Name='$Service_query'"
				$Service_query_return.stopservice()
				add-richtextbox -Text "$ComputerName - Command Sent! $Service_query should be stopped"
				Add-RichTextBox $Service_query_return
				add-richtextbox -Text "$ComputerName - Checking the status of $Service_Query ..."
				Start-Sleep -Milliseconds 1000
				$Service_query_result = Get-WmiObject Win32_Service -Filter "Name='$Service_query'" | Out-String
				Add-RichTextBox $Service_query_result
				add-richtextbox -Text "$ComputerName - Stop Service $Service_query - Done."
				add-richtextbox -Text "$ComputerName - Restarting the Service $Service_query ..."
				$Service_query_return = Get-WmiObject Win32_Service -computername $ComputerName -Filter "Name='$Service_query'"
				$Service_query_return.startservice()
				add-richtextbox -Text "$ComputerName - Command Sent! $Service_query should be started"
				Add-RichTextBox $Service_query_return
				add-richtextbox -Text "$ComputerName - Checking the status of $Service_Query ..."
				Start-Sleep -Milliseconds 1000
				$Service_query_result = Get-WmiObject Win32_Service -computername $ComputerName -Filter "Name='$Service_query'" | Out-String
				Add-RichTextBox $Service_query_result
				add-richtextbox -Text "$ComputerName - Start Service $Service_query - Done."
			}
		}
	}
	############################################################################################
	$button_servicesrunning_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Services - Status: Running"
		if ($ComputerName -eq "localhost") { $ComputerName = "." }
		$Services_running = Get-Service -ComputerName $ComputerName | Where-Object { $_.Status -eq "Running" } | Format-Table -AutoSize | Out-String -Width $richtextbox_output.Width
		Add-RichTextBox -text $Services_running
	}
	############################################################################################
	$button_servicesstart_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Start Service"
		$Service_query = $textbox_services.text
		add-richtextbox -text "$ComputerName - Service to start: $Service_query"
		$a = new-object -comobject wscript.shell
		$intAnswer = $a.popup("Do you want to continue ?", 0, "$ComputerName - Start Service: $Service_query", 4)
		if (($ComputerName -like "localhost") -and ($intAnswer -eq 6))
		{
			add-richtextbox -text "$ComputerName - Starting Service: $Service_query ..."
			$Service_query_return = Get-WmiObject Win32_Service -Filter "Name='$Service_query'"
			$Service_query_return.startservice()
			add-richtextbox -Text "$ComputerName - Command Sent! $Service_query should be started"
			Add-RichTextBox $Service_query_return
			add-richtextbox -Text "$ComputerName - Checking the status of $Service_Query ..."
			Start-Sleep -Milliseconds 1000
			$Service_query_result = Get-WmiObject Win32_Service -Filter "Name='$Service_query'" | Out-String
			Add-RichTextBox $Service_query_result
			add-richtextbox -Text "$ComputerName - Start Service $Service_query - Done."
		}
		else
		{
			if ($intAnswer -eq 6)
			{
				add-richtextbox -text "$ComputerName - Starting Service: $Service_query ..."
				$Service_query_return = Get-WmiObject Win32_Service -computername $ComputerName -Filter "Name='$Service_query'"
				$Service_query_return.startservice()
				add-richtextbox -Text "$ComputerName - Command Sent! $Service_query should be started"
				Add-RichTextBox $Service_query_return
				add-richtextbox -Text "$ComputerName - Checking the status of $Service_Query ..."
				Start-Sleep -Milliseconds 1000
				$Service_query_result = Get-WmiObject Win32_Service -computername $ComputerName -Filter "Name='$Service_query'" | Out-String
				Add-RichTextBox $Service_query_result
				add-richtextbox -Text "$ComputerName - Start Service $Service_query - Done."
			}
		}
	}
	############################################################################################
	$button_servicesstop_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Stop Service"
		$Service_query = $textbox_services.text
		Add-richtextbox -text "$ComputerName - Service to Stop: $Service_query"
		$a = new-object -comobject wscript.shell
		$intAnswer = $a.popup("Do you want to continue ?", 0, "$ComputerName - Stop Service: $Service_query", 4)
		if (($ComputerName -like "localhost") -and ($intAnswer -eq 6))
		{
			add-richtextbox -text "$ComputerName - Stopping Service: $Service_query ..."
			$Service_query_return = Get-WmiObject Win32_Service -Filter "Name='$Service_query'"
			$Service_query_return.stopservice()
			add-richtextbox -Text "$ComputerName - Command Sent! $Service_query should be stopped"
			Add-RichTextBox $Service_query_return
			add-richtextbox -Text "$ComputerName - Checking the status of $Service_Query ..."
			Start-Sleep -Milliseconds 1000
			$Service_query_result = Get-WmiObject Win32_Service -Filter "Name='$Service_query'" | Out-String
			Add-RichTextBox $Service_query_result
			add-richtextbox -Text "$ComputerName - Stop Service $Service_query - Done."
		}
		else
		{
			if ($intAnswer -eq 6)
			{
				add-richtextbox -text "$ComputerName - Stopping Service: $Service_query ..."
				$Service_query_return = Get-WmiObject Win32_Service -computername $ComputerName -Filter "Name='$Service_query'"
				$Service_query_return.stopservice()
				add-richtextbox -Text "$ComputerName - Command Sent! $Service_query should be stopped"
				Add-RichTextBox $Service_query_return
				add-richtextbox -Text "$ComputerName - Checking the status of $Service_Query ..."
				Start-Sleep -Milliseconds 1000
				$Service_query_result = Get-WmiObject Win32_Service -computername $ComputerName -Filter "Name='$Service_query'" | Out-String
				Add-RichTextBox $Service_query_result
				add-richtextbox -Text "$ComputerName - Stop Service $Service_query - Done."
			}
		}
	}
	############################################################################################
	$button_shutdown_Click = {
		Start-Process shutdown.exe -ArgumentList /i
	}
	############################################################################################
	$button_systemtype_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - System Type"
		$result = get-systemtype -ComputerName $ComputerName | out-string -Width $richtextbox_output.Width
		Add-RichTextBox -text "$result"
	}
	############################################################################################
	$button_taskmanager_Click = { Call-Taskmanager_psf }
	############################################################################################
	$button_testport_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Network - Test-Port"
		$port = Show-Inputbox -message "Enter a port to test" -title "$ComputerName - Test-Port" -default "80"
		if ($port -ne "")
		{
			$result = Test-TcpPort $ComputerName $port
			Add-RichTextBox $result
		}
	}
	############################################################################################
	$buttonTSHanging_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -Text "Remove hanging tasksequence"
		$Out = Get-WmiObject -computername "$ComputerName" -Namespace root\ccm\SoftMgmtAgent -Class CCM_TSExecutionRequest -Filter "State = 'Completed' And CompletionState = 'Failure'"
		$Out.delete()
		Add-RichTextBox -text "Done."
	}
	############################################################################################
	$button_USBDevice_Click = {
		$button_USBDevice.Enabled = $false
		Get-ComputerTxtBox
		Add-RichTextBoxTitle "$ComputerName - USB Devices"
		$MainForm.Cursor = 'WaitCursor'
		$result = Get-USB -computerName $ComputerName | Select-Object SystemName, Manufacturer, Name | Sort-Object Manufacturer | Format-Table -AutoSize | Out-String -Width $richtextbox_output.Width
		Add-RichTextBox -text $result
		$button_USBDevice.Enabled = $true
		$MainForm.Cursor = 'Default'
	}
	############################################################################################
	$button_Userunlock_Click = {
		$Locked_User = Get-QADUser -Locked | Select-Object -expand samaccountname
		if ($Locked_User -ne $null)
		{
			Show-MsgBox -Prompt "$FollowingLocked `n $Locked_user" -Title "$LockedUser" -Icon Information -BoxType OKOnly
			$Confirmation_User = Show-MsgBox -Prompt "$UnlockUser" -Title "$UnlockUser" -Icon Information -BoxType YesNo
			if ($Confirmation_User -eq "YES")
			{
				$Unlock_User = $Locked_User
				Unlock-QADUser $Unlock_User
				$Locked_User_2 = Get-QADUser -Locked | Select-Object -expand samaccountname
				if ($Locked_User_2 -eq $Locked_User)
				{
					$Locked_Error = Show-MsgBox -Prompt "$ErrorUnlocking $Unlock_User" -Title "$ErrorUnlocking" -Icon Critical -BoxType OKOnly
					Add-RichTextBoxWarn -text "$ErrorUnlocking $Unlock_User"
				}
				else
				{
					Show-MsgBox -Prompt "$Unlock_User $UnlockedOK" -Title "$UnlockedOK" -Icon Information -BoxType OKOnly
				}
			}
			else
			{
				Show-MsgBox -BoxType "OKOnly" -Title "$UnlockUser" -Prompt "$NoUserUnlocked" -Icon "Information"
			}
		}
		else
		{
			Show-MsgBox -Prompt "$NoUsersLocked" -Icon Information -BoxType OKOnly
		}
	}
	############################################################################################
	$button_volumes_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Hard Drive - Physical Disk"
		if ($ComputerName -eq "localhost") { $ComputerName = "." }
		$Disks_Physical = Get-WmiObject Win32_DiskDrive -ComputerName $ComputerName | Select DeviceID, `
																							 Model,`
																							 Manufacturer,`
																							 @{ Name = "SizeGB"; Expression = { $_.Size/1GB } }, `
																							 Caption, `
																							 Partitions, `
																							 SystemName,`
																							 Status,`
																							 InterfaceType,`
																							 MediaType,`
																							 SerialNumber,`
																							 SCSIBus, SCSILogicalUnit, SCSIPort, SCSITargetId | fl | Out-String
		Add-RichTextBox $Disks_Physical
	}
	############################################################################################
	$button_WOL_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "WOL PC $Computername"
		$ComputerMAC = Get-IP -ComputerName $ComputerName | Select-Object -ExpandProperty MACAddress
		Add-RichTextBox -text "Mac-Address - $ComputerMAC"
		$ComputerIP = Get-IP -Computername $ComputerName | Select-Object -ExpandProperty IP4
		Add-RichTextBox "Computer IP - $ComputerIP"
		Send-WOL -mac $ComputerMAC -ip $ComputerIP -port 7
		Add-RichTextBox "WOL sent to $Computername with MAC $ComputerMAC"
	}
	#endregion buttons
	#region Textboxes
	#-------#############################################################################
	#-------#!!!!!!!!!!!!!!!!!!!!!!!!!!!T E X T B O X E S!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	#-------#############################################################################
	$textbox_computername_KeyPress = [System.Windows.Forms.KeyPressEventHandler]{
		If ($_.KeyChar -eq 13)
		{
			$button_Check.PerformClick()
			$richtextbox_output.Focus()
		}
	}
	############################################################################################
	$textbox_computername.CharacterCasing = 'Upper'
	############################################################################################
	$textbox_computername_TextChanged = {
		$toolstrip_OSStatus.Text = ""
		if ($textbox_computername.Text -eq "")
		{
			$textbox_computername.BackColor = [System.Drawing.Color]::FromArgb(255, 128, 128);
			Add-RichTextBoxTitle -text "Please Enter a ComputerName"
		}
		if ($textbox_computername.Text -ne "")
		{
			$textbox_computername.BackColor = [System.Drawing.Color]::FromArgb(255, 203, 26)
		}
	}
	############################################################################################
	$textbox_services_MouseClick = [System.Windows.Forms.MouseEventHandler]{
		$textbox_services.Text = ""
	}
	############################################################################################
	$textbox_username_KeyPress = [System.Windows.Forms.KeyPressEventHandler]{
		Get-ComputerTxtBox
		If ($_.KeyChar -eq 13)
		{
			$button_GetPC.PerformClick()
			$richtextbox_output.Focus()
		}
	}
	############################################################################################
	$textbox_debug_Click = {
		$textbox_debug.Text = ""
	}
	############################################################################################
	$textbox_debug_KeyPress = [System.Windows.Forms.KeyPressEventHandler]{
		If ($_.KeyChar -eq 13)
		{
			$button_debug.performClick()
		}
	}
	############################################################################################
	$textbox_Process_Click = {
		$textbox_Process.Text = ""
	}
	############################################################################################
	$textbox_Process_KeyPress = [System.Windows.Forms.KeyPressEventHandler]{
		If ($_.KeyChar -eq 13)
		{
			$button_process_start.PerformClick()
			$richtextbox_output.Focus()
		}
	}
	############################################################################################
	$textbox_search_Click = {
		$textbox_search.Text = ""
		$global:run = 0
	}
	############################################################################################
	$textbox_search_KeyPress = [System.Windows.Forms.KeyPressEventHandler]{
		If ($_.KeyChar -eq 13)
		{
			$button_search.PerformClick()
		}
	}
	############################################################################################
	#endregion textboxes
	#region Richtextbox
	#-------#############################################################################
	#-------#!!!!!!!!!!!!!!!!!!!!!!!!!R I C H T E X T B O X !!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	#-------#############################################################################
	$richtextbox_output_TextChanged = {
		#Scroll to Bottom when text is changed
		$richtextbox_output.SelectionStart = $richtextbox_output.Text.Length
		$richtextbox_output.ScrollToCaret()
	}
	#endregion richtextbox
	#region Toolstrips
	#-------#############################################################################
	#-------#!!!!!!!!!!!!!!!!!!!!!!!!!!!T O O L S T R I P S!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	#-------#############################################################################
	$toolstrip_user_status_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Profile folder"
		# Getting OS Version
		$OS = get-wmiobject -class win32_operatingsystem -ComputerName $ComputerName | select-object -expand Version
		$Username = (get-wmiobject -class win32_computersystem -ComputerName $ComputerName | select-object -expand username).Split("\")[1]
		Add-RichTextBox -text $Splitversion
		# this needs some polishing!! maybe do some switch-stuff!	
		if ($OS -gt "10.0")
		{
			$Profilepath = "$Profilefolder$username.v5"
		}
		else
		{
			if ($OS -gt "6.3")
			{
				$Profilepath = "$Profilefolder$username.v4"
			}
			else
			{
				if ($OS -gt "6.2")
				{
					$Profilepath = "$Profilefolder$username.v3"
				}
				else
				{
					if ($OS -gt "6.1")
					{
						$Profilepath = "$Profilefolder$username.v2"
					}
					else
					{
						$Profile = "$Profilefolder$username"
					}
				}
			}
		}
		Add-RichTextBox -text $Profilepath
		Explorer $Profilepath
	}
	############################################################################################
	$toolstrip_home_status_Click = {
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Home folder"
		$Username = (get-wmiobject -class win32_computersystem -ComputerName $ComputerName | select-object -expand username).Split("\")[1]
		Add-RichTextBox -text $Splitversion
		$Homepath = "$Homefolder$Username"
		Add-RichTextBox -text $Homepath
		Explorer $Homepath
	}
	############################################################################################
	#endregion toolstrips
	#region MenuItems
	#-------#############################################################################
	#-------#!!!!!!!!!!!!!!!!!!!!!!!!!!!M E N U I T E M S!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	#-------#############################################################################
	
	$aboutToolStripMenuItem_Click = { Call-About_psf }
	############################################################################################
	$quitToolStripMenuItem_Click = { $MainForm.Close() }
	############################################################################################
	$optionsToolStripMenuItem_Click = { Call-Options_psf }
	############################################################################################
	$aDExplorerToolStripMenuItem_Click = {
		Start-Process "$global:Sysinternals\AdExplorer.exe"
	}
	############################################################################################
	$procexpToolStripMenuItem_Click = {
		Start-Process "$global:Sysinternals\procexp.exe"
	}
	############################################################################################
	$procmonToolStripMenuItem_Click = {
		Start-Process "$global:Sysinternals\Procmon.exe"
	}
	############################################################################################
	$nirLauncherToolStripMenuItem1_Click = {
		Start-Process "$global:Nirlauncher\NirLauncher.exe"
	}
	#endregion MenuItems
	############################################################################################
	#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	############################################################################################
	#endregion code
	#------------------------------------------------------------------------------------------#
	#region Mainform
	############################################################################################
	#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! F O R M   C L O S I N G !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	############################################################################################
	$MainForm_FormClosed = [System.Windows.Forms.FormClosedEventHandler]{
		#Writing the config back but only if there already is a config. If there is no config you
		#need to save or klick atleast ok in the options.
		$Exportpath = $Confpath + "/Config.csv"
		if (Test-Path $Exportpath -PathType Leaf)
		{
			New-Object -TypeName PSCustomObject -Property @{
				"global:Language" = $Language
				"global:Profilefolder" = $Profilefolder
				"global:Homefolder" = $Homefolder
				"global:Outfile" = $Outfile
				"global:SiteName" = $SiteName
				"global:SCCMServer" = $SCCMServer
				"global:SCCMNameSpace" = $SCCMNameSpace
				"global:SCCMEnabled" = $SCCMEnabled
				"global:Nirlauncher" = $Nirlauncher
				"global:Sysinternals" = $Sysinternals
				"global:CmRCViewer" = $CmRCViewer
			} | Export-Csv -Path $Exportpath -NoTypeInformation
		}
	}
	############################################################################################
	#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	############################################################################################
	############################################################################################
	#!!!!!!!!!!!!!!!!!!!!!!!!!! F O R M   S I Z E   C H A N G E D !!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	############################################################################################
	$MainForm_SizeChanged = {
		# Change the Richtextbox_output width according to the window size.
		$Newsize = $richtextbox_output.width / 7.1
		$Newsize = [System.Math]::Truncate($Newsize)
		$Newsize = $Newsize - 2
		$global:Fillchar = $Newsize
	}
	############################################################################################
	#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	############################################################################################
	#endregion Mainform
	#------------------------------------------------------------------------------------------#	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$MainForm.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MainForm_richtextbox_output = $richtextbox_output.Text
		$script:MainForm_textbox_Process = $textbox_Process.Text
		$script:MainForm_textbox_services = $textbox_services.Text
		$script:MainForm_combobox1 = $combobox1.Text
		$script:MainForm_combobox1_SelectedItem = $combobox1.SelectedItem
		$script:MainForm_textbox_search = $textbox_search.Text
		$script:MainForm_textbox_debug = $textbox_debug.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$richtextbox_output.remove_TextChanged($richtextbox_output_TextChanged)
			$button_deleteGPO.remove_Click($button_deleteGPO_Click)
			$button_gpresult.remove_Click($button_gpresult_Click)
			$Button_gpupdate.remove_Click($Button_gpupdate_Click)
			$button_export.remove_Click($button_export_Click)
			$button_clear.remove_Click($button_clear_Click)
			$buttonFixWMI.remove_Click($buttonFixWMI_Click)
			$button_shutdown.remove_Click($button_shutdown_Click)
			$button_C.remove_Click($button_C_Click)
			$button_WOL.remove_Click($button_WOL_Click)
			$button_logoff_user.remove_Click($button_logoff_user_Click)
			$button_get_session.remove_Click($button_get_session_Click)
			$button_Userunlock.remove_Click($button_Userunlock_Click)
			$button_ResetPWD.remove_Click($button_ResetPWD_Click)
			$button_DNScheck.remove_Click($button_DNScheck_Click)
			$button_ping4.remove_Click($button_ping_Click)
			$button_ipconfig.remove_Click($button_ipconfig_Click)
			$button_regedit.remove_Click($button_regedit_Click)
			$button_cmd.remove_Click($button_cmd_Click)
			$button_psremote.remove_Click($button_psremote_Click)
			$button_MSRA.remove_Click($button_MSRA_Click)
			$button_Remotecontrol.remove_Click($button_Remotecontrol_Click)
			$button_rdp.remove_Click($button_rdp_Click)
			$button_hotfix.remove_Click($button_hotfix_Click)
			$button_MMCServices.remove_Click($button_MMCServices_Click)
			$button_compmgmt.remove_Click($button_compmgmt_Click)
			$button_localadmins.remove_Click($button_localadmins_Click)
			$button_folderrights.remove_Click($button_folderrights_Click)
			$button_profilerights.remove_Click($button_profilerights_Click)
			$button_homerights.remove_Click($button_homerights_Click)
			$button_PCGroups.remove_Click($button_PCGroups_Click)
			$button_ComputerGroups.remove_Click($button_ComputerGroups_Click)
			$button_autostart.remove_Click($button_autostart_Click)
			$button_installedSoftware.remove_Click($button_installedSoftware_Click)
			$button_printer.remove_Click($button_printer_Click)
			$button_USBDevice.remove_Click($button_USBDevice_Click)
			$button_systemtype.remove_Click($button_systemtype_Click)
			$button_memory.remove_Click($button_memory_Click)
			$button_processor.remove_Click($button_processor_Click)
			$button_mainboard.remove_Click($button_mainboard_Click)
			$button_ipconfig2.remove_Click($button_ipconfig2_Click)
			$button_testport.remove_Click($button_testport_Click)
			$button_hosts.remove_Click($button_hosts_Click)
			$button_routetable.remove_Click($button_routetable_Click)
			$button_checkWLAN.remove_Click($button_checkWLAN_Click)
			$button_process_stop.remove_Click($button_process_stop_Click)
			$button_process_start.remove_Click($button_process_start_Click)
			$textbox_Process.remove_Click($textbox_Process_Click)
			$textbox_Process.remove_KeyPress($textbox_Process_KeyPress)
			$button_cpuram.remove_Click($button_cpuram_Click)
			$button_taskmanager.remove_Click($button_taskmanager_Click)
			$button_process_cmd.remove_Click($button_process_cmd_Click)
			$button_process_grid.remove_Click($button_process_grid_Click)
			$button_process_owner.remove_Click($button_process_owner_Click)
			$button_process_100.remove_Click($button_process_100_Click)
			$button_proclasthour.remove_Click($button_proclasthour_Click)
			$button_process.remove_Click($button_process_Click)
			$button_servicesrunning.remove_Click($button_servicesrunning_Click)
			$button_services.remove_Click($button_services_Click)
			$button_servicesauto.remove_Click($button_servicesauto_Click)
			$button_servicesautostop.remove_Click($button_servicesautostop_Click)
			$button_servicesnonstandard.remove_Click($button_servicesnonstandard_Click)
			$button_servicesstop.remove_Click($button_servicesstop_Click)
			$button_servicesstart.remove_Click($button_servicesstart_Click)
			$button_servicesrestart.remove_Click($button_servicesrestart_Click)
			$button_servicescheck.remove_Click($button_servicescheck_Click)
			$textbox_services.remove_MouseClick($textbox_services_MouseClick)
			$button_diskusage.remove_Click($button_diskusage_Click)
			$button_deleteoffline.remove_Click($button_deleteoffline_Click)
			$button_volumes.remove_Click($button_volumes_Click)
			$button_eventlogmmc.remove_Click($button_eventlogmmc_Click)
			$button_eventlog20.remove_Click($button_eventlog20_Click)
			$button_eventlognames.remove_Click($button_eventlognames_Click)
			$buttonTSHanging.remove_Click($buttonTSHanging_Click)
			$button_getsccmcache.remove_Click($button_getsccmcache_Click)
			$button_getadvertisedsoftware.remove_Click($button_getadvertisedsoftware_Click)
			$button_sccm_start.remove_Click($button_sccm_start_Click)
			$button_search.remove_Click($button_search_Click)
			$textbox_search.remove_Click($textbox_search_Click)
			$textbox_search.remove_KeyPress($textbox_search_KeyPress)
			$button_getvariablesfilter.remove_Click($button_getvariablesfilter_Click)
			$button_listvariables.remove_Click($button_listvariables_Click)
			$textbox_debug.remove_Click($textbox_debug_Click)
			$textbox_debug.remove_KeyPress($textbox_debug_KeyPress)
			$button_debug.remove_Click($button_debug_Click)
			$MainForm.remove_AutoSizeChanged($MainForm_SizeChanged)
			$MainForm.remove_FormClosed($MainForm_FormClosed)
			$MainForm.remove_Load($OnLoadFormEvent)
			$MainForm.remove_SizeChanged($MainForm_SizeChanged)
			$MainForm.remove_Resize($MainForm_SizeChanged)
			$button_Check.remove_Click($button_check_click)
			$aboutToolStripMenuItem.remove_Click($aboutToolStripMenuItem_Click)
			$textbox_username.remove_KeyPress($textbox_username_KeyPress)
			$button_GetPC.remove_Click($button_GetPC_Click)
			$quitToolStripMenuItem.remove_Click($quitToolStripMenuItem_Click)
			$aDExplorerToolStripMenuItem.remove_Click($aDExplorerToolStripMenuItem_Click)
			$procexpToolStripMenuItem.remove_Click($procexpToolStripMenuItem_Click)
			$procmonToolStripMenuItem.remove_Click($procmonToolStripMenuItem_Click)
			$nirLauncherToolStripMenuItem1.remove_Click($nirLauncherToolStripMenuItem1_Click)
			$optionsToolStripMenuItem.remove_Click($optionsToolStripMenuItem_Click)
			$textbox_computername.remove_KeyPress($textbox_computername_KeyPress)
			$textbox_computername.remove_TextChanged($textbox_computername_TextChanged)
			$toolstrip_home_status.remove_Click($toolstrip_home_status_Click)
			$toolstrip_user_status.remove_Click($toolstrip_user_status_Click)
			$MainForm.remove_Load($Form_StateCorrection_Load)
			$MainForm.remove_Closing($Form_StoreValues_Closing)
			$MainForm.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$MainForm.SuspendLayout()
	$tabcontrol_Home.SuspendLayout()
	$tabpage1.SuspendLayout()
	$groupbox15.SuspendLayout()
	$groupbox14.SuspendLayout()
	$groupbox13.SuspendLayout()
	$groupbox12.SuspendLayout()
	$groupbox11.SuspendLayout()
	$groupbox9.SuspendLayout()
	$tabpage2.SuspendLayout()
	$groupbox16.SuspendLayout()
	$groupbox7.SuspendLayout()
	$groupbox6.SuspendLayout()
	$groupbox5.SuspendLayout()
	$groupbox2.SuspendLayout()
	$groupbox1.SuspendLayout()
	$tabpage3.SuspendLayout()
	$groupbox19.SuspendLayout()
	$tabpage4.SuspendLayout()
	$chart1.BeginInit()
	$groupbox21.SuspendLayout()
	$groupbox20.SuspendLayout()
	$tabpage5.SuspendLayout()
	$groupbox8.SuspendLayout()
	$groupbox4.SuspendLayout()
	$tabpage6.SuspendLayout()
	$groupbox22.SuspendLayout()
	$tabpage8.SuspendLayout()
	$groupbox23.SuspendLayout()
	$tabpage10.SuspendLayout()
	$groupbox18.SuspendLayout()
	$groupbox17.SuspendLayout()
	$tabpage11.SuspendLayout()
	$tabpage_debug.SuspendLayout()
	$toolstrip1.SuspendLayout()
	$menustrip1.SuspendLayout()
	#
	# MainForm
	#
	$MainForm.Controls.Add($richtextbox_output)
	$MainForm.Controls.Add($tabcontrol_Home)
	$MainForm.Controls.Add($statusbar1)
	$MainForm.Controls.Add($toolstrip1)
	$MainForm.Controls.Add($menustrip1)
	$MainForm.AutoSize = $True
	$MainForm.BackColor = 'Control'
	$MainForm.ClientSize = '1272, 873'
	#region Binary Data
	$MainForm.Icon = [System.Convert]::FromBase64String('
AAABAAIAICAAAAAAIACoEAAAJgAAACgoAAAAACAAaBoAAM4QAAAoAAAAIAAAAEAAAAABACAAAAAA
AAAgAAAAAAAAAAAAAAAAAAAAAAAAA9T+/wTV//8D1f7/A9T+/wPU/v8E1P7/A9T+/wPU/v8E1P3/
BNT9/wTU/f8E0/z/BdP7/wXT+v8G0vj/B9D2/wfO9v8G0vj/BNT7/wTU/f8D1P7/A9X+/wPV//8E
1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8D1P7/BNX//wPV//8D1v//A9b//wPW
//8D1v//A9f//wPX//8D1///A9j//wPY//8D2f7/BM3r/wqnv/8OkKj/D4yk/wuguP8GxuL/A9r9
/wPX//8D1v//A9b//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wPU/v8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//A9X//wXI6f8WX23/HSsx/xs9RP8a
Qkn/Hisw/xhPWv8Hv9z/A9f//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8E1f//A9T+/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8C3f//EXyO
/x4lKf8PjZ7/EniG/xRwfP8Mobf/HDY9/xdVYf8D2f7/BNX//wTV//8E1f//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8D1P7/BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTV+v8cNDv/FGh3/wTO8/8bMzz/HC4y/wTP7P8QhJP/Hiov/wXN8v8E1v//BNX//wTV
//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wPU/v8E1f//BNX//wTV//8E1f//BNX/
/wTV//8E1f//BNX//wTV//8E1f//BNb6/xs/SP8VZHL/C6K6/xtES/8cOT//DJ+0/xF8i/8dMTf/
BND1/wTW//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//A9T+/wTV//8E
1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8D3P//EIqe/xwzOf8bQEf/Gz1D/xw0
Of8aQEf/HDU7/xRpd/8D2v3/BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX/
/wTV//8D1P7/BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wPd//8TcH//
Gzk+/xdXYP8dLjP/HiQp/xdYYP8bP0P/F1Re/wPV/v8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTV//8E1f//BNX//wPU/v8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8E1f//At7//xVicP8dMTf/FHF+/x4nLP8eISX/FWh0/xpAR/8aPUb/A9f+/wTV//8E1f//BNX/
/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//A9T+/wTV//8E1f//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8D2f//C6jE/x4mK/8bOkD/IB4i/x8eIv8eKS7/Hx8i/w+Kn/8C
3P//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8D1P7/BNX//wTV
//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8FyOf/HDc+/xs8Qf8eJSn/Hx8i
/x0wNv8cMDb/Br/j/wTW//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
BNX//wPU/v8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNb//we83f8d
KS7/HDI4/x4qL/8fISb/HDg+/x4qL/8HvN3/BNb//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8E1f//BNX//wTV//8E1f//A9T+/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX/
/wTV//8D3P//DZau/yAbHv8eKCz/Higs/x0rL/8cNjz/IRga/xF+kP8C3f//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8D1P7/BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTV//8E1f//A9j//wbF4/8bOT//IBod/x4nLf8eJyz/HTE3/x00O/8gGh3/HS4z/wfB
3/8D2P//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wPU/v8E1f//BNX/
/wTV//8E1f//BNX//wTV//8E1f//BNX//wPX//8GxuL/Fllk/yAYHP8gHCD/Higt/x4nLP8cMzn/
HDY7/yAbH/8gGRz/GFNd/wfA3P8D1///BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//A9T+/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8D1f//BNH0/xRqeP8fGh3/Hx8i/x4i
J/8eJyz/Higt/x0tMv8cNz3/Hx8j/x8fI/8gGx3/FWFu/wXO7/8D1f//BNX//wTV//8E1f//BNX/
/wTV//8E1f//BNX//wTV//8D1P7/BNX//wTV//8E1f//BNX//wTV//8D1f//A9X+/wPX+/8Jscf/
HS81/x4oLf8Olab/FHB8/xlMVP8eKC3/Hx8k/xpGTf8UbXr/EIua/x4mK/8eJyz/C6W+/wPW/P8D
1f//A9X//wTV//8E1f//BNX//wTV//8E1f//BNX//wPU/v8E1f//BNX//wTV//8E1f//A9X//wTM
7v8LpMH/DJ61/xRre/8fIyf/F1xm/xNxf/8cO0D/GE9W/x8eI/8fHSH/Gz9F/xw2O/8VYWz/FWdw
/x4mKv8TbX7/DJ63/wqpxf8EzvD/A9X//wTV//8E1f//BNX//wTV//8E1f//A9T+/wTV//8E1f//
BNX//wPV//8E0PX/D4ue/xpDSv8ZRUv/Gzo//x4nK/8bQkj/HTI2/x0wNP8dKi7/Hx4i/x8eIv8e
Jir/HSwx/x0vNf8aRkz/HSou/xs7Qf8aP0b/G0RL/w+Po/8E0PP/A9X//wTV//8E1f//BNX//wTV
//8D1P7/BNX//wTV//8E1f//A9X//wTQ9P8PkKP/G0NJ/xpBSP8bPkX/Hx0h/x8eIv8fHiL/Hx4i
/x8dIf8gHiL/IB4i/x8dIf8fHiL/Hx4i/x8eIv8fHSH/HDM4/xw3PP8dNDn/FHOB/wXL7P8D1f//
BNX//wTV//8E1f//BNX//wPU/v8E1f//BNX//wTV//8E1f//BNX//wPa//8EzvH/CLjS/xtAR/8f
HCD/HyIm/x8fI/8eJCr/Hiov/x4nLP8eJyv/Hiku/x4kKP8fHyP/IB4h/yAbHv8cNz7/CLTR/wbF
5/8D1fv/A9b//wTU//8E1f//BNX//wTV//8E1f//A9T+/wTV//8E1f//BNX//wTV//8E1f//BNX/
/wPa+v8UbX3/IBYY/xlGT/8MobT/DJmt/wiyy/8Iudb/CLTP/wizzf8IttH/Ca3G/w2Wqv8NlKT/
GkNM/yEYGv8Tb3//At39/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8D1P7/BNX//wTV//8E
1f//BNX//wTV//8D2P//B8Di/x8jJ/8eKCz/DJuw/wLZ/P8D2P//A9j//wPX//8D1///A9f//wPX
//8D2P//A9j//wLZ/P8NmK7/Hics/x8mKv8GweL/A9f//wTV//8E1f//BNX//wTV//8E1f//BNX/
/wPU/v8E1f//BNX//wTV//8E1f//BNX//wPa//8KqsP/IBYY/xZYZv8EzO3/A9X//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//A9b//wXJ6f8XUV3/IBMU/w2Uq/8C2///BNX//wTV//8E
1f//BNX//wTV//8E1f//A9T+/wTV//8E1f//BNX//wTV//8E1f//A9r//wqnwP8hFRf/EneL/wTW
/v8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNP7/xNsfv8hEhT/D42j
/wLb//8E1f//BNX//wTV//8E1f//BNX//wTV//8D1P7/BNX//wTV//8E1f//BNX//wTV//8D2P//
B77f/x8hJP8TcIL/A9X7/wPV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wPV//8D
1Pr/FGt8/x8fIf8JuNb/Atj//wTV//8E1f//BNX//wTV//8E1f//BNX//wPU/v8E1f//BNX//wTV
//8E1f//BNX//wTV//8D1/r/FGt6/xs7Q/8It9P/A9b+/wTV//8E1f//BNX//wTV//8E1f//BNX/
/wTV//8E1f//A9b+/wi51f8bO0P/FGV0/wPY+/8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
A9T+/wTV//8E1f//BNX//wTV//8E1f//BNX//wPV//8Fy+n/F1Zg/xdSXf8E0PD/BNX//wTV//8E
1f//BNX//wTV//8E1f//BNX//wTV//8E0PD/GFRf/xlHUf8GyeX/A9b//wTV//8E1f//BNX//wTV
//8E1f//BNX//wTV//8D1P7/BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wPW//8GxOD/GUxU
/w2Wrf8C2///BNX//wTV//8E1f//BNX//wTV//8E1f//Atv//wyZs/8aQ0v/B73Z/wPX//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wPU/v8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wPZ//8MoLX/D5Cl/wLc//8E1f//BNX//wTV//8E1f//BNX//wTV//8C3P//DZKp/w2X
qv8D2v//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//A9T+/wTV//8E1f//BNX/
/wTV//8D1v//A9f//wPX//8D1///A9j//wXM7v8Fy+3/A9f//wPW//8D1///A9f//wPX//8D1///
A9f//wPZ//8Gxuj/Bcfp/wLY//8D1///A9f//wPY//8D2P//A9j//wPV//8E1f//BNX//wTV//8D
1P7/A9T+/wPU/v8D1P7/A9X+/wPV/v8E1f7/BNT9/wTV/f8E1f3/BNX+/wPV/v8D1f7/A9X+/wTV
/v8E1f7/BNX+/wTV/f8E1P3/BNX9/wTV/f8E1f3/BNX9/wTV/v8D1f7/BNX9/wTW/f8D1v7/A9X+
/wPU/v8D1P7/A9T+/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAACgAAABQAAAAAQAgAAAAAAAAMgAAAAAAAAAA
AAAAAAAAAAAAAATV//8E1f//BNX//wTV/v8F1P7/BNT+/wXU/v8F1P7/BNT+/wXU/v8F1P7/BdT9
/wXU/f8F1P3/BdP8/wbT/P8G0vv/B9H5/wjR+P8I0Pf/Cc/3/wjR+P8G0vr/BdP8/wXU/v8F1P7/
BNX+/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTW//8D2P//A9j//wPY//8D2P//A9j//wPZ//8D2f//A9n//wPZ//8D2v//A9r//wPa
//8D2///A97//wLk//8D3P//BdH2/wbO8v8E2P//AuL//wPf//8D2///A9r//wPZ//8D2P//BNf/
/wTW//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//A9n//wXT9f8U
doX/HTQ6/yAhJP8hHSD/Hi4z/xhYZP8IxeL/A93//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX/
/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//A9j//wXQ8/8bR0//IwoK/yAiJv8YVV//
F11o/x4wNf8jCQr/HjI3/wfD4P8D2v//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8E1f//BNX//wTV//8E1f//BNX//wLh//8Rg5X/JAcH/xhVXv8HyuT/FHSC/xZncv8G0u//EYSV
/yMND/8ZUVz/A9v+/wTW//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTW//8E1vv/HDg//x8nK/8F0PL/Bc71/yAcIP8hGBn/B8Hi/wLn//8bRE3/Hycr/wbN
8v8E2P//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX/
/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1///
BdL4/x4sMv8cPkb/A93//wbK7P8fKzD/HyUo/wfD4f8B5///FG5//yAiJP8GzPD/BNj//wTV//8E
1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wPf//8WZXL/Hi0z
/xZmc/8aSlH/Gk5V/x05P/8aS1T/GFZe/xtCSv8cO0T/BNb8/wTW//8E1f//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8D3P//CrfT/x8oK/8eMDX/HTc9/x40
Of8eMDX/HTQ5/xxBRv8hHR//D5ao/wPe//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX/
/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//A+D//xRxgP8dNDj/GkhQ/xZqdP8fJir/IRgc/xVvef8b
QUf/G0NI/xlQWv8E1f7/BNb//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX/
/wTV//8E1f//BNX//wLh//8WZnT/Iw0P/xR1gv8TfYv/IB0h/yEZHP8WZXD/EYiW/yAgI/8cOkP/
BNf+/wTW//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8D3f//DKzH/yIXGf8eLjP/Gz9F/yEYHP8gHSD/Hisw/x8nK/8iDxH/EnyN/wLg//8E1f//BNX/
/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNf//wTW+v8b
QEj/ICAk/xlRWP8hGx7/IB0g/x4vNP8gIib/HTI4/wXO8v8E2P//BNX//wTV//8E1f//BNX//wTV
//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX/
/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8D3v//GVBc/yIUFv8YU1v/
HyIm/yEbHv8cQ0r/ICAj/xtASf8E1v//BNf//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8E1f//BNX//wTV//8E1f//BNX//wTV//8E2P//Bc70/x0yOP8hFhr/G0JJ/x8oLf8gHSH/GkxT
/yEbH/8eMjf/BdD0/wTY//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTV//8E1f//A97//wq00f8gHB//IRsf/x0xNv8fKCz/HyYq/xpJUP8hGh7/IhcZ/w6Y
rv8C4P//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX/
/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
BNb//wPd//8YWGL/IRYZ/yAcIP8eLzX/HyYr/x4uM/8bRk//IRod/yEXGv8bQUn/BNv//wTX//8E
1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wLj//8Pl63/IhUX
/yAeIv8gHCD/HjE2/x8mK/8eMTb/G0VK/yEaHf8gHyP/IRcZ/xCOof8C5P//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wPf//8Norf/IB8h/yEbH/8gHSH/IBwg/x4w
Nf8fJiv/HTI3/xpKUf8hGRz/IB0h/yEbH/8hGx3/D5Oo/wPg//8E1f//BNX//wTV//8E1f//BNX/
/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNX//wPb//8Iwd//ICUo/yEWGf8gHyL/Hiwx/yEXGv8dMzn/Hygt/x8oLf8Z
TFT/IRYZ/x8nLP8gICT/IRkb/yAeIP8KtdD/A9z//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNb/
/wTY//8C4///FW16/yIQEv8fJSn/D5an/w+Uo/8aSFD/GktT/x8lKv8gGx//GktS/xxARv8Plaf/
EYyb/yAhJf8iEhT/GVFc/wPe//8E2P//BNb//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//A9z//wTU/P8Gy+z/B8Xl/x4x
N/8iERP/F2Ft/wymvf8fKi7/Fmhz/xhZYP8hGBz/IRkd/xxBR/8YWmT/Hiov/xCMnP8Vb3r/IhAS
/x00Ov8Gyuz/Bc/y/wTY//8D3P//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//A9z//w2iuf8aS1T/GFpg/xtESv8hGh7/HDtB/xZtdv8d
Njv/ICIl/xpMUf8eKS7/IB0h/yAeIv8fJSn/G0BG/yAiJv8dMjj/FHZ//xtITv8hGh7/G0BH/xhU
XP8ZUlz/DKrE/wPc//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX/
/wTV//8E1f//A9v//wm31v8bSEv/HTc7/xw5P/8ZUFb/ICIn/x8jJ/8eLzT/HjI3/x4xNv8eLjP/
IB0h/yAfI/8gHyP/IB0h/x8pLf8eLzT/HTA1/x4uNP8fJCn/HyIn/xlWXP8dMjj/HjM3/xpPVP8K
tM//A9r//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wPY
//8Hx+f/E3eF/xw+RP8bQEf/GVRc/yAdIf8gHiL/IBwg/yAcIP8gHCD/IB0g/yAeIv8gHyP/IB8j
/yAeIv8gHiH/IBwg/yAcIP8gHCD/IB4i/yAdIP8cP0X/HTc8/x4xNv8aTVX/CrPO/wPa//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNj//wPe//8G
yu7/Bszp/xdjbf8hGBv/IBwg/yIVF/8iFBb/IRYZ/yIUFv8hHSD/IRYY/yIWGP8hHB//IhMV/yEW
GP8iFBf/IhMW/yEcH/8hGBv/GVJb/wbJ6f8Iv+L/BdP6/wPb//8E1P//BNX//wTV//8E1f//BNX/
/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//AuL//w2ivP8iFRf/
IRgb/x02PP8RiJf/FWp2/w2cs/8PkaX/CrHO/w6ZsP8Ol63/C67J/xCFl/8Ol63/FmRx/xRxff8e
MDT/IRod/yEZHP8Nobr/AuP//wTW//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNf//wXQ9P8dOD7/IRcZ/yAeIP8MqsT/Aeb/
/wLh//8C3///AuD//wPc//8C3///At///wPc//8C4f//At///wPg//8B6P//DKfC/yEaHP8hFhn/
HD9G/wTX/P8E1v//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTV//8E1f//BNX//wPc//8Ks9L/IRwf/yITFf8WZXL/AuL//wTV//8E1f//BNX//wTV
//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wPg//8WYm7/IhQW/yEcH/8KsM3/A9z/
/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
BNX//wTV//8D3///DaG4/yIUFv8fJSn/CMDf/wPb//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTV//8E1f//BNX//wTV//8D3f//CbXT/yAeIf8iERL/EIWZ/wLh//8E1f//BNX//wTV
//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//A9//
/w2etf8iEBH/Gz5G/wTW/v8E1v//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNj//wbN9P8dMTf/Ig4P/xJ+kf8C4f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wPc//8KsM7/IhQV/xtC
S/8E2f//BNb//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX/
/wTW//8E1f3/HDtC/yMREv8No7z/At7//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E2P//Bc/y/x4xNv8gJCj/B8fn/wPb//8E
1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8D3P//B8Pk/yAe
If8dMjf/BdL2/wTX//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX/
/wTV//8E1f//BNX//wTV//8E1f//BNX//wPe//8No7r/Iw8P/xlOWP8D2/7/BNf//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1///BNz+/xhXYf8jDQ7/Dpiv/wPe//8E
1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8E1f//BNX//wTV//8E1f//A97//xCOof8jDAz/FWp5/wPe//8E1f//BNX//wTV//8E1f//BNX/
/wTV//8E1f//BNX//wTV//8E1v//A93+/xRxgP8kBQX/E3iI/wPh//8E1v//BNX//wTV//8E1f//
BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTW//8C4f//EI+j/yIVFf8Lrsn/A9z//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8E1f//A9z//wqxz/8iExP/E3uM/wPf//8E1///BNX//wTV//8E1f//BNX//wTV//8E1f//BNX/
/wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
BNb//wLk//8XYGz/En+R/wLh//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wLf//8P
jKH/GFNd/wLk//8E1///BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV
//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8D3f//DKW7
/wq31v8D2v//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8D2///C6zJ/w+Spf8C3///
BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E
1f//BNX//wTV//8E1f//BNf//wPZ//8D2f//A9n//wPZ//8D2f//A9n//wTX//8D2f//A9j//wPY
//8D2f//A9n//wPZ//8D2f//A9n//wPZ//8D2f//A9r//wPZ//8E1v7/A9r//wPZ//8D2f//A9n/
/wPa//8D2v//A9v//wPb//8D1///BNX//wTV//8E1f//BNX//wTV//8E1f//BNX//wTV//8E1f//
BNX//wTV//8E1P7/BdT+/wXT/f8F0/3/BdT9/wXU/v8F1P7/BNT+/wTU/v8E1P7/BNT+/wXU/v8F
1P7/BdT+/wXU/f8F0/3/BdP9/wXU/f8F1P3/BdT9/wXU/f8F1P3/BdT+/wTU/v8E1P7/BdT9/wXU
/f8E1P7/BNX//wTV//8E1f//BNX//wTV//8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AA==')
	#endregion
	$MainForm.MainMenuStrip = $menustrip1
	$MainForm.MinimumSize = '1288, 858'
	$MainForm.Name = 'MainForm'
	$MainForm.StartPosition = 'CenterScreen'
	$MainForm.Text = 'Main Form'
	$MainForm.add_AutoSizeChanged($MainForm_SizeChanged)
	$MainForm.add_FormClosed($MainForm_FormClosed)
	$MainForm.add_Load($OnLoadFormEvent)
	$MainForm.add_SizeChanged($MainForm_SizeChanged)
	$MainForm.add_Resize($MainForm_SizeChanged)
	#
	# richtextbox_output
	#
	$richtextbox_output.BackColor = 'Control'
	$richtextbox_output.BorderStyle = 'FixedSingle'
	$richtextbox_output.DetectUrls = $False
	$richtextbox_output.Dock = 'Fill'
	$richtextbox_output.Font = 'Lucida Console, 9pt'
	$richtextbox_output.HideSelection = $False
	$richtextbox_output.Location = '0, 167'
	$richtextbox_output.Name = 'richtextbox_output'
	$richtextbox_output.ReadOnly = $True
	$richtextbox_output.ScrollBars = 'ForcedVertical'
	$richtextbox_output.Size = '1272, 686'
	$richtextbox_output.TabIndex = 1
	$richtextbox_output.Text = ''
	$richtextbox_output.add_TextChanged($richtextbox_output_TextChanged)
	#
	# tabcontrol_Home
	#
	$tabcontrol_Home.Controls.Add($tabpage1)
	$tabcontrol_Home.Controls.Add($tabpage2)
	$tabcontrol_Home.Controls.Add($tabpage3)
	$tabcontrol_Home.Controls.Add($tabpage4)
	$tabcontrol_Home.Controls.Add($tabpage5)
	$tabcontrol_Home.Controls.Add($tabpage6)
	$tabcontrol_Home.Controls.Add($tabpage8)
	$tabcontrol_Home.Controls.Add($tabpage10)
	$tabcontrol_Home.Controls.Add($tabpage11)
	$tabcontrol_Home.Controls.Add($tabpage_debug)
	$tabcontrol_Home.Dock = 'Top'
	$tabcontrol_Home.HotTrack = $True
	$tabcontrol_Home.ImageList = $imagelist1
	$tabcontrol_Home.ImeMode = 'Off'
	$tabcontrol_Home.Location = '0, 50'
	$tabcontrol_Home.Name = 'tabcontrol_Home'
	$tabcontrol_Home.SelectedIndex = 0
	$tabcontrol_Home.Size = '1272, 117'
	$tabcontrol_Home.TabIndex = 5
	#
	# tabpage1
	#
	$tabpage1.Controls.Add($groupbox15)
	$tabpage1.Controls.Add($groupbox14)
	$tabpage1.Controls.Add($groupbox13)
	$tabpage1.Controls.Add($groupbox12)
	$tabpage1.Controls.Add($groupbox11)
	$tabpage1.Controls.Add($groupbox9)
	$tabpage1.BackColor = 'ControlLightLight'
	$tabpage1.BackgroundImageLayout = 'Stretch'
	$tabpage1.ImageIndex = 0
	$tabpage1.Location = '4, 23'
	$tabpage1.Margin = '0, 0, 0, 0'
	$tabpage1.Name = 'tabpage1'
	$tabpage1.Padding = '3, 3, 3, 3'
	$tabpage1.Size = '1264, 90'
	$tabpage1.TabIndex = 0
	$tabpage1.Text = 'Home'
	#
	# groupbox15
	#
	$groupbox15.Controls.Add($button_deleteGPO)
	$groupbox15.Controls.Add($button_gpresult)
	$groupbox15.Controls.Add($Button_gpupdate)
	$groupbox15.ForeColor = '59, 59, 59'
	$groupbox15.Location = '918, 6'
	$groupbox15.Name = 'groupbox15'
	$groupbox15.Size = '227, 78'
	$groupbox15.TabIndex = 22
	$groupbox15.TabStop = $False
	$groupbox15.Text = 'GPO'
	#
	# button_deleteGPO
	#
	$button_deleteGPO.ForeColor = 'Black'
	#region Binary Data
	$button_deleteGPO.Image = [System.Convert]::FromBase64String('
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
ou7ubJTub2nfg3L6encDAAAAAElFTkSuQmCC')
	#endregion
	$button_deleteGPO.Location = '97, 19'
	$button_deleteGPO.Name = 'button_deleteGPO'
	$button_deleteGPO.Size = '124, 24'
	$button_deleteGPO.TabIndex = 8
	$button_deleteGPO.Text = 'Delete Local GPO'
	$button_deleteGPO.TextImageRelation = 'ImageBeforeText'
	$button_deleteGPO.UseVisualStyleBackColor = $True
	$button_deleteGPO.add_Click($button_deleteGPO_Click)
	#
	# button_gpresult
	#
	$button_gpresult.ForeColor = 'Black'
	#region Binary Data
	$button_gpresult.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAH1SURBVDhPlVPPTxNBGN3ERPTilTTxQvwH
MJw4cCA9edD/Bm1ROLQleijG1cSjIP3BzG53A7SUQCKliXA2UUsDCf0BhouxCVIidHef3zfbVtDW
hJe8ffPNvHn5ZrKjBWLrjTvTedx+muvyFnPS18vz7GO/dhk8eR2wv73VByczvpwCkeWvKDVp/BP4
TGTlmud5ncH+9lYfnYDoSgkv8mU8z5Uxk91FLFtSyjXP8zpjoF9A9QKIr9dQp3HF9VklHlI9u1FD
taVsuDG52jsgTqYlfRTWmyAMPQhTH4etj2Hp9ShW9BG8/MDRgPZk7WoA3zTjO9GK3wd2HgLbj4CP
D/Ap/wrCzEFKC2JxETKdhC3TsAyBjGnCtu1Gt4O3m3VYkUEYsSGI6BBk9C7SRlat9YNJId0O6Lh4
VzxSysd1iKmUoC+wf1BBpVZH7fBIKdcMKeWfgPnNMhLFfbzf2sNcYQ/zxQOkkgm4nodvx8eYmHiM
UCislGsXnh/QOQIjWdhtj3wkEwtwHAc/Gg00z87w6/xcKdeu6/oB//sTBXdAxtNmE6FwGM+mppRy
7VFnKiAQWTvpvIXOG7hJ1EJ5LNONMy5aLTgU5NGYlWuGCiAME0d6cdWSytgPhmFc/Sf+RmphrmCS
SQjxD3lzJpM5aVv74h6xZ3c+teHfVSynIPQd5DgAAAAASUVORK5CYII=')
	#endregion
	$button_gpresult.Location = '6, 19'
	$button_gpresult.Name = 'button_gpresult'
	$button_gpresult.Size = '85, 24'
	$button_gpresult.TabIndex = 0
	$button_gpresult.Text = 'GPResult'
	$button_gpresult.TextImageRelation = 'ImageBeforeText'
	$button_gpresult.UseVisualStyleBackColor = $True
	$button_gpresult.add_Click($button_gpresult_Click)
	#
	# Button_gpupdate
	#
	$Button_gpupdate.Enabled = $False
	$Button_gpupdate.Font = 'Microsoft Sans Serif, 8.25pt'
	$Button_gpupdate.ForeColor = 'Black'
	#region Binary Data
	$Button_gpupdate.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAKwSURBVDhPhZPvS1NhFMdvRUYJ9ao3hRmV
/QHWG0EZ266/VjAqKQJpSGUmiWSGiWRt80flrzDENHVlKLKNINfcnVdrlk4G6iq1UinLcqEkaWRo
vvh2nnvv1HxRXzhcnuec83nOOc9zOQDc/8QXtiPxhgi1SRD5QvcBZVsWA8QViUt8gZsFQGUUpG8s
JSkhnMbsRtvwNKo6x5B02wNaWxWXDCBFplt8c3Z/AK2DU3hCwWqzsAxg8KS6flxzjsJJvjO1XmgK
3FWSM9iCvqwTac2vEFXSjevOEakKyUGKK2pHbNlz8Hd8ON7wEtaBr9CXdILaCZcARDMWOd4gpXkI
2kof6nu/QEunKvlcePQxfUz2g6a44g7o7vYjw/4O5W46xOiyygCTa6Gy6xN0tX4klHZBa3aOrp4B
aRNZWHSWpelQZS/0DYOoevFZrlICUL9mcQJHLcNIKHmGrTsjIqnsBTl3RaHbw3YnlnpwomkExZ5J
0MEyQEuAS45xnGoZg5Ztctz6kNBtB+U0WfHF4gb6rNOY2nDaPo4cgdoMAngCGGzjyHZNwFDjZcPZ
yIKlTEVU0TxVutlQ7UWuGEC6YxK8OQgoEJBie49zjyeQYxui3lzlSt6y2FCTq3t+m1rfIrU1gLOP
PrIKFiWAKrfFffL+a6Q5Aqjtm8GRCnosJqGCBrlXTuc4gsI+Mg+LfxYXhGkkNw4hKvNejQTYxxti
2F1nCFO46plB3cB3XLQP022svAW1sQ353T9g6p5FJgHib3Yw3w4JQAqJufzQepiuMKvjG4w9c6gf
XJCnrEhL/eb7FpHn/YXSvnmcb/TPSQ4FwLRLdaVF1N16ilT7B+T1/PyrgthCN61d0FAlDMyeN1W9
tBrAtGe/LjVZlWfzscGyJGWfif2Fay1yLYBpC1kEWTDoH+K4PxJHyEw1ZC2AAAAAAElFTkSuQmCC')
	#endregion
	$Button_gpupdate.Location = '6, 49'
	$Button_gpupdate.Name = 'Button_gpupdate'
	$Button_gpupdate.Size = '85, 24'
	$Button_gpupdate.TabIndex = 7
	$Button_gpupdate.Text = 'GPUpdate'
	$Button_gpupdate.TextImageRelation = 'ImageBeforeText'
	$Button_gpupdate.UseVisualStyleBackColor = $True
	$Button_gpupdate.add_Click($Button_gpupdate_Click)
	#
	# groupbox14
	#
	$groupbox14.Controls.Add($button_export)
	$groupbox14.Controls.Add($button_clear)
	$groupbox14.ForeColor = '59, 59, 59'
	$groupbox14.Location = '1170, 6'
	$groupbox14.Name = 'groupbox14'
	$groupbox14.Size = '88, 78'
	$groupbox14.TabIndex = 21
	$groupbox14.TabStop = $False
	$groupbox14.Text = 'Log'
	#
	# button_export
	#
	$button_export.ForeColor = 'Black'
	#region Binary Data
	$button_export.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAIGSURBVDhPfZPLTxNhFMUb/xA27lwRVF4G
VBYWWkATVsalS3ThwoAmBJKpZQeEhsSFJsTQloROZ2o1RhqImQSJstAEXBgTRXm0Ux59OTC0lMN3
L0Of1pOcfGfuzP19j5mxAWCHwuGErKoIBIOYK1jmUVYUBFU1bqsQ9RUA9ND/pOs6wX1WL0uUiwCa
mfTz17rwb8vrXHvl9fIYi0YRUBS/1V8OoKWS/mxsYmNzi02ZNOPzIZvLcaaViO0EqgGyTPexLWaJ
xmLsreg21z6vrDDkfCW03ZoAXY8jHt8p2DAOuF4qVX1dG7Czu4/dvX0kEikYmUMcGcfIGvmCSZG3
i7UBiWQSyVQK5kEWI/4hNA40oGnwivBVdsuTJtwcboPTbZ+lvipAOp3B34wBiDOj5oVvE3i/Oob5
1QlE1ibFOA7t+xQcLjs9Xg2gPZuHR5xpxvAXifO09hB3py5wfvNVQqd0i2I1wDRN5LJnr6x5sBH+
T4/gXx7g65daP48zyw8EoHIF1ndwnM/j5ISj2G8zXizdR7+3TjQ9PisKPdfuoUvqpFgE0H9QqWtP
W+HR+qyrojzaHXEGDopFgBIKpekDOf953oXnxWlfx+RSL0YXO+CKtEOKtMG9cAOej7fR43aWA4Tq
hS+XumO4/Uf3MwecLifPSKbc4+5G15D9QyXgX7okXAYt8UUAtlMVDs/zLJvPSgAAAABJRU5ErkJg
gg==')
	#endregion
	$button_export.Location = '6, 49'
	$button_export.Name = 'button_export'
	$button_export.Size = '75, 24'
	$button_export.TabIndex = 1
	$button_export.Text = 'Export'
	$button_export.TextImageRelation = 'ImageBeforeText'
	$button_export.UseVisualStyleBackColor = $True
	$button_export.add_Click($button_export_Click)
	#
	# button_clear
	#
	$button_clear.ForeColor = 'Black'
	#region Binary Data
	$button_clear.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAALPSURBVDhPpZJJTBNAFIbfiRgPHjQmyCI3
E02ACEQ0xsQqi+xLWMq+iCJYpYstUErBtiIFCRjCVqAspSwVEFoqSWMJi0QWsSKLGKJ4McrJswf9
nZZEMQgXX/Jn3hy+781MhgzVXHpal0kTvWXUr46jIdb3V8SSqY5LosJSFjkNqiOpRxlO7fJgsj2M
I1tVgltTohfmVZGmgwUSGQlZDBXh6CoPRXtpcNSyOr64Kd4TE9IgSDne2FdgrOWSQFxCfGERPs+K
sWouQEfZNTRn+eGVKsoB5109lfRPQd+DGBqp4RJPIMXUzBry7oixZS2AbTgXbbIrqIjzQ3Wsj46I
Dv8tqGSC2gzSK6MPPVEnflp/xnPA45Yl5N2VYHMsF0v6TGgKL6EozTO7QXSBmCCRhhlk1cuptyLG
3VCd+tiiFeKtWYwV021smvMd8PDoS+TzC/HekI4FbTIa+OfQZBewY28NPkpZsnRLMWlQY9FYjpVx
IWZ1OXgzIsTKUC5WB9IdcO/ANHiCYmzouGjk+6FZdJ7ouU7688vHOWzMNGLdIoa1lQtrxy2smQsx
r8/CjDYLy305WO3hgieUokM3Ab6kDOz+vg5BjSCozdyQAnN9NAzqRLwelTGYj0lNMqbabsLWl4vJ
Bi6Wu1MxXR0AUZHcAbeKfKnFLmDlUi/gfJ/QSfBhsoxNzUC/IgLzvQVY7E6DUR0NW3c2TIoAlIYc
+2qHxfJKapf4k0Zykb0B+1kcH/cQzT0OukrDMKUvwjujEAudadBJA2HruQ7j/UDIwlzssKcqyplU
kc6kjHQhRZTbjoCVU07oaV59nj9M6nC8aEmAVsKBjT2kUbELjjlJqlgW++roPXYEnbIQu+TIxTPH
w6vSPbfLk85iTnsDY8pAlISe2P4De+zJb4FGdNkucWLxyuG4lihiPH7II1y/2WHlrol7BPvUURYf
Fm/H7qAC8B8B/QJreuGdId4vfwAAAABJRU5ErkJggg==')
	#endregion
	$button_clear.Location = '6, 19'
	$button_clear.Name = 'button_clear'
	$button_clear.Size = '75, 24'
	$button_clear.TabIndex = 0
	$button_clear.Text = 'Clear'
	$button_clear.TextImageRelation = 'ImageBeforeText'
	$button_clear.UseVisualStyleBackColor = $True
	$button_clear.add_Click($button_clear_Click)
	#
	# groupbox13
	#
	$groupbox13.Controls.Add($button_nbbattery)
	$groupbox13.Controls.Add($buttonFixWMI)
	$groupbox13.Controls.Add($button_shutdown)
	$groupbox13.Controls.Add($button_C)
	$groupbox13.Controls.Add($button_WOL)
	$groupbox13.ForeColor = '59, 59, 59'
	$groupbox13.Location = '641, 6'
	$groupbox13.Name = 'groupbox13'
	$groupbox13.Size = '271, 78'
	$groupbox13.TabIndex = 20
	$groupbox13.TabStop = $False
	$groupbox13.Text = 'PC'
	#
	# button_nbbattery
	#
	$button_nbbattery.ForeColor = 'Black'
	#region Binary Data
	$button_nbbattery.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAJMSURBVDhPfZJdS1RRFIb3bYTeddNV/YAo
kCC8iTAQSyEpFUlGJZsKsZFIzGo+zjmTpTN+DDrmMW9MhtLxM0tNo0zNRGQklMkcCxNFC/HCfsDT
GopwgpkFi80++13PXnu9RwH/cn8Ee/tpaW3jsfmE/sEhymy3Dvw9iq2J2UhoWrVuv6evhhbC7O7u
sbW9QzD4gqo7zoihP9QTAnTtEcMTHuYjHkZHZ5n9sEqg8zUPjGamFryMTnoxRLO/JgbgctQws5lN
79IhzBlFm2T7rKySnR8PMjKfieaqEWkcgNNew/dfJqEfpXzb8xPZNVn+abK0YTKxaCO83obLmRBQ
y+JOJYGwIvhV8fSTdCBd+N8qavsUM58r0Zy1Io0DcNk9cruV7lVFbpZG17K0vqBISy2lcVjxfvGa
PMEj0jgAzeFlbusSfeuKgty7DMja/UVx7qwV/xvFWCgH3eUVaVxAHdObpymxuLlSXEFBfhk52Vc5
n3GZ1JMXGZo7Iy7UizQuoIHxteMMbCisJVUUFd8gL89CRno+re8UXZMnBNAg0jgA3eHj5coR+tYU
JYV2igpLyc0pJD2tAP+4omPsKG7NJ9I4AEMAPeFkemSIrsYs8nNucyHzOtbyUzSNKFqGknHriQAu
H8+WxMKIYjA6wBVFIGrltML3StHQq+SvTABwG17qTAuB+SQGZQ7PxcaOkMKcUjT2JFFdb6HancAF
iRTbzYp25/26bcPRhOFoxnA2y7ubEIe2y20V7VFNTE3M5k8cljwmmfJfRr9Fz/bVoH4Doa6IqPMH
NU4AAAAASUVORK5CYII=')
	#endregion
	$button_nbbattery.ImageAlign = 'MiddleRight'
	$button_nbbattery.Location = '177, 19'
	$button_nbbattery.Name = 'button_nbbattery'
	$button_nbbattery.Size = '88, 24'
	$button_nbbattery.TabIndex = 16
	$button_nbbattery.Text = 'NB Battery'
	$button_nbbattery.TextImageRelation = 'ImageBeforeText'
	$button_nbbattery.UseVisualStyleBackColor = $True
	#
	# buttonFixWMI
	#
	$buttonFixWMI.Font = 'Microsoft Sans Serif, 8.25pt'
	$buttonFixWMI.ForeColor = 'Black'
	#region Binary Data
	$buttonFixWMI.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAH4SURBVDhPhZLPS9NxHMbXrUOCW9HBAimp
S4cIE4qCoFOX/oRO1n1hP1Zmm7NWk5Figykux9qvpsMIrDa3oV1cm9PmNjLdLDdwkItNipjs8uoz
xYVO/T7wnN7P84L3+/ORAbL9ZLU7my02x4rbM8r7Dz4c7hFeO1xxm/NN00Z3P4DZYr02LIoLi4sU
C2us5n+xvJwlEJhgyGoTVQmA0TRQTiSSpFJLvH03ht3ppn/wFf3mIUyDZmmAobePTDaL1+dnfDxA
T5+xEm7esiRApzewnMkQ+hwhHImiN7zYFpYEdGi6/nxbSBGNzhKeniESnuaJTo/26TN0z7tFVQJw
r72rEIslmAqFmYsnyYsjFotF0uk0jx5r1vYE5LV1wxPqi/z4+ZdQJIbd5UbZdpdusUJ7hxrl7bao
iJ3dFZDrlLvWvedh7gYFbyujvimUdx6siFH1eMKnhWtvkNPIXaWPV+DLTXCKf2I5yqS6hXq5olKq
0TZArlPhKgUvw2wr+FsE4BTl3iN8f3jQL8YHNkI7VAXktIc9v0fESjOi/OkSeM6wbmwgrqr3idzJ
zXitqoD8y0aI3YLwVRg7R9l0jHlVXaV8YjO6u/4DjALw9ToEL1AaaGT+/iHJckVVQFKlmMz3HGfV
0EBCJQ+KmWS5oipAqEl464n23HmnANk/QeJ+bQT7sMEAAAAASUVORK5CYII=')
	#endregion
	$buttonFixWMI.Location = '91, 49'
	$buttonFixWMI.Name = 'buttonFixWMI'
	$buttonFixWMI.Size = '80, 24'
	$buttonFixWMI.TabIndex = 15
	$buttonFixWMI.Text = 'Fix WMI'
	$buttonFixWMI.TextImageRelation = 'ImageBeforeText'
	$buttonFixWMI.UseVisualStyleBackColor = $True
	$buttonFixWMI.add_Click($buttonFixWMI_Click)
	#
	# button_shutdown
	#
	$button_shutdown.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_shutdown.ForeColor = 'Black'
	#region Binary Data
	$button_shutdown.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAFKSURBVDhPnZHPSgJxFEZ9lFa9QI9URAUV
SFRQDQljuHFRhEFJLbRWIeJrjDqZf1MzU7MyK0sHS8SvuUKX39VF5MBZXL4zZ0AdXq/XtMEEmAAc
FMBgMPg39B4H+v0+gucXKN9X/oQ88kXgu9dD6a7M7B8cYnZunqFb3ckXgW73C8XbErOwuIS4mWDo
VnfyRcCyLOQLRWZ5ZRXpTJahW93JF4HPdhu5mzzjdK7BMAyGbnUnXwRarQ9ksjlmfWMT18kUQ7e6
ky8Cr2/vSKWzzNb2DqrVGkO3upMvAi/Npv2lNLPrcqHTsRi61Z18EXhuNHCVSDJu9x4uQ2GGbnUn
XwTqj0/ib/P5jnDsP2MCgaDYyReB2kMdJ/5TRGPmkFA4MsbvRh75IlCxfyiVWNwcY9ThgKZpETpU
PB7PGKOOruvRYcB+pmxmJmAagOMHFX4HMETwr9UAAAAASUVORK5CYII=')
	#endregion
	$button_shutdown.Location = '6, 19'
	$button_shutdown.Name = 'button_shutdown'
	$button_shutdown.Size = '80, 24'
	$button_shutdown.TabIndex = 8
	$button_shutdown.Text = 'Boot?'
	$button_shutdown.TextImageRelation = 'ImageBeforeText'
	$button_shutdown.UseVisualStyleBackColor = $True
	$button_shutdown.add_Click($button_shutdown_Click)
	#
	# button_C
	#
	$button_C.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_C.ForeColor = 'Black'
	#region Binary Data
	$button_C.Image = [System.Convert]::FromBase64String('
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
AABJRU5ErkJggg==')
	#endregion
	$button_C.Location = '91, 19'
	$button_C.Name = 'button_C'
	$button_C.Size = '80, 24'
	$button_C.TabIndex = 6
	$button_C.Text = "C$"
	$button_C.TextImageRelation = 'ImageBeforeText'
	$button_C.UseVisualStyleBackColor = $True
	$button_C.add_Click($button_C_Click)
	#
	# button_WOL
	#
	$button_WOL.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_WOL.ForeColor = 'Black'
	#region Binary Data
	$button_WOL.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAL4SURBVDhPjZJrTJNnGIa/X/7XzBij2Yw4
yaI7KGyIViillkOsHFWomVJRDi2ieOiqhdAWD9E0slltQaOT4IE5SYiJifLDGFTURBI0UWEYEDmJ
gIdoWTm0194X+WHYknkn15t8z3PfT773zaPsr6ytc3prcXyC3VNL6X9g91zGMYnMyKxiP/Enr0b9
DAYDvAGGBC/HofPvIO2+wAQdwwG6/AH6RsfpHxvj5Yifbp8P+4lLKCXuP+j1jzJNUZj9xUxC5oWQ
rgmjuzKWZ+6YCTq9Gp66taSlrMeQYSAjLZ1nb95TcqwGpdhdQ8eHEWZNn8H3337HTz+qKMuJY/Ca
kfFBNyPPy+k8pcNWaGTLVjOmPDNbNmXxeOAdtmMXUWy/XeDp0DDz585leUQkUTHxXLAl8v5+Km8f
pNLi0XLWYWBjnoXCHRZ27dxNfk4uTd1D2H49j7JPHE09b/lmwQKio2LQxqdwx6UTD1HAQMMGHh2N
ps2jpv/3KCz7nBQXl1JUuJ3G9gH2ygHW8mpui48fFi9Cp4tDn2yg77SKrpoEhlu3weti/A+zOW+N
ISJSTfjScL7+ah432/qxHq0WA8RR/6SXiCVL0CfqSUs3kGtYzaF8HX1X1+Jvzqf6FzVqbRKa2DhW
LlexODSU6497Pg6wuM5S19TJsrBwYjVa1OpY1KuSqNqjwnc/m3PWaOL1mSQkJrNKG4cqcgWLFoZO
ZCyuKpTdR85Q3dDCmoQEklbrWZeewboMI80HvuSKU4sxpwjj5jw2/ZxF5vpMUpNTiNdoOHerBZlV
dh0+TcW1ZrFEQV4LhoJBXgWgdwx6RhGLE2BgPCAW7WNPeqRXZmRWMZWU39xx8BTb9ldSUFZBgbMC
syDf7iWv1IPJ7sHs8E7UZE96pFdmZFYRChGEfUqmyeayHL/sq6q/R6rFg9VT6zOYba6pPoHM/lvb
D57kRnMrja0vuPtXFw2P2pC1yfb/a2ORs8rs9GJyiCsIzGVeZG2y/VmaI5j6u7I2RYryD8V+McUJ
9WYhAAAAAElFTkSuQmCC')
	#endregion
	$button_WOL.Location = '6, 49'
	$button_WOL.Name = 'button_WOL'
	$button_WOL.Size = '80, 24'
	$button_WOL.TabIndex = 14
	$button_WOL.Text = 'WOL'
	$button_WOL.TextImageRelation = 'ImageBeforeText'
	$button_WOL.UseVisualStyleBackColor = $True
	$button_WOL.add_Click($button_WOL_Click)
	#
	# groupbox12
	#
	$groupbox12.Controls.Add($button_logoff_user)
	$groupbox12.Controls.Add($button_get_session)
	$groupbox12.Controls.Add($button_Userunlock)
	$groupbox12.Controls.Add($button_ResetPWD)
	$groupbox12.ForeColor = '59, 59, 59'
	$groupbox12.Location = '430, 6'
	$groupbox12.Name = 'groupbox12'
	$groupbox12.Size = '205, 78'
	$groupbox12.TabIndex = 19
	$groupbox12.TabStop = $False
	$groupbox12.Text = 'User'
	#
	# button_logoff_user
	#
	$button_logoff_user.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_logoff_user.ForeColor = 'Black'
	#region Binary Data
	$button_logoff_user.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAJkSURBVDhPjZFfSFNxGIZHVJSVMS8qC41N
LCM1mREaLiWjoigwLbTSOcsU0zRyKaIMujAREiFLU2EUtTnbnH8qSrOSlCSJirTypskoEstKCzVH
ezqba5oL8oGX3znn/b6HczgiQPSHM1Fiv9wd4sHS+NWci/EmJ9JrULVd7Oes3XDszhSckot79Xn+
tJZEoC+IQLVHStoWca+zdsNNoNrphakohPtl+zGoY8jbG4RSJp4emIWbIDvSk3KllOaSOPpaCnlQ
k0ZSsOfcBambF8K4iYn+y3zsLmagQ82RgAVzFyQFirRYqhl8UszbO3m8aMhCETyv0lm74SbYECAJ
6DQW8q41n+c3M6grT7GX3lOtO38Jdl0c0B2r/0bb43buXkmmqiCa0ooK0prGia4d1jqGZuESRJa8
HNJ0fuL1Z/ja30LX1USuq+U0atT0WUGTnsNt/yWYNq7EuMmHRpnE8VkuQcKlVzwz/6Do4RjmEbDZ
4PvYOF0fJqjKLKAnaj2cz4QyFZSepntfmEPiEuwufkp9zzAnjUNkm4awTY4xMvqF9FYrTT7zIT8e
8uKx5cY5TgoVGIN9hFWnIPTsIy7cGyRRYyah1szBajNxtRZitCPckgi/tq3OPjxNuwFD0Br71ZRg
haKJw5VvyNJZyNQKuWEhQ/eelIZR2tZ5wPFIrEo5P5O2Os5fJ6IxhvhOC5bKc7OXxeqsHgd02LNY
yKJYPaJDzaRGHaU7QopVEYZNGc5kcjgd2wKoCfY1uAQCy4XIhIT+K9cCV+kbZBKMMinGUKmwvNYg
PLe/gkvwP3yFzJTa74VdRL8BYsK9r5BPFgMAAAAASUVORK5CYII=')
	#endregion
	$button_logoff_user.Location = '108, 49'
	$button_logoff_user.Name = 'button_logoff_user'
	$button_logoff_user.Size = '90, 24'
	$button_logoff_user.TabIndex = 13
	$button_logoff_user.Text = 'Logoff User'
	$button_logoff_user.TextImageRelation = 'ImageBeforeText'
	$button_logoff_user.UseVisualStyleBackColor = $True
	$button_logoff_user.add_Click($button_logoff_user_Click)
	#
	# button_get_session
	#
	$button_get_session.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_get_session.ForeColor = 'Black'
	#region Binary Data
	$button_get_session.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAH9SURBVDhPlYxbSJNxGIdHUFCU8nlR2FUp
wYSSUOlqsk50hMAOkMk0i1DKtSjXYjgGXdgwKilrZcIKyqm1LRPCtIOVkhhiBysNassuGtvCWWpS
sKfvw0/Z/2JlLzzw/vgdNMA0U3dstZRevl4KVu1ezMm8VI7oU4LmtVK6aosdQah3OFfqb7Qso82h
o9Gqw7wljZJVUr9qix1BqGfekILPtpIHZ7dx256HZesKirOk6YDQEYR6Jn0S1cVp3HXs5G1LBY+u
llCYmTTzgQM5c+Cnj4kPl/jafYrAEzsF2tkzHyhcrqlnqJbg80oG7ll46TVSlDnLqdpiRxDqZWiX
ajs9FXxqO0HfrYM0VO9TzNRJ9x8DGy8E3PuborQ/e0jrlb1ctq7jdM15Sr3f2VwTaPjrgN7xKuTq
DPMuAsODLXRdN3DDrqO5zspgFK51hVlT9ToU3xEG8i++odc/iu3xOP4RiMXgx+gY3R8j2J9O0Pd5
jBxbjxxNMLCpsoemF9845Alh8oWI/RpnJBrBdCdEmTeMp3eYjKMdcjTBQPbxDs7cD2Jw+cmv87Or
dhLlN7gCnGsLsqS0VY4mGFhY1Mwe53uM7iHK6mVuqsi/0f2FAucAi+RMfEcYmJ9bblqww/173nY3
CnNVprTiKZn4jjAgX7JMlkx2AhQvWejEi/8HzR9B2Vmp/hZrHwAAAABJRU5ErkJggg==')
	#endregion
	$button_get_session.Location = '108, 19'
	$button_get_session.Name = 'button_get_session'
	$button_get_session.Size = '90, 24'
	$button_get_session.TabIndex = 11
	$button_get_session.Text = 'Get Session'
	$button_get_session.TextImageRelation = 'ImageBeforeText'
	$button_get_session.UseVisualStyleBackColor = $True
	$button_get_session.add_Click($button_get_session_Click)
	#
	# button_Userunlock
	#
	$button_Userunlock.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_Userunlock.ForeColor = 'Black'
	#region Binary Data
	$button_Userunlock.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAMQSURBVDhPhZF5SNNhGMcfiAQlj82s1DzW
DteymVseMUWbZqJdloIWpYaRZHnklVJIBRVFEZQdYyRdDkuzkii1k/xDOojADsv22+HspykpGhkd
395tESlCL3x4X3je5/M8z/tSuVbooDReIC5LFPCHM/2wL80XxXFCvlwrEFcksDijWCugPK0nDSYo
yJYgJ0t8CJljpEQ7l3o7KIwVdDVUStF2KAYN1RqUJ4uwNVLQlR8tpDxGVpQXjSwLpY8J88n6r6A6
1YeqUnyoPEmI5j2LcPfYKjTWpKEidSFywgXIiZhJGRHeNJoUSnyignpZ8gRBZRJrkVEU54HjufNw
82A6XrXsxn3dVmQp3ZGxWEijyxTEM3oTndUnCEo106goxo22LHYBvjZjvPsU+joPwPioBmvkLhhj
M/ezth3JUwlSLoxT9RKiTaFUD4sOPEt+c3sXnl4vwUa1e+2gVl7KHg0s2YnjLN//V7DyjJVS9MM0
Xy6SdzTthrGtCs+uFeLc2RJYYiVmW5wM7PJU8E7Byfe0/ITJkHdlGO2P7+GOLhcn965A/eoI9EWJ
YNWIYdSI+4lIbadNFVRrjpXBQYx0P8UfejlQ1zGA14PA5+4WdFzMRt3hFHBKX1hVc2FeqYFN7Q9L
pOg8pxYxB/m2hgXWmpZIYIqWgDJru/CcG8OeB1/AjQA/ATAXrBIv2BTeuGv+Bd3qzfio8ocpIriB
C3NKTJFi2KHkA89w5ekQCpp4FDUP4OePb+CZpTfIFX1SD1x6Mgz3vRxehAiumsODwIWLLjOIU4lg
h9QVD3G0lcfGOg5Zeg7r9GakXh6GRTYTvNgLLVVHQFXvwKoGdir8bxmVwTAqg/qcezBoVvYNrD/9
BjsMFmyvt2CbwYq8xiHU59fgk9gDA2yUghWVsMl87K0HdysCBj8sCISdVomvnmbElhW5Zxi+u601
wI4rY3p6I2hDO+6HhqFXMhsW6RxwMn/0hAT85a107hAT+tmtngwVw/FNk3kQ4K0ziv3QI2GCP7QG
zNazmJJ1wbb/L3uVyWJHZSKi3/SRxkDQBynyAAAAAElFTkSuQmCC')
	#endregion
	$button_Userunlock.Location = '6, 19'
	$button_Userunlock.Name = 'button_Userunlock'
	$button_Userunlock.Size = '96, 24'
	$button_Userunlock.TabIndex = 9
	$button_Userunlock.Text = 'User Unlock'
	$button_Userunlock.TextImageRelation = 'ImageBeforeText'
	$button_Userunlock.UseVisualStyleBackColor = $True
	$button_Userunlock.add_Click($button_Userunlock_Click)
	#
	# button_ResetPWD
	#
	$button_ResetPWD.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_ResetPWD.ForeColor = 'Black'
	#region Binary Data
	$button_ResetPWD.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAJySURBVDhPfZPLT1NBFIfnDzC6NpGF7Fwo
AoVIQZ4RE6Tgghg2xoQoxmBosNBCQOhLfMRogtFaIIIbook7BGkpIPKwUSivNKUoBAlCd7qRgJR8
zr2Uxgf1JL/MnXvP7ztn5s6I/0W/LdPqNmfiNmfhtmTRb81iwJ5tjXwWQORpn3A3Zaz5nAVs+K7C
p0pY1LM1d42ZZ0V4bNnrSk5MgDRbfc5z0ljFzrye795yJuV8qlXHD58CKcYjO4kJ6Ks/xeacnnDQ
wM6CgQlHgZKZrGiqTcd2wKAuJybAY9bK6tWE502wUMekoxD3TW2cqyE9ztdaBMsm3E2nYwPcTeng
18vqDfC5ifBUHYH2C/jbSticNkKwir7GjNiAN7Wp8PEyLNlltbsctwpudAnsL4/B1wdsv70o/8x/
AIO1abKDGnhXJjuwkyIBs1+MKsTWfoTAwzN0Vmic+wKG6tOWK24dILlZkCyNKRZBqlngX7UwHCyl
+pWg3HZwR6Ye/gfQV6tZWWwrJOWOYOnbE2ZDOmbXi5lZ0xEIPcIxIhhdvkR9tyD7vnjxB6DXlLQy
/TgPfFfQ2AWToUqcXhGV473gqRxbPwgm1srIv6ecowigx5i4MtGSyc/xEhgrRSPbHwzl0BkQqjr8
gvbpXXXMCSwuQV6jGFABvcbEkK8lnY1hecqGCuXGnee65RC5skK+XEr+bUGuTfA8KGHzArNHkNMg
XLJuvAroqUkg7C1mc0TH1mgR3mYtYzVapTf15Ck6K0Fdq9I8GDUfldq9C73GBF4bTtBtUMaTuExJ
e+ZoFMhu7OOqeUBOVbMSe3sQrfSb/o699/HqLBKA+AVNXLmpaNymFAAAAABJRU5ErkJggg==')
	#endregion
	$button_ResetPWD.Location = '6, 49'
	$button_ResetPWD.Name = 'button_ResetPWD'
	$button_ResetPWD.Size = '96, 24'
	$button_ResetPWD.TabIndex = 10
	$button_ResetPWD.Text = 'Reset PWD'
	$button_ResetPWD.TextImageRelation = 'ImageBeforeText'
	$button_ResetPWD.UseVisualStyleBackColor = $True
	$button_ResetPWD.add_Click($button_ResetPWD_Click)
	#
	# groupbox11
	#
	$groupbox11.Controls.Add($button_DNScheck)
	$groupbox11.Controls.Add($button_ping4)
	$groupbox11.Controls.Add($button_ipconfig)
	$groupbox11.ForeColor = '59, 59, 59'
	$groupbox11.Location = '257, 6'
	$groupbox11.Name = 'groupbox11'
	$groupbox11.Size = '167, 78'
	$groupbox11.TabIndex = 18
	$groupbox11.TabStop = $False
	$groupbox11.Text = 'Network'
	#
	# button_DNScheck
	#
	$button_DNScheck.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_DNScheck.ForeColor = 'Black'
	#region Binary Data
	$button_DNScheck.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAHgSURBVDhPpZPfS1NhGMef/6NuxJuuAvUy
dpXocMqqQf9AXoT4a+w9P3aGR9Oi0uZG0/mLTY9uzhWVF91EXXQTBMEsjC4KzQ5C2TIXZuFFfHuf
I8Zmmwq+8Dnvw/P5PrzwvhwCcCJoYOLB4rX4ffSN3kPfSPYf3JPOYir7h4tkxjL4+nsb+Z0CNn9t
yX0LGz8LsH8U0HM341DJm7EFkBFNYe1bHqf1NzgXW4HPsnElbWPZXocRSSEoqeijaZAetrC0soaz
kY+oz27ClfmOmvg6Xrz9AHbaIT44PAtSh6bx5NU7nBnfQFV2F1WP/uBUPI/HL5fBThlMVvSa9CTk
x3qWw9KqjdfyJIbr5NMc2B3lqc2MPvffnELXjYkiJuG/lUCrPphuDQ6l/bcTTs9x1/cyPMOzJFe1
pK4cmqqi2d0oH7u8l1STEp4jUUKK/OF56g7oJPQeNHm8aHR7KBBZcFxxlmdJUdQShNCoM2BQYe48
XQ30w9Xgw/Z8A3WJEAlF+y9PimaUILQQtQuTPk+7rU+JZtjJFnyZcVvtotdxB/Okh0wG+2hGLzrU
fqyOuYCdAQeuuceuOCshunjhEoN9vF4f6j2X8T5Wi9ydOgeuuceuOCuR97i3yt3wcaCyv+jxAf0F
JH9G0480278AAAAASUVORK5CYII=')
	#endregion
	$button_DNScheck.Location = '6, 19'
	$button_DNScheck.Name = 'button_DNScheck'
	$button_DNScheck.Size = '73, 24'
	$button_DNScheck.TabIndex = 13
	$button_DNScheck.Text = 'DNS'
	$button_DNScheck.TextImageRelation = 'ImageBeforeText'
	$button_DNScheck.UseVisualStyleBackColor = $True
	$button_DNScheck.add_Click($button_DNScheck_Click)
	#
	# button_ping4
	#
	$button_ping4.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_ping4.ForeColor = 'Black'
	#region Binary Data
	$button_ping4.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAKnSURBVDhPpZDZS1RhGMbnD+giRCpFpQUz
dVJspf2iRUMyLWdcRnNGW8gxW8YiaSqERp0ZNVdKCCWCLsKiCKOcxmaOOkbZvlmUVmqlo11EUFDw
6/uOodfWgeech/O9z+99v1dTUVHhstvtlJeXT0kyI7Maab4MjzDiH1XlH/uKf3Rs3P/9Do/4J86l
l/VSMquRtE+fhwkLCcNkzCNyQRQxC2MxmwtZuWIVa9eso6joKBs3bCJ+YwLFxVbVDw59USdRJxj8
9JmI8AgK8vexNG4Rq5ct57DlCIkJiSRtTaakxMb2VB36VD02WzlbErfycWBwfAL5ev9hgOjIaMx7
8mka8HNhcIzObz/R6zPQiVBZmQNDpoEsQ7YIVZCSvI2+/g+TgLfv+omJ0lJz8RInPT6mJSSwuvUm
pVeuY0jPxOE8jdGYizHHJBZXhU6Xxpu3fZOAV71viI3W0vUb5omOQYYsIkRX++g3cjOzqHRWUXDQ
wvHaMziqa9UdvBSZCcCTZy/YrEunpX+IAHHX0LydRIvCFa23aO68z/nLVyn5/ov9ni66fsGS2Die
Pn85Cei5/xBLYzNF11qZmZWtArRV1QQbTay/0UbK815m5OYxPTmFUx3d7Cop5UHP43GAw2HH5+vG
6ekmqfEcQWLkkFwTMbUNzDYXELbXjFZMEyoA8iy+8jSVHffo9t1FZgXAgeJRaPkB2mNWgsWm5QQx
dQ3MOXCIuRYLsfVnCd21m+DsHURYT9DUN4Ti7RAAxzjA7fZQ9+gVQcXHCNCnEbgjh3DRdVZBIUGF
B5hfU0eguE5ARgbBViv1j1+rGRXgdDpxue7ganPjue1BuaOgtHvxigLF7VWlevFPaVfUGtctt8i0
I7Mam83WK42kTUUyI7Ma8UQKLf5HRWqA/xCaPwjpfGnrltfSAAAAAElFTkSuQmCC')
	#endregion
	$button_ping4.Location = '6, 49'
	$button_ping4.Name = 'button_ping4'
	$button_ping4.Size = '73, 24'
	$button_ping4.TabIndex = 2
	$button_ping4.Text = 'Ping v4'
	$button_ping4.TextImageRelation = 'ImageBeforeText'
	$button_ping4.UseVisualStyleBackColor = $True
	$button_ping4.add_Click($button_ping_Click)
	#
	# button_ipconfig
	#
	$button_ipconfig.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_ipconfig.ForeColor = 'Black'
	#region Binary Data
	$button_ipconfig.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAJOSURBVDhPpZPtS1NxFMd/f0t/gKWbejeb
NYU0t3oRkS56ICRF1N3RNjY377zb0J5sz1ttFulk5cOooCiqTSwRIsI5C12RWm98Y9CboqAX385v
OjDYC6sffDgPv8v3nMPvXAbgvyib/BuYWx7AkFuCYI4xjSXM6nfJAeKgNcL4UXhdTlQaQ6g2+gnf
NtzfGf+ZE0Q/NObQAzaSSDDJYUc2/xkzi6uYya0im1tHdvHTFtzfkctwcmt4ubQOwRQAi8fjcNpt
mJz/gLZLabRdTmM6lcRFr6fIFPnHKc8tj4eIifFRpOcLqKEuSOAG+vtsuD37HlpBgXORZwj7fWjQ
NhYJ+67hTPh50fJYq21AYPgqki8KqC0JSCQQzRTQkZhF5805SNTREZ2+CPfP35pHP1ldix4tRJ/V
ikS2QCOQQIJGcDlsGH5SQKNQhZ6xV2g/ZcCxo/oi7acN6E6+xtmTBjQf1uNQkx6tJ1rhe7yyJcBf
YcBph+dhAaY7CxBTb2BMLcA0+RbiNsa7eXSN54BfGeAn8eMp3PffQcUFXC6JeSQHpEcf0VSnhGV6
Gb0TK6irEdA9tQaNaj/qVWoSXEFPagmdY0voGMvDeW8Zav4KsjzABmUJ1ReiUJsjUNA+4HsMG6PN
wLcRbCR1VHUEVb0h1NIOVHb76T4IRW8AtV2DGdpEmQ26XXwWBUdlCn5RilFUitexT4yhiqzSFKNq
wU1+T1U3BVOYx18p3kMdyMxL63zFI7E6S4xyrIJ/WIaK7dUt3e8trTI/PPFvp9wftnvAfgPh9Dv/
DN/PlAAAAABJRU5ErkJggg==')
	#endregion
	$button_ipconfig.Location = '85, 19'
	$button_ipconfig.Name = 'button_ipconfig'
	$button_ipconfig.Size = '73, 24'
	$button_ipconfig.TabIndex = 5
	$button_ipconfig.Text = 'IPConfig'
	$button_ipconfig.TextImageRelation = 'ImageBeforeText'
	$button_ipconfig.UseVisualStyleBackColor = $True
	$button_ipconfig.add_Click($button_ipconfig_Click)
	#
	# groupbox9
	#
	$groupbox9.Controls.Add($button_regedit)
	$groupbox9.Controls.Add($button_cmd)
	$groupbox9.Controls.Add($button_psremote)
	$groupbox9.Controls.Add($button_MSRA)
	$groupbox9.Controls.Add($button_Remotecontrol)
	$groupbox9.Controls.Add($button_rdp)
	$groupbox9.ForeColor = '59, 59, 59'
	$groupbox9.Location = '8, 6'
	$groupbox9.Name = 'groupbox9'
	$groupbox9.Size = '243, 78'
	$groupbox9.TabIndex = 16
	$groupbox9.TabStop = $False
	$groupbox9.Text = 'Remote Tools'
	#
	# button_regedit
	#
	$button_regedit.BackgroundImageLayout = 'None'
	$button_regedit.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_regedit.ForeColor = 'Black'
	#region Binary Data
	$button_regedit.Image = [System.Convert]::FromBase64String('
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')
	#endregion
	$button_regedit.Location = '163, 48'
	$button_regedit.Name = 'button_regedit'
	$button_regedit.Size = '74, 24'
	$button_regedit.TabIndex = 16
	$button_regedit.Text = 'Regedit'
	$button_regedit.TextImageRelation = 'ImageBeforeText'
	$button_regedit.UseVisualStyleBackColor = $True
	$button_regedit.add_Click($button_regedit_Click)
	#
	# button_cmd
	#
	$button_cmd.BackgroundImageLayout = 'None'
	$button_cmd.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_cmd.ForeColor = 'Black'
	#region Binary Data
	$button_cmd.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAAAlwSFlz
AAAOvAAADrwBlbxySQAAAGpJREFUOE9jGHjQP2n6f0ow2IDLNx8QxBmVEzFouAGnzpwlC8MNAPqE
LEx9A2AAWRFMHF0MhFEMQFYEY6PT6BinAegYBtDFiXYBOhuGUQwAYRhAVoQsB6NBAMTGMIBUTD0D
KMFAgygBDAwAnWumm5ZCmokAAAAASUVORK5CYII=')
	#endregion
	$button_cmd.Location = '163, 18'
	$button_cmd.Name = 'button_cmd'
	$button_cmd.Size = '74, 24'
	$button_cmd.TabIndex = 4
	$button_cmd.Text = 'CMD'
	$button_cmd.TextImageRelation = 'ImageBeforeText'
	$button_cmd.UseVisualStyleBackColor = $True
	$button_cmd.add_Click($button_cmd_Click)
	#
	# button_psremote
	#
	$button_psremote.BackColor = 'Transparent'
	$button_psremote.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_psremote.ForeColor = 'Black'
	#region Binary Data
	$button_psremote.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAAAlwSFlz
AAAOvAAADrwBlbxySQAAAjVJREFUOE+tk+tLU2Ecx88fY2CGFaRGRr2qfFMU64Uw6ILgq6hZYjnD
yoldFq2EXFo2qGNqEy8rUae7u+bWLmyruXCXnLWcgStHvtAu33x+Z+x0QHpTP/jwcOB8v8/v9nD/
Na4Y/NhyWY+SJr3k3IxjHVPIy4RgYo05isl4FiPx5QKGueymDIWXcVxrEk12qIZJoPF8pDOYWUF7
YAk3PIsF2maE79uvl8BHMjjQYRQNWEqd3gU0m+fIYP3nL7xfWcO1mUU0ONJEvUVAZfuEO9YYFD0e
0eBcv5/EtS9mUW+Kwzj/hUwCn1dxxp5GzXiKODWchHIshfODflGsHPJC+TKI0wMBHOb9kA28Rc1E
AuYPOTLRJ75iPx9D+f0wStUByHURHNFapOkzg6ruV9j9wIWy7gAqe95AbppHZvU7cms/UN45iyKV
D0WNbtR2hVHRZhAN2FhYCSU3jSjWOMjgrDWF9Ld16sOJkQTdzMSldfaN2kNSg33qUZx8bCODSp2b
OsxSZ808+Owdpb691YetjS5UXHTiQn+Y/s/LOU7+0AJZlwl7N+pi42Mpt0wnUT0YlcydcajFRdne
Gg8JBtfHgqjjnai6N0pz7QumIOPdKLtrxVGdD7ZkFp6FHCaiWUKm9qL60bR4O0tF2WfHnqu9KL70
lGArzNjWPIldrXZip9JJ9bMGspLzco5j66g1BdH03AHFEysUvIMyYksiECrQ0BtB+1SM3kJeLgQz
+fOh/A3J/v97cNxvbRwpGSKGCe4AAAAASUVORK5CYII=')
	#endregion
	$button_psremote.Location = '83, 48'
	$button_psremote.Name = 'button_psremote'
	$button_psremote.Size = '74, 24'
	$button_psremote.TabIndex = 3
	$button_psremote.Text = 'PS'
	$button_psremote.TextImageRelation = 'ImageBeforeText'
	$button_psremote.UseVisualStyleBackColor = $False
	$button_psremote.add_Click($button_psremote_Click)
	#
	# button_MSRA
	#
	$button_MSRA.BackColor = 'Transparent'
	$button_MSRA.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_MSRA.ForeColor = 'Black'
	#region Binary Data
	$button_MSRA.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAAAlwSFlz
AAAOvAAADrwBlbxySQAAAjVJREFUOE+FU/9rUnEU9b8qCAoGMYoiWj+MokWMIQXZGKEhK6F9obHa
Cq0RUjJczQ0rwZUzY6spOmVNtkJrlm5Wk2n5hUqTxjzt3PFcry/0gcPj8Xnn3HPvPU/Ds5otIZEu
IrKQhNe/IHB65jDyMAjr2HNY7JPot3rQZX6AzqsOGC6PQIjKIblWqwkq1XUUvq4jk/+BZOY74isV
RBPfEI59ge9FSaDvtakFFuNpIVungeuTQI8LMIwCumHghHkDzVfKOHQpg0ZDHO5gHjrTLbWAP/JW
BCxP1GStFTg6WMXh7hz2GRNoOBsRgVOdZrUAe6ZA/wRw0bkl0DqkJrP6rjYfXIG/CDi9cyKgkFlZ
sX7Q9AF7zy1i9+kZ7DzpFgda4021wD13SIb3r75pnUXsrkB9K9wInYvAbcdTESD5d+sk0zrJW1va
kG+J+ja4Y17I2lJZRF8XEH6Zw/R8Cd7QR0zMvBcBkvg09tlkzfVZKAHp6LojK2KPvPwVdEmSko/k
ahWt+gFomD7FEvGpCGTz5T9wY7NvkjgDFogtF3HsTC8087GM9DZbeYZaeTORn8eEwHgvpdbq8Wab
JDGVSjKb2kyoh8icMwJpHzClkf+Cs/CH47j/OCj2eyzjQro2PCUOGOn9Lee3BV69W8abpRUw1nRF
sDrvg9EULgyMylAJT7ggaGjugKRw/FEINkdAbHYP+eRjrogD5QA5LL6b785i0L6NPUd06kD977S0
90nfjcf1Qt5xQIufQS28ytGYvtsAAAAASUVORK5CYII=')
	#endregion
	$button_MSRA.Location = '6, 18'
	$button_MSRA.Name = 'button_MSRA'
	$button_MSRA.Size = '71, 24'
	$button_MSRA.TabIndex = 0
	$button_MSRA.Text = 'MSRA'
	$button_MSRA.TextImageRelation = 'ImageBeforeText'
	$button_MSRA.UseVisualStyleBackColor = $False
	$button_MSRA.add_Click($button_MSRA_Click)
	#
	# button_Remotecontrol
	#
	$button_Remotecontrol.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_Remotecontrol.ForeColor = 'Black'
	#region Binary Data
	$button_Remotecontrol.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAAAlwSFlz
AAAOvAAADrwBlbxySQAAAaNJREFUOE/NkMlLQlEUxv0/2revIKJWEaEQQYKUQQNEgxAPJQOHtAGR
LCwtylJBelqYmg2+CpxQMjKQyly0aLAoaOvG1l/dW1mQ0NsEffBxD9+958e5R/BnusxeQGLYQSad
QmuHGi6XBx9Xv6tX58b93S00K1EYzT4oZgLYCexCNmbjB1HMH4Bl/TBZnaho0GFkVA/lhA2Ti0F+
AMYSRqdyBU/5G+wnM9jnQqhvkcPoOOQH6DKE0K50UsBj/haJeBzNYj00lm1+AInGjykzS/dQKBQo
oF8+j0G9mx9gcNxFl/byUgRR7jJHdyKUGn8CHAHubctLJZPMZveWmonIFOnjEyjUlp8A0rT3WKQm
NdtdA29fLfwD9eDGpDhdn8NNNk0BBoOpPMCVuYaZS1LARk81njeH8eCWIb+hxNG0lGYE/P30MaJ3
WDnAmbUbudUhXHm0yDqGS7a3VSLENCKlE1OzQ00ofWE5cU4Bax1VdPywSoiIWkSBn/b21SGkkiA2
zXx9ZdbOYmE7CkswAlKTLDbL0IdbciGCCiE4bTtIRhv+mQSCV19YWTxAQ5InAAAAAElFTkSuQmCC')
	#endregion
	$button_Remotecontrol.Location = '6, 48'
	$button_Remotecontrol.Name = 'button_Remotecontrol'
	$button_Remotecontrol.Size = '71, 24'
	$button_Remotecontrol.TabIndex = 15
	$button_Remotecontrol.Text = 'RC'
	$button_Remotecontrol.TextImageRelation = 'ImageBeforeText'
	$button_Remotecontrol.UseVisualStyleBackColor = $True
	$button_Remotecontrol.add_Click($button_Remotecontrol_Click)
	#
	# button_rdp
	#
	$button_rdp.Font = 'Microsoft Sans Serif, 8.25pt'
	$button_rdp.ForeColor = 'Black'
	#region Binary Data
	$button_rdp.Image = [System.Convert]::FromBase64String('
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')
	#endregion
	$button_rdp.Location = '83, 18'
	$button_rdp.Name = 'button_rdp'
	$button_rdp.Size = '74, 24'
	$button_rdp.TabIndex = 1
	$button_rdp.Text = 'RDP'
	$button_rdp.TextImageRelation = 'ImageBeforeText'
	$button_rdp.UseVisualStyleBackColor = $True
	$button_rdp.add_Click($button_rdp_Click)
	#
	# tabpage2
	#
	$tabpage2.Controls.Add($groupbox16)
	$tabpage2.Controls.Add($groupbox7)
	$tabpage2.Controls.Add($groupbox6)
	$tabpage2.Controls.Add($groupbox5)
	$tabpage2.Controls.Add($groupbox2)
	$tabpage2.Controls.Add($groupbox1)
	$tabpage2.ImageIndex = 1
	$tabpage2.Location = '4, 23'
	$tabpage2.Name = 'tabpage2'
	$tabpage2.Padding = '3, 3, 3, 3'
	$tabpage2.Size = '1264, 90'
	$tabpage2.TabIndex = 1
	$tabpage2.Text = 'Computer & OS'
	$tabpage2.UseVisualStyleBackColor = $True
	#
	# groupbox16
	#
	$groupbox16.Controls.Add($button_hotfix)
	$groupbox16.ForeColor = '59, 59, 59'
	$groupbox16.Location = '1151, 6'
	$groupbox16.Name = 'groupbox16'
	$groupbox16.Size = '105, 78'
	$groupbox16.TabIndex = 10
	$groupbox16.TabStop = $False
	$groupbox16.Text = 'Updates'
	#
	# button_hotfix
	#
	$button_hotfix.ForeColor = 'Black'
	#region Binary Data
	$button_hotfix.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAIfSURBVDhPhZHfS5NhFMfPZX9BWC7bJAhF
Mt0mSiO7sa1gQkJ1EUFFd+FWLNGLMtKKiOqqFrRRtC3QtYKKwIykSaRJlFH005xadBdY0IVXn87z
vr5r4qIHvu/3Oc853+857/PI7R7PMuS63ZLtqpKBWCWGTVyuzmDZQa7bY4kzkQpYmCStPGiZLK1z
sCTIKbJdayUdrYSpfri3Ej73kYqsZvBoeZPixulsxD+HOuBhNQwrhjzw5SSpzvImRbFJmk4UeuFR
DTypZUVFwGKG18P08bImGrhtsSYpHIPHdTBSD8/qcdVus5iRDfa55v+a2Bdrj925CmZ6IN+oHX0w
6ocJHzX+XRZbsTk3ea3LaP0tvas7Ook+lQt+J2C8CZ62KDZpV8WLFja2HrTYis25yY81w69r3I26
eRBbJ2Z5rQnmolq8GZ632nipeGN4i06hPK6Y0P1UjIY+IXBW2J1RtfkX26SS+Xw7vG5TkeJtEJe/
gU95L0yG4FWQj6MhQnHh8oyQ/CbsvS4UX8Ex4fsheBeGDx00nRZ8/QLvd8LsERp7VVwQrqrBnqSK
VVN8DsfkZsTFwtgO6nTMS1+F+KzQfMJGXIUJjdtO2eJ9N/TrGJSaDETXwI9OfGpiRFembSTmhK1n
bPH+lMgyAwuLJtlIFcxHCWg3I0zqNMFFcfi8yIH0vwwUziT3D1dbgtA5YbvC7NsvioQvlBj8Z3lL
2NmXLJE/2hzRpERwB9gAAAAASUVORK5CYII=')
	#endregion
	$button_hotfix.Location = '6, 20'
	$button_hotfix.Name = 'button_hotfix'
	$button_hotfix.Size = '93, 23'
	$button_hotfix.TabIndex = 0
	$button_hotfix.Text = 'Hotfix Check'
	$button_hotfix.TextImageRelation = 'ImageBeforeText'
	$button_hotfix.UseVisualStyleBackColor = $True
	$button_hotfix.add_Click($button_hotfix_Click)
	#
	# groupbox7
	#
	$groupbox7.Controls.Add($button_MMCServices)
	$groupbox7.Controls.Add($button_compmgmt)
	$groupbox7.ForeColor = '59, 59, 59'
	$groupbox7.Location = '1003, 9'
	$groupbox7.Name = 'groupbox7'
	$groupbox7.Size = '143, 78'
	$groupbox7.TabIndex = 9
	$groupbox7.TabStop = $False
	$groupbox7.Text = 'MMC'
	#
	# button_MMCServices
	#
	$button_MMCServices.ForeColor = 'Black'
	#region Binary Data
	$button_MMCServices.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAG6SURBVDhPpVHbSgJRFD1fE4ERRR8Vps6Y
mo7aeNccZ8x7l8cMI+itIiKiixVEPUQX0ZfMSCTqVQXpYbf3KYtIJWjDYp21z+x1NmsYAPwLLBqL
s3R2kaUyC00EqPEknYE09em+izlF637LmTS/iERV5guEjhVVA2w2iFEXqf8Xg1Z4LlZdyRc699Ua
PNUbQLyyWnjD/hbeNwca+IORB18gDHelCmzv7EIineNMmvqhiALBcJRlckssnkjz4R8GWDrrjOPi
+qYEqpbAVNgEMWmnW34hnV1Y5gPafOq3gVv2ViTXLBTPzmFtfQMiUYXzCWrqowng64841DNgZpfc
7WmrvR7Tkp29/UM4ODoFYly9aRItJUG0VLz+4KaixnsGTDWOGDEKYl2ctsKk3nBJrDeYyhhiGTO6
zecLzX4BM8klM8FsIbSnjEINzYaQqwaT+IzDV4MCRhNgTreH4YvdTXQzDieddYhRxLDV3jfgV9Jf
BmaLjcNml/hGHl+AzXp85UEB4w/43oCGiUlLLoLcN2BcvYP9J7xv9TGQObB6BmwUzHXqI8YGGhB6
BFwjTf3PR/5UPOCPI2fSWIy9A9wD+f2hDKCYAAAAAElFTkSuQmCC')
	#endregion
	$button_MMCServices.ImageAlign = 'MiddleRight'
	$button_MMCServices.Location = '6, 48'
	$button_MMCServices.Name = 'button_MMCServices'
	$button_MMCServices.Size = '132, 24'
	$button_MMCServices.TabIndex = 1
	$button_MMCServices.Text = 'Dienste'
	$button_MMCServices.TextImageRelation = 'ImageBeforeText'
	$button_MMCServices.UseVisualStyleBackColor = $True
	$button_MMCServices.add_Click($button_MMCServices_Click)
	#
	# button_compmgmt
	#
	$button_compmgmt.ForeColor = 'Black'
	#region Binary Data
	$button_compmgmt.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAALsSURBVDhPdZLrS9RZGMfPv9CLthdBmEWw
KfgilgiWCCJoX2xFUBBFkGzRiG52c2ckZ0ZnnC4uOt51ZtXJmalGGWeq3dQoi9qLaZJmhk41FZPT
5Fx0Lo6J0Kfzs160u/bA55zDOc/z/Z6bMFk9X8XQ7Pbq6jsoqXVJrnyBC2VeWV+ysNzSJYzNbqGt
czG78IFEeuF/KPPK+pICCqUNHaLYfIlo6j3dgz56PqOMuwd8RJLvKTY7Pwkojv9F2YG6ykk4McfD
5zGGFF7E5DjKwLMoofgsakVAJnpLGzrRyzPp612fkFtTKKm5jEaKqCsdsndQ3nKN8/abGO29BBIp
iswOhE4mTs0liaRniKWnF4nOxoikYoQl75Ix3koCM9NopOPjt2kmDLfxGW5RWGtHnKl2EpiO8M3p
Yb41TfBdjZ/NlgDbbZPstk9ywPmGQ5Kx4DuKKi+hLdPx2vuK/voBnhR3IYqr7IxPTrLWOM6mxlds
cwTZ2TnFPm+E3GthVNfDHPVE+cc/RYnOSDA0haHiHD3qXoaPNCI0le0M+vxkVb5ky8UgO7pi/Hg1
zp4bCfbfiLP/9ySHe2Hkl1UknrnRnaum+1Yfx4tO8LO5HaH+1Ubfo6fk1AXYeDFEjnOabHeaLM88
61zzrGiFMc0a6N8CHRmMufXkF55m0B+i8EIrokg27vsjrDa/IaMpTKYjRab3A6v/gBVuGNdkyuKt
0JkFlmW05q6l68Fz7o36OVZuQZyUAtaeIeLzSeJzM8SVl0jFCcnf9vjUKvh7syxeD78tp+VwNh0P
XuP+c5SbQxMUGJoQKq35buFZKwXGZvLLGsnTN/CT1sq853sInocnOrAuw6bKQd9+B0//Uzx/Dcvf
OEa+rBEy1kg2KJypcWJs78XWN4rdsJfuy3p5AVW0Hc0h13QFlbGFvNJGVPp62UsjTcVdcaqibZFj
Jos4eMLQViDPlWeyoc3bTfmRH/BV71JcFg2WQDH/V6yULJX4lRDiI1mPiYTV4rA5AAAAAElFTkSu
QmCC')
	#endregion
	$button_compmgmt.Location = '6, 19'
	$button_compmgmt.Name = 'button_compmgmt'
	$button_compmgmt.Size = '132, 24'
	$button_compmgmt.TabIndex = 0
	$button_compmgmt.Text = 'CompMGMT'
	$button_compmgmt.TextImageRelation = 'ImageBeforeText'
	$button_compmgmt.UseVisualStyleBackColor = $True
	$button_compmgmt.add_Click($button_compmgmt_Click)
	#
	# groupbox6
	#
	$groupbox6.Controls.Add($button_localadmins)
	$groupbox6.Controls.Add($button_folderrights)
	$groupbox6.Controls.Add($button_profilerights)
	$groupbox6.Controls.Add($button_homerights)
	$groupbox6.ForeColor = '59, 59, 59'
	$groupbox6.Location = '701, 9'
	$groupbox6.Name = 'groupbox6'
	$groupbox6.Size = '296, 78'
	$groupbox6.TabIndex = 8
	$groupbox6.TabStop = $False
	$groupbox6.Text = 'Permission'
	#
	# button_localadmins
	#
	$button_localadmins.ForeColor = 'Black'
	#region Binary Data
	$button_localadmins.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAN6SURBVDhPbY5tTJNnFIaPycyMQnzbpmQ/
hhkdixJ1Rb66ORwvLcFppqISBYPDsoytc3y2hRY6mcwoIEiRLd1iGgSHLUNnRjUMpoKgQdEBbVog
czhK1QGbUF3mgBbuva3LwpY9yZVz8iTnvm5SS/l+VPF8OrQtyD/VHEpZ0LMZxwvRbOZ7a9KDcXTv
i8hl+V61lCcqkPHJx78CdG8LKT+O4Y4YJl8m5AJ4lP0mb/ab4jVoL2fRrGNRuDUUmVGM9wOJgHz8
E6BkeSLtWwJPbcYqHNsbzJkEf6pYZpkqgYcmzXq0lm9HY9FOFCdF4sAGBu/FCClTIiTKlwkoTyrg
TIzXb6qI/9v0Ct6NWOk6+MZy9DUrMHhJi1/vVGK08zD2rV0BeQSfMqK4BkVbhaTdIiSVjDMVLjLt
iETaukCkv/rcIKbNmLZWY+RqCeyWQqSGLZ2QhweQPDyQSJXAcC0Y+nAjZ/qaM1m0+M1n6vgEe15+
HkQU5ttHOz7FnfMqdBnTEBwUED1hSaRfWjYTKV9bQlmSpSRft2QS0ya4rSdwr+MQHJYCpLxEwxqD
mH++LmPc3rgbDmM0nOcSMHI2DiOm+M9GzFIi6Rdu+rZYTJLVvLixKxq4Oktgu5CHDsM+6I6sHau/
rEBvUxp+bk6Ad/Ag5hxZmLN9hAcXt+PHr1gDJervkqz2AbF655ozDVWT18+8j6byJOQq30F9byOu
j9egv3o1FobVwL0itOo24ruPY/37UH0sKLHKEchWDg8cbZ9CX88FdNftx2ldLMqOFKC03QO29ip6
K0TAaCngLIVFKcZFVTjw8BjsxtdBsrIB3Lj7GH0PPZicARYWgN//eArb/Se4NQG037Th5vFQzDty
4LFlczMPGMrHvD0X9lNcwI6qflwefIyCVjeK29yYn30K9/QUlG0eVFzqh1UfgrkBBeaHsvHkWjJm
elIxcyMFPzVsgqk6BiTRdsHQOQl5gxNpdU6kGMeQbByHpqELjloRPNYsf/1H19JxpSwMXVXrcatm
AxorIz3SPaE59EJ6C/Z/OYy8JhdyzS5km+4j8+wUXKdCMNu5DQtWBR51H8APBs5GFLmICI6VFLhJ
nROQbPas2G3C8l0mLNtlBiW1oKQwFbf1YeipCUdbmfh731H3CTH1nIygvs+j6Jw+mhSHY7hvX8qz
tMXp/0XE8T+P6C/QrhFL9yUQbwAAAABJRU5ErkJggg==')
	#endregion
	$button_localadmins.Location = '6, 19'
	$button_localadmins.Name = 'button_localadmins'
	$button_localadmins.Size = '134, 24'
	$button_localadmins.TabIndex = 3
	$button_localadmins.Text = 'Local Admins'
	$button_localadmins.TextImageRelation = 'ImageBeforeText'
	$button_localadmins.UseVisualStyleBackColor = $True
	$button_localadmins.add_Click($button_localadmins_Click)
	#
	# button_folderrights
	#
	$button_folderrights.ForeColor = 'Black'
	#region Binary Data
	$button_folderrights.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAALhSURBVDhPfZPrS9NRGMfPy6g/oHe+UBBE
dF42U5uXdFqQIEVKYlFGL/JCas4stTdTNMyWTtM5EbJXlRZ4wS6aOJ2Y97k5L9MtDbUyTUy03b89
v20uIejA5/c7HM7zfZ7vc85hGnn8jro+CtOySCfcfKbxzBqt+2vkohAi1EOTKFTbJDqlVSQwrSLR
CeMCYFsGfi+4sCxhUirAVG2ER/Qo3H6NPG7TIzAtO02BOphnrsOkzoD9RzdwsAiY9C7MHEuuv4Vw
fHaKaJsSBH8FDsZg1mUSOTDPZhHcPBOWuSxYF7JhW8yGXc+RCfpAXSfEq5IwnltACOwNwLqYB6u+
gBC7WBLDbryL5ZfJGHsUhvFqAcHHxGM+2Qt3W4l/QwLUg713VFkRHCslcKyWAhxfHsDQdhHfPqS6
LZAtzgKHjQBZeRoLNl0XTRY6YWy/gLEqwRHCsPkxnfbmUdW5WO08S6fDg1YRgrmWEGz050JZJRxm
nIrJUIOFZyJSNrgycBktRjoczsZ9rHQkQ/8iDlbqD0jMPp+Dta7zGG2MfM1mGuKwqcrHRl8O8KuX
AgphMxYR92BfISvrZRiq8oNtvhAwFKOnJBJvS6lvxmLMtwrBZhrjYWhPxb5eCmw/h2NdQpQ7wdcK
YKsaAxW+wEoZ9UaCrgIeusVBwEYltC0RYHS7qKMxgLWNmtkM7MqIOjf1wL4cfRJvmKayYdXchl2X
D8f8HbKTB7UiHEwtT9il4yCRWLpp0ZhyEuOiNgafagKxpbxKvnOxp0yBaSQNB6rL0LVGobsiqJ3R
4BWn+V0rTPG9IiYKLvmm30rySUkMPZkw0cDHjuomlV6On6ob6K/0w2B1AIZrgtEhCeCCvVz3mbET
xPEjHFM3h+N7TxIcmmxsD2VgsjEMtB56BK9pRQTzvKpDZpvPsUFpIOuS+CtVT3gYqQ3G+4e8Xi5o
SMpjI7IQNlrPZ+MNAuYU+M/wIQ6zeXML/w7G/gD66oaB/Zvo/AAAAABJRU5ErkJggg==')
	#endregion
	$button_folderrights.Location = '6, 49'
	$button_folderrights.Name = 'button_folderrights'
	$button_folderrights.Size = '134, 24'
	$button_folderrights.TabIndex = 2
	$button_folderrights.Text = 'Folder Permissions'
	$button_folderrights.TextImageRelation = 'ImageBeforeText'
	$button_folderrights.UseVisualStyleBackColor = $True
	$button_folderrights.add_Click($button_folderrights_Click)
	#
	# button_profilerights
	#
	$button_profilerights.Enabled = $False
	$button_profilerights.ForeColor = 'Black'
	#region Binary Data
	$button_profilerights.Image = [System.Convert]::FromBase64String('
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
AAAAAElFTkSuQmCC')
	#endregion
	$button_profilerights.Location = '146, 18'
	$button_profilerights.Name = 'button_profilerights'
	$button_profilerights.Size = '144, 24'
	$button_profilerights.TabIndex = 1
	$button_profilerights.Text = 'Profile Permissions'
	$button_profilerights.TextImageRelation = 'ImageBeforeText'
	$button_profilerights.UseVisualStyleBackColor = $True
	$button_profilerights.add_Click($button_profilerights_Click)
	#
	# button_homerights
	#
	$button_homerights.Enabled = $False
	$button_homerights.ForeColor = 'Black'
	#region Binary Data
	$button_homerights.Image = [System.Convert]::FromBase64String('
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
rkJggg==')
	#endregion
	$button_homerights.Location = '146, 49'
	$button_homerights.Name = 'button_homerights'
	$button_homerights.Size = '144, 24'
	$button_homerights.TabIndex = 0
	$button_homerights.Text = 'Home Permissions'
	$button_homerights.TextImageRelation = 'ImageBeforeText'
	$button_homerights.UseVisualStyleBackColor = $True
	$button_homerights.add_Click($button_homerights_Click)
	#
	# groupbox5
	#
	$groupbox5.Controls.Add($button_PCGroups)
	$groupbox5.Controls.Add($button_ComputerGroups)
	$groupbox5.ForeColor = '59, 59, 59'
	$groupbox5.Location = '422, 9'
	$groupbox5.Name = 'groupbox5'
	$groupbox5.Size = '273, 78'
	$groupbox5.TabIndex = 7
	$groupbox5.TabStop = $False
	$groupbox5.Text = 'Computergroups'
	#
	# button_PCGroups
	#
	$button_PCGroups.ForeColor = 'Black'
	#region Binary Data
	$button_PCGroups.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAANtSURBVDhPdZJtTJNXFMcP25xGqDx9So0m
ugTcJm5OIyUUIVsLj0MBsSobxGEtQsaETcW2vNSW1zC0QAfKooVoihiHxU3jKxFFqsFoNoNlZKWL
yVytUtMsWuIHcaD/3YJZ2Ifd5Jdz7of/+Z3cXCpJ5qfQJ/FUmTF/qpYwdML86aoQR5av5ScPaBaj
PnsRipX8ZEmyOKpU4CnIfwaY1ktJq+BYiOO0gpQNENOuT8QvThuj0WtW4pRJibK0d1EQy03ukEso
yL8DdEpxlGGdZKI17x3sy17MTJLneiU3R79GDHv5R+gxb8CJvZtg3ChD7ioOX8ZJqUAuJdIKEtqT
LGEmbnLK1JD02vQe8mPCvV8nzsXgqUKMXDTgrzsWeBw1yPkwFHkynvJjI4j2pknJkColvcBMZTNM
Khm2LhdBs+ItFwLdeDZ0AJ7+WoxcKMe2D972fyULoyLZPCL9Go5twVFRAjN1F8J1Pmhqwp/91cha
MhtEtGzUUYe+C3m4ZM9G7yE14qMXKH6sSKXq9tVEuvgQ2imfRduXh/jxtAuBoe9wv78KI+fLkBP5
pruiLZa/cqzocVw9wdorQso+8heZ3482tMqo6qCcKNkaoLPGlSRfKlY86CuH11GF4TN69FnVKK5f
8qDSlohzZwuRUEf41VMK65VwbLSEwNQc56xpWT2PUlrukdD6iJQtnujjnRb/wPEd+Mm8BWnfEgo6
FyLfJkXeUSly2yMw7K3CdXc2rP08NjW9AaNF/pJSLL+JlE1uZ33vEwzeOoOBDg1OVKQjnq18/8n3
GPKlwzmagbuP0uHyHcShG4SBP9Q4cjMCqoZZIGG/EzfvjWFwdAL+cUydv1mV1xAGfd+g7TZNc4tw
mGFlffvPhF9Gc/GpmUAqy11cdY2htCcA4+UAXrH082dAYi3B4UtAxwjhGMPmIhxxTmMbJlReJny+
nwPJDTdw2OHH9k4Ptto8+OKoFzm2p1jfLGAtM6xjpDYQBPaInb8TOtyE6qsEVZ1oPCNr2S5aoDkH
dZsbe+xeFJ9kdAWrD1r7GHTd49C0jYHfMjye3kj44SELXyMoTNTD/scqRjiJPi7ZHfbZyYnQzC7M
3TyDTDtCM7sRlnn6xZwYnVrVTGi8Q0gyUR8LRmY1hpG2NoG1wSlEMQzZ/xA0hc64RzFeH6J/AFRR
7NCExeMEAAAAAElFTkSuQmCC')
	#endregion
	$button_PCGroups.Location = '6, 48'
	$button_PCGroups.Name = 'button_PCGroups'
	$button_PCGroups.Size = '261, 23'
	$button_PCGroups.TabIndex = 1
	$button_PCGroups.Text = 'Transfer Computergroups'
	$button_PCGroups.TextImageRelation = 'ImageBeforeText'
	$button_PCGroups.UseVisualStyleBackColor = $True
	$button_PCGroups.add_Click($button_PCGroups_Click)
	#
	# button_ComputerGroups
	#
	$button_ComputerGroups.ForeColor = 'Black'
	#region Binary Data
	$button_ComputerGroups.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAMKSURBVDhPdZFpSNRRFMVvQeHSMguKHypI
0iyy0AqjqMaZaJHKbAQpx9RWNZcZZ3EWpzEtdysRK4PcBtMpSlpIihLbCIqsLJcICrOCDEwTLNM6
vfeysg89+HHP/7z37rnzhoxKmcAQKqMDm7xFNTL0Ku9fdbV0tnmdbLQ0diZyo2ZAq5CNGpVSX5NK
Rpx/GmRu9CIAgnSVF2sgpdRV0uELtgBcL1DgXKYCGWFzsHeJZDQhRE6cPw30CqmvZb18pGznLORF
zWRJ8i8GhcTNsEYKlzkQTQWbUWeNgG3LYsQFSbB7qZz2MFiSnHRKOUuSjIqkwtCxJD/sCprWs3+F
Bx6fS8CLqxb0PSpCd0sWts9zQ9xCd4oPdCOyhnmRZYMXGVQsKeNvknVzMDTzPRAbSG0YOIPOW0fw
4HI2uq6kQ+NP74rKq6i47BSRYY2ETSGhpOUeaD2biI7LFnx8WITXN22IW8F+b0z47vctJqQbfnG7
Qg0iCjRbM8lisxPpl02glJBJFL9gQi8+1aP/6RG8arbjeWMyTGYrcg7noaOzC3X1LgHX3Muw2GDm
DZQn++mibRGFzJWufnPTjJ4WB9oatWguV+PgoVy0PWtHQVGJqOO1ze5A5tGASbT22EtSlb0jxbHu
AGdtSe9d5z64CiNgMWtEWn5hsbhwiKVyuOYe37MWKEdobUn7VEVx15Pc631ovd+IO9UxqDmwCqna
dFRVO8WFLDYJX4NDg0Jzr7KqBuwdQKr8J7j3cgCt70fQ+xX4wQ4ODX9DSppOHOKHHVk5SHH6IZXB
NfdOV1aLd6Dwkse40TEAU1M/bNf68f3bEAY/94lEPubvse2OgwKuucf3UrL9QSGW2zjR0ov42m5o
qrqx7TSjsgfRtR/EQ/ELOWNjj9dGk5n/nYvJJ/YSYiq6oHP1QNvAqOf1LVJdH5Cm00NvzBBpx09U
CKI1O0q5x/d0eiPR1JXGtCmRDSOe6np4bB2DaXe1C26R5zFZ3Tg8MTghNjEpGRyW6iOSGaIBW9MZ
wdz4D0EMz3Hf4xbRT+U7HtWFp1FPAAAAAElFTkSuQmCC')
	#endregion
	$button_ComputerGroups.Location = '6, 19'
	$button_ComputerGroups.Name = 'button_ComputerGroups'
	$button_ComputerGroups.Size = '261, 23'
	$button_ComputerGroups.TabIndex = 0
	$button_ComputerGroups.Text = 'Get Computer Groups'
	$button_ComputerGroups.TextImageRelation = 'ImageBeforeText'
	$button_ComputerGroups.UseVisualStyleBackColor = $True
	$button_ComputerGroups.add_Click($button_ComputerGroups_Click)
	#
	# groupbox2
	#
	$groupbox2.Controls.Add($button_autostart)
	$groupbox2.Controls.Add($button_installedSoftware)
	$groupbox2.ForeColor = '59, 59, 59'
	$groupbox2.Location = '308, 10'
	$groupbox2.Name = 'groupbox2'
	$groupbox2.Size = '108, 78'
	$groupbox2.TabIndex = 6
	$groupbox2.TabStop = $False
	$groupbox2.Text = 'OS / Software'
	#
	# button_autostart
	#
	$button_autostart.ForeColor = 'Black'
	#region Binary Data
	$button_autostart.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAKYSURBVDhPpVJNT1NREJ0fQGLiyrBT15Io
ceFOE5EPUeOiCSmauDcaXUjUAGmpfPWLQAzQ0r7SUkoKtOWjBZoWJAaktkUkUQttI6ghVowbK4UC
epz3oAobN05yMm/m3XPm3nMvAfgv0LWWw7iip7zLOnKWagmX1ISLzYTzjYS7xnPw+sc2/YFplXds
gnI4RC7X0U3OeOQg6IYI1skziL23YGbRhw+pBL6kvuHFXBijvvE1kewb9x+YrKM8kdwZINy3E3qC
bZjwhmAwONDQ2IL2DgEejxcrK6sIR+fhGR5d6x9075GvMko15Kz3EZTDhAfdZbBZRhAJLyL9IwOz
WeC8gVAogk6jgLfvluAPTIIFVHsCeqISPq/zDaGik6DqeIjFV3Gk0xvYyGRQVVWFzGYG39NphCPz
6B9wS7vo7XNu5c5O5Wxab4wFDAS9QQv8Ana22GfONyor+QPYzu5gd/cnjCYLQi8jsNkdEKejjKcr
pgi2JKFmkl2vJ5xVEBZWg5BXVMLhcEAul0OpVMLtckGrb0UwOA2TxQYqqaNnokBfil3/RLB/Jlxg
gVvGY8hub0uTZTKZlHNhZuLU9HN0GEz8EIhOFtWSv5jvuu8rk58QrmuPIJH8uL/8cMRiS3D2uxAI
TqHtaXtW8oDjeJGCgsW8E5n+KGZnorBZB7C8nNyn7cXScgJCdw9mZudgsfbgcXVNlySwL3KCUahv
ElJD7jFEo6/h8ozAJNjQJVilPMh1JLqAQZcHDU2adV6f/0egjNGmtotCp5R1jesmczc7HUUinkQ8
npCyWIt9RV29SC5oUvP1iWTpITFaNAKpNa2iSMHtO/dMNQpVtrpWiRzEWuyL/5s1ehLxr8hnnGYU
HoBYi/2/wd78B0C/ATooV+x+3KOsAAAAAElFTkSuQmCC')
	#endregion
	$button_autostart.Location = '6, 48'
	$button_autostart.Name = 'button_autostart'
	$button_autostart.Size = '97, 23'
	$button_autostart.TabIndex = 1
	$button_autostart.Text = 'Autostart'
	$button_autostart.TextImageRelation = 'ImageBeforeText'
	$button_autostart.UseVisualStyleBackColor = $True
	$button_autostart.add_Click($button_autostart_Click)
	#
	# button_installedSoftware
	#
	$button_installedSoftware.ForeColor = 'Black'
	#region Binary Data
	$button_installedSoftware.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAGlSURBVDhPjZLLSkJRFIY3CaWlmSRdBhWE
1AP0FEG9S/fCzEqh5lF0c9CkCwSmXVQquoyiQffQaJKQQlB5KqIGBX9r7aNpp1O48GPBXvv85zvb
LUrdodVKTwQVnvC/VHkj4L11o1siF8EP+05TmDlJYZa6Hr4zBXMXT6imkJqRzZ8B9uEQgtevsHn3
YHat6WIhrO4N2IdCv0yEbTCEg+QHjM5VTB0/SqbJho20sKnWRFgomcvQG8T8uYKy4R1diwzWgXWU
kwl/OpuIEpcaIHqCmDi8g8m5hsmjB+IeU3/yIM+GQ7IBnQHZC8hkOfqM+rFLNIxfolEDr/HMf/Ui
TbIBHStq7wpg++YNzQtxtCzG0br0E17j2W78XR6sMA9oAtr9sudTxfRy+S9wiW71E0SbGhCLRhGN
xXThGZexfx3C0rW0bxsMo5AOjytjkEgkcJtI6sIzLhlA5SCarBmT9GE+KSmkFEUXnnEZnRTAl6GW
yJgY+lQTfH7Qj+CeC63xjMvEBt9XMm1icasm+RRdpGxArgkPOL2IFPXgGe/hvfxmbUmT/BCOL1mQ
puqR+h0MAAAAAElFTkSuQmCC')
	#endregion
	$button_installedSoftware.Location = '6, 19'
	$button_installedSoftware.Name = 'button_installedSoftware'
	$button_installedSoftware.Size = '97, 23'
	$button_installedSoftware.TabIndex = 0
	$button_installedSoftware.Text = 'Inst. Software'
	$button_installedSoftware.TextImageRelation = 'ImageBeforeText'
	$button_installedSoftware.UseVisualStyleBackColor = $True
	$button_installedSoftware.add_Click($button_installedSoftware_Click)
	#
	# groupbox1
	#
	$groupbox1.Controls.Add($button_printer)
	$groupbox1.Controls.Add($button_USBDevice)
	$groupbox1.Controls.Add($button_systemtype)
	$groupbox1.Controls.Add($button_memory)
	$groupbox1.Controls.Add($button_processor)
	$groupbox1.Controls.Add($button_mainboard)
	$groupbox1.ForeColor = '59, 59, 59'
	$groupbox1.Location = '8, 9'
	$groupbox1.Name = 'groupbox1'
	$groupbox1.Size = '294, 78'
	$groupbox1.TabIndex = 0
	$groupbox1.TabStop = $False
	$groupbox1.Text = 'Hardware'
	#
	# button_printer
	#
	$button_printer.ForeColor = 'Black'
	#region Binary Data
	$button_printer.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAHfSURBVDhPlVPLShthGM2ztG9gthY3JloH
6qWlr2A2TToYUeMFTDIpgrGlJsx4i5uEGq8LcZFgRNRuu2jpphUFUfC2bOmF0tPv/PPPmBRdeOBk
vpxzvjO3JAAgUI9nE9WNJ+ktGMlNGOOaMlOjp2MKavf/AsOq4I+I34Xf/rrkTI2ejimoXfWhMRDv
Q1uqohbenwEHpy45U6PHjI7fFDiOs+E4NhbnHIStGn6K+Fv4S5MzNXrMMMsdkdyCfD4vByD20kR/
PA7TNBGNxfAi6pIzNXrMEHrHLcjlpvkFVmYC2ewbTL1+eyvpMUPoHa8gh8urayStV3JGU87Sdyvp
McMsd/wCXs7Xw2Ps7u2jvLyGcnkV75ZWGkiNHjPMNtyCbdv4+OkzhhIjiPRGJLyEUqmEYrGoyJka
PWaY5Y5fkM1O7s7OOPKEbbRndiCvXj31H5qcqdFjhlnuiOQWCB4Kg2Tb6HrFsKoIpbYRStcQTu/I
XJMfURX0vBx36gvq8UCoQpHoEJpbHjPgLdHzcVeBwnkhVDiZ78DJgoGLxXBByw3wCwaHx6CYGMVA
YgzR/nEc2Y/kj5AUptRMjR4zXt4v6O7qgcfOzqdoNZ7jy3QTPkwGFTlTo1ef9QsE3j3eiwAC/wCI
DTa5sUvmUwAAAABJRU5ErkJggg==')
	#endregion
	$button_printer.ImageAlign = 'MiddleRight'
	$button_printer.Location = '194, 49'
	$button_printer.Name = 'button_printer'
	$button_printer.Size = '94, 24'
	$button_printer.TabIndex = 5
	$button_printer.Text = 'Printer'
	$button_printer.TextImageRelation = 'ImageBeforeText'
	$button_printer.UseVisualStyleBackColor = $True
	$button_printer.add_Click($button_printer_Click)
	#
	# button_USBDevice
	#
	$button_USBDevice.ForeColor = 'Black'
	#region Binary Data
	$button_USBDevice.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAHWSURBVDhPlZBNSxtRFIYHwY27ao36IyrC
uPGDiqYtXRQVwY9FcaFSBb9W/gS1pIlSTUad+EUEq4JMJi6rsSq4VKOiNqU1ZNJkorv+gddz7owo
wSb4wHDuzD3Pe88dCYD0HGZnfFAURUiqqhY8KyAw+xXJRBIJIwmv18tiXs4Ax1AIRQM6Cvp0/DNj
WF5ahH9hEbG4YU2SLaBoIAj1IA1lL4XpXRNSt4bvWxp0LYi4kSPgJcnKvomGiVO8dkdQ7YrAs5Oi
kCCODvfgnxFXkJ8M4JOH13+ijmVPBFWuE2oDat2n8ITTyO/dsmQmM6CwX4ObTqqmZkb+fCxqJdW6
yTMxxYv+0INEe/aKTibZtZ1CzcS5kF6NWXLFuDXBO+8FJn+kwT/WVh4C+M7uHRPO6QvR3LP6W9Ry
W35DcsvCLxQPBlmwxmdoTyqhxC/hGzSqUdTbAY9567uCc+oEjkyZoX3JMahjdNtE03wUTt+lkEZC
cbH+4I+iY+X6aZnhgJIhHePhW7QsWWO/n4uimcZtC/xB57f4/2WGAwi5mP5B55qB1sA12kn8uBpD
14aRXWbsAEbm5k/aX/RsJtCrJXPLzKMARi4bDqGUrsSV363PWcgIYFi6f3IgSXebHodcCgf8BwAA
AABJRU5ErkJggg==')
	#endregion
	$button_USBDevice.ImageAlign = 'MiddleRight'
	$button_USBDevice.Location = '194, 19'
	$button_USBDevice.Name = 'button_USBDevice'
	$button_USBDevice.Size = '94, 24'
	$button_USBDevice.TabIndex = 4
	$button_USBDevice.Text = 'USB Device'
	$button_USBDevice.TextImageRelation = 'ImageBeforeText'
	$button_USBDevice.UseVisualStyleBackColor = $True
	$button_USBDevice.add_Click($button_USBDevice_Click)
	#
	# button_systemtype
	#
	$button_systemtype.ForeColor = 'Black'
	#region Binary Data
	$button_systemtype.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAALPSURBVDhPdZLbS1RRFIf3X9FDPZTZSxj0
EBG9RARBLxUUEUEFRi+VWpmJTuUlxzEbncy8jqKOzslLjU4JkwWVXcUxS8nKzEs5jWkeZzyjjkXU
195TQRdb8LEWa/32+u1zEZaKlv+SVe5ypxc3ceZSo6ThNxpRfTVf8GC2vVmYy10iraiRuS/fCIW/
/IPqq/mCCxSZJU3CVHCZqdlP3OgaoO0nqr7hHUCf+YSpQPuxQDn+jbpBygWNydA8TwYDdCuGArKe
wjugMz49i5oroTuz5AoZ8pkyiht/IK+mOFNYT6oUpdicMjuxVF4j13GT7CoPPj1Ecn4dIl0KP87P
oIenCYSDEabmAuizASYlEzMBPkh800FSbRp9o3P0DBuMjAdJtjoQpy9q+II6i072sNLymrWFw2yw
+9hS42dHnZ+92ntinT5ejn3AlF9PodaJzfGYQb9BklpgulBHv9/PCnM/60vfstk5xvYrH9nj1jlw
fZLDrRMcaR6X72CUU3kudncKdj4SvH43x4ncGkSqrZaugWFibCNsdIyxrTnA1msGuzwGez1BYlt1
Ej06D/oGMVmvsskm2GAVPB8KkZhThUjJq+HOs5esLvKxzjHOai3IKleYVc3zxNQbrKycYKltlDbv
C06eq+WW14en4y2dr/wczalEJJ+vwvWgl6iC9ywrm2S5c5Zo91eiW2F5Q5ioyikW2/w03X3GcUsF
rY/7aJH6e71vSMi2I07IBRVt3RifZzDmpzHCAQz5FSKoWvZCcmb3eIk3l+N+1IPr/lNudb8iPqsM
cSitoP1YTkVkGHe2lCMZJRxKL4qgatVLkLOjFju51W6ud/Tiftgj/8YXxMm+kBEtWaM4Xahhrm1D
u90V4ZzzJqoXJ53izWUyl3I4UxpkFEfywVRru0iyVkeQDmJ/YlZ1QnZ5RKxQzvuOZdp/GSyAMv8j
lkj+Fi2W/CeE+A7y3I1Qt5F/hwAAAABJRU5ErkJggg==')
	#endregion
	$button_systemtype.ImageAlign = 'MiddleRight'
	$button_systemtype.Location = '94, 19'
	$button_systemtype.Name = 'button_systemtype'
	$button_systemtype.Size = '94, 24'
	$button_systemtype.TabIndex = 3
	$button_systemtype.Text = 'System Type'
	$button_systemtype.TextImageRelation = 'ImageBeforeText'
	$button_systemtype.UseVisualStyleBackColor = $True
	$button_systemtype.add_Click($button_systemtype_Click)
	#
	# button_memory
	#
	$button_memory.ForeColor = 'Black'
	#region Binary Data
	$button_memory.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAFESURBVDhPpZK9SsNgFIa/S/EGhLSm8UOI
DiUBjaKhWtFJRKSppWl113twEB10kLYiRVJ7AQ4WHFw13oA6C8X99Zz8iIZvMBh4cs55fyBDBIB/
oRTzoBTzoBTzIMwD+SFbOgy/GNNMZrpn72TnDneFbJXwEA4xCgOMXgYYPRM8wwHun2J4/+0FUYe7
YtrXETyewTTKmJUWtk9MzEk7YuvYjEhv9jjDWe5wN/qC07sjzJcrcKw11C8XsGhXsWSvo37hwCMc
qwqHNPY4w1nuJF9g4PB2B7XuMrECr+uiceVi/7qCdm8Vex0XXo90otYhKMNZ7nBXGPTC5w3ezjeA
cZ/mZnQXGnpE7JFG3ut3hibp3BUzbTnWaSk0S9AInnxL33jXd4vDn15KmuGuoEcjphRMEhMZLYum
/DnyoBTzoBTzoBT/DsQXJCWD+6cSFXMAAAAASUVORK5CYII=')
	#endregion
	$button_memory.ImageAlign = 'MiddleRight'
	$button_memory.Location = '6, 49'
	$button_memory.Name = 'button_memory'
	$button_memory.Size = '82, 24'
	$button_memory.TabIndex = 2
	$button_memory.Text = 'Memory'
	$button_memory.TextImageRelation = 'ImageBeforeText'
	$button_memory.UseVisualStyleBackColor = $True
	$button_memory.add_Click($button_memory_Click)
	#
	# button_processor
	#
	$button_processor.ForeColor = 'Black'
	#region Binary Data
	$button_processor.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAIRSURBVDhPhZNLaxNhGIWz83d00V/QdZv7
5DK5TG6Tps3MxJlkEhBB8NZFFRfWC8W0ddO0FkukblLcKbq2oIJpKlWoi7T9JeH4vh8zSZMofnA4
fO887/kOgXgAeNxz9jotLmf7/3GHE8cNKGr222XdhGaQKhZ00t+cvzPHvFjkgO+tDIplC+8/fML6
ehMvmptoNremxHP+zhzzvOc2mCuWTXQO32F+3otAIDSlYDAsfGHBJzjmeW+sQbt9MIRduQGhkIRI
JCa8/eZgusGiZmF75xX8/iD65xc47p2g0zkU3jv5gdOfv0SAJEWxvbsH5kcNdrI0qKK5sSVe8PkC
oqrX6xeBPItG40gkUojFZGxsvhQ87w0blPQaHj95hnA4gvN+H93uMXr0equ1CzmeQCqlIE2S5STW
nj4H82MNlowaVh8+QpReCAQleKkFK0SVE8k0lExOKEkhD4hjftigLM1mlgwbt+/eh0w1Ly8u8fno
CIPBAF++fkO1ZiObKyCXV0XInXsrFGCPGnQpabli48bNW0grWXqRqlJQnOryi5lsXiznC0URxBzz
vDf8DcqVOsxqQ0CTKqiLUIslIb4zx/xYAx6UyjryBOdVAh0VJsTfmWN+rIGi6h8Ns47rVh2G1YBm
NoSbVZqRrjpzzA8bOGfm974iap3uZaCFZxV2vrvzCZ8hjf6Nzpm74tcc5/MP93j+AM2X7D2jJo54
AAAAAElFTkSuQmCC')
	#endregion
	$button_processor.ImageAlign = 'MiddleRight'
	$button_processor.Location = '6, 19'
	$button_processor.Name = 'button_processor'
	$button_processor.Size = '82, 24'
	$button_processor.TabIndex = 1
	$button_processor.Text = 'CPU'
	$button_processor.TextImageRelation = 'ImageBeforeText'
	$button_processor.UseVisualStyleBackColor = $True
	$button_processor.add_Click($button_processor_Click)
	#
	# button_mainboard
	#
	$button_mainboard.ForeColor = 'Black'
	#region Binary Data
	$button_mainboard.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAKvSURBVDhPlZHLTxNRFIf5M1yrCyUtYotQ
ykMIr5pShBZI0RhdGDfGKIpSLCZGUSERrIDybAAhqBHoA2gB5U0LFGjLU0Kk0EJ1YQoIkUQ3P8/M
FIi60Um+/Oac3PnuuXcCAAQY1cJNvSoI+lw+wfsHaB2tZ75jBXoVH55pM9yODpZVewdW7O1YmSIo
mdrt6ITbaSIomffpLlbCCgy3DmPVUofugkh0PoiEPl8EnfrUPvp7IpgeRqHnSSwRQ+ui4LI2kYDP
CcYcC3hUXIGgcAneP46m1hbhIzb9uYXewhjwQiUYL5MgMCQeHmsdDHsT9A6MoLrhLWyaOPQXxVLr
C1rzQtidmWTq4adxEEZKMVMtg0AsgddSBUOeX9DVNwadeRD8sCQMFcdRy43BkiSMlMrYZOpRTQJC
T6fgo/YsQqOlWB8qh3FPYLxxCJ6eAjgqpLBoJMCPRTir5ZjRZrKJn4uwlZ2BKDYVSw1yiGJSsN7/
jAQnOIF1cg6FmhrwwiSwvUgGdmeAHScxzSXV9koZxAkKLDelQxwvh7eviI7gF5gHJtDY1ovZ2jRM
VsphfS7FMI0+XJLI5mipFHNaBSISM+FuViIiIR3eDwUkCOYE+pyjcLXnwVmbgckqBbBtox9gBTYs
XO7YMF+XAXFSFlZen6NUYr3n/oFAlxuET8ZcOGoyMVWpwMTLVDpKCmzlMjanaKr5+iy4mi9gmWDS
Y1ZDvy9QBWNZlw18o503aEcf7ewb4WCm2B7HUuN5HAtLxtq7S2x6TXd+F7h012lMJWa1GXQX6QdQ
vVCvhOvNRXxuu3yAKYcEJ/13QC9rxmvAdzt3/j/ZtcOru4Lj4anwma4iUJyGr903Ybgr4ASvsoMH
mClab/PQkhP4F0yfubDOfME+7WohWlQCNyug5wgh/H8CeL8A7J+jNx2aU/gAAAAASUVORK5CYII=')
	#endregion
	$button_mainboard.ImageAlign = 'MiddleRight'
	$button_mainboard.Location = '94, 49'
	$button_mainboard.Name = 'button_mainboard'
	$button_mainboard.Size = '94, 24'
	$button_mainboard.TabIndex = 0
	$button_mainboard.Text = 'Mainboard'
	$button_mainboard.TextImageRelation = 'ImageBeforeText'
	$button_mainboard.UseVisualStyleBackColor = $True
	$button_mainboard.add_Click($button_mainboard_Click)
	#
	# tabpage3
	#
	$tabpage3.Controls.Add($groupbox19)
	$tabpage3.ImageIndex = 2
	$tabpage3.Location = '4, 23'
	$tabpage3.Name = 'tabpage3'
	$tabpage3.Padding = '3, 3, 3, 3'
	$tabpage3.Size = '1264, 90'
	$tabpage3.TabIndex = 2
	$tabpage3.Text = 'Network'
	$tabpage3.UseVisualStyleBackColor = $True
	#
	# groupbox19
	#
	$groupbox19.Controls.Add($button_ipconfig2)
	$groupbox19.Controls.Add($button_testport)
	$groupbox19.Controls.Add($button_hosts)
	$groupbox19.Controls.Add($button_routetable)
	$groupbox19.Controls.Add($button_checkWLAN)
	$groupbox19.ForeColor = '59, 59, 59'
	$groupbox19.Location = '6, 6'
	$groupbox19.Name = 'groupbox19'
	$groupbox19.Size = '277, 78'
	$groupbox19.TabIndex = 7
	$groupbox19.TabStop = $False
	$groupbox19.Text = 'Network Settings'
	#
	# button_ipconfig2
	#
	$button_ipconfig2.ForeColor = 'Black'
	#region Binary Data
	$button_ipconfig2.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAFtSURBVDhPpVBNSwJRFO2n+EG0zz6hWoSV
YaAV9AfCTFJoERUFFbVt16JNH0gISY3OOOi6XxC0dREUViudNkGO2end65tJywzrwJl35p5zD7zX
AeBf5I+m66qiqrhMpaCk0y3JGZEVO3m7gIx2IXdqBdRKKBQeML8QQTgSg2E88xkKL6FYLAkdZY8y
BLlTK7hQFPpByTBQeatgbHwSZsXks/pexWu5LLSPPcoQ5E5jQdk04enpZ22ht29AKrBHGUJjgbwC
wel0w+FwsabT5eqU2s2eBbkjH1G8aruQO7WCs0TiKqWpSIkhU9OQzmSgZ7PQczmoGZ1nn76K82Ty
xi4QcAt6vnIxuoKhES8FvnmCXfUFTRFa3sHgaPDHQMuCx5OJ+N2RH/fHU3g69cXluAF2wfrmFiyu
bWwjtrqL28Nh4GWPSZpm5NVn7YLp4AwsBgKz8PrnkD/oxvW+h0maZuTVZ+0CgWaP9Cvtgr8THR8X
4ntqivo2yQAAAABJRU5ErkJggg==')
	#endregion
	$button_ipconfig2.Location = '6, 19'
	$button_ipconfig2.Name = 'button_ipconfig2'
	$button_ipconfig2.Size = '75, 24'
	$button_ipconfig2.TabIndex = 0
	$button_ipconfig2.Text = 'IP Config'
	$button_ipconfig2.TextImageRelation = 'ImageBeforeText'
	$button_ipconfig2.UseVisualStyleBackColor = $True
	$button_ipconfig2.add_Click($button_ipconfig2_Click)
	#
	# button_testport
	#
	$button_testport.ForeColor = 'Black'
	#region Binary Data
	$button_testport.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAADtSURBVDhP7VKxDgFRENxfoXcKhUIoREII
NR+gukT8g0aEOKcQjV6jlaAgCh2hkagUlDqFRDHeHCeSO1cQnUnmTXZ2d+5d8gTAV5R0TUBm6oKU
IX1ROPSy/V03h20nCypr+uxzzt6xAoyVoKVobgTJpkDXK9h3E8DFBM6Gpazps885znPPcYNkQ07q
Q6FFNTxcNyO4HougsqYfr8jIcQM2XqjRUPBNqsHxsh0ClfXdFr/ic94OeAd7mOoKz4B5LDiYRTUo
5W+5wjOAyygXQH1YDngGTKMBoJQH9WE58A/4dYDC88VZlQusAB6fE3IDzRkoaGqrtEwAAAAASUVO
RK5CYII=')
	#endregion
	$button_testport.Location = '196, 19'
	$button_testport.Name = 'button_testport'
	$button_testport.Size = '75, 24'
	$button_testport.TabIndex = 6
	$button_testport.Text = 'Test Port'
	$button_testport.TextImageRelation = 'ImageBeforeText'
	$button_testport.UseVisualStyleBackColor = $True
	$button_testport.add_Click($button_testport_Click)
	#
	# button_hosts
	#
	$button_hosts.ForeColor = 'Black'
	#region Binary Data
	$button_hosts.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAKBSURBVDhPjZFfSFNxFMdvLz0ICvXSy2QG
IYpQlpD2j4JKyjKKJCsfCgmit4hyuXKZ1pyZV53L0MwlKHNsLbfS6eaWZmpt1ZrbXO7OOdKVKOQ/
Civi2/1db86FQV/4wLnnnO/5Hc6l/iVhiTmORckyzQIeEpNcHN+2stiG5CT6+fTNbjOYeQsmfwzg
47cBOL8YIbEa/wxK5tsjRaYnlVtnWn3T+PzdBfesH09GF9AcMEIx9AymCQkMTDeEUtPMipsIb3c2
ijoZ2KZ+wj3fD8fXIrRPyqCf2oG6YCKOdzagwi3G9S52E7aXt4UVLzXO3mvWobxCzlGnKoaWSYci
cBgixymkqsewRdUDTeAy2WKWt4WVU9oIs8WKsfEQPENedJi6QNfnoTa0CvRIDHbr+rChwY8Cey53
WN4WllRWBq93GPqnbaArq0G+CbUhCtldD7GpKQjhAx82N2lWHiArvQvH+0FYrD0oulWCUuYg6j7F
gA7EIrNdjXilH+vuexFFO8kN5nhbWI91rXC5PXhts+NGYfES+c50SD8IcMmeitwXe7FeroUgv0XP
27jfpzyt8Sidg645m/0t7G/egfGPwOPx4mLhHWzTGFAdpFDOUMgxZXCvrzlwbueS+aTWB0PwF2SW
AFrUmpDo6jUQzhTKkVDVj7UKDy7078F+lWjRfOh8NmtdHWE+2zaBTO04BGJ1a3TakUxBvspAmsmx
ONiY5KK3H8tgzVHc61trXkWYU2pdiC3QabjpFBXXW5auH64/CgKJSY6vLWpj1csI8y7JI1wRiZdw
1+zDwmgeB4mX1wgUWSmR7kVCRR97VZUhK+sEluOoTIvg7zpZgqyUwrM8/g+olN/LfeaCXY3IuQAA
AABJRU5ErkJggg==')
	#endregion
	$button_hosts.Location = '6, 49'
	$button_hosts.Name = 'button_hosts'
	$button_hosts.Size = '75, 24'
	$button_hosts.TabIndex = 5
	$button_hosts.Text = 'Hostsfile'
	$button_hosts.TextImageRelation = 'ImageBeforeText'
	$button_hosts.UseVisualStyleBackColor = $True
	$button_hosts.add_Click($button_hosts_Click)
	#
	# button_routetable
	#
	$button_routetable.ForeColor = 'Black'
	#region Binary Data
	$button_routetable.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAJgSURBVDhPnVNdSJNRGH7v3AZtUBellTfd
hyAaQqUX0TCL6qLbbrqOrrrQfX2b+zUUlSgoSsswK7DSct82ly6IzZ+QcM5m/jBFE0dENrQiraf3
nP20QAl64OE933fO+7zPec85VOgMfDaqGvSKhgKLBp2kNxPzxjyvV3wwME2qDyKv2BMkEsn/A5PV
j33ufiK94k3/eX0MCFcDETNUbREYMjOrYdOWgeGTwOg5HK4nlCoklxutIex1DbIAWxRQeueg9s3D
oc3D419AQyCJxuAXtAyso3lwA60hoMJOiCau4yhHo20Ce1xviXSWPikQXwemvwKJH0BrYAmjySVZ
sdJBqHJyZF55RrgbIYRnVZg9hLPN9Ecg8Q1Y+A6s/AQ8z4My2R0idE0RHjA744R7McKdcRaZIPhn
zqOmiZATaHoRQ4s3jpvBZZlsGyTU+kmOs7QEOHmaMLBSjuPsgOuX5gQ+bgCfNgE2IRdf6CJc6jyC
7vCanBeosBKeLhpQxT0wWJM4k7+FFFsXS1c3f6FMTXda4BAnCUGBrBOBA47LcpwTuBWI4Xb/O3SE
EuiOrKJ3BFLoQ/IGKnihcJJl3eNKXGxPi5GuLi3ABiQFeobWUM6V4ysK2sIEhbufrS5o4e8GLSOg
zzjIx8FawpPoabSJrkcJHZN8Eu8JD7mBj2YIja/SyQLbXmXRqPaxMtyfJdS//NuB4H5XT/oUCu2+
lHxM7KSAt6Pnh7NDDcFkm8SJq4Rrw7tQw3GnfQ67neN8+8aYIyhyhFNF7jesQVQilbbhKb4souIW
cyXFngEO/0Y2YQsQ/QaNGWXFRtHxxgAAAABJRU5ErkJggg==')
	#endregion
	$button_routetable.Location = '87, 49'
	$button_routetable.Name = 'button_routetable'
	$button_routetable.Size = '103, 24'
	$button_routetable.TabIndex = 1
	$button_routetable.Text = 'Route Table'
	$button_routetable.TextImageRelation = 'ImageBeforeText'
	$button_routetable.UseVisualStyleBackColor = $True
	$button_routetable.add_Click($button_routetable_Click)
	#
	# button_checkWLAN
	#
	$button_checkWLAN.ForeColor = 'Black'
	#region Binary Data
	$button_checkWLAN.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAGoSURBVDhPlVK/SwJxHL3wV17Q5hBB/QNJ
0jmFOQVCZlpBEBRBBUF5VkMWBRW2KEgNDS1SQtCQXJbolro2Sa1BYQQ1BiVBLp8+n69fj7vAgx48
7t177/uOO04AAEELMVJeQN4h4Q+fkPO8xsDOagd4CeyLSsbqXZlFSyKanWOj9rmLVHOIlRG6AQw+
Rbn4hZIO9ZLF/U68WJHdSIk61KVMHUCjyg+7KLBHytF2uQw2TtLobVCGcIlyqYZnXrUDYJGmA5Ri
8dwSLn0LHll9BWFwecYSZiMF6ph63F4xfPuhDvCijQQ9UehyelB20D2HKPSFApThw8x4b0L2awe0
oDFTMa+sZZVLIKJeRY++A2VtSIZWAwy5qwxGDZDmtg4YtR5QMhmo3D8wkua2DsYDigI/9TojaW7r
YDiQSB7Gszd5uM4VIJE8inNbB8MBhGNpfR/cHj8VHA1LD8OBt1NfupoagZeUH97PfGlu66AObO3s
QpOb23sgR2PwfDIEUIshD5gmjzJtVx0YD01Ak8HgJAz7p+DxeAAqSYmRNHmUabvqAKLxy/6TACD8
AqxBR+NLAYUlAAAAAElFTkSuQmCC')
	#endregion
	$button_checkWLAN.Location = '87, 19'
	$button_checkWLAN.Name = 'button_checkWLAN'
	$button_checkWLAN.Size = '103, 24'
	$button_checkWLAN.TabIndex = 4
	$button_checkWLAN.Text = 'Check WLAN'
	$button_checkWLAN.TextImageRelation = 'ImageBeforeText'
	$button_checkWLAN.UseVisualStyleBackColor = $True
	$button_checkWLAN.add_Click($button_checkWLAN_Click)
	#
	# tabpage4
	#
	$tabpage4.Controls.Add($chart1)
	$tabpage4.Controls.Add($groupbox21)
	$tabpage4.Controls.Add($groupbox20)
	$tabpage4.ImageIndex = 3
	$tabpage4.Location = '4, 23'
	$tabpage4.Name = 'tabpage4'
	$tabpage4.Padding = '3, 3, 3, 3'
	$tabpage4.Size = '1264, 90'
	$tabpage4.TabIndex = 3
	$tabpage4.Text = 'Processes'
	$tabpage4.UseVisualStyleBackColor = $True
	#
	# chart1
	#
	$chart1.BorderlineDashStyle = 'Dot'
	$System_Windows_Forms_DataVisualization_Charting_ChartArea_1 = New-Object 'System.Windows.Forms.DataVisualization.Charting.ChartArea'
	$System_Windows_Forms_DataVisualization_Charting_ChartArea_1.Name = 'ChartArea1'
	[void]$chart1.ChartAreas.Add($System_Windows_Forms_DataVisualization_Charting_ChartArea_1)
	$chart1.Dock = 'Right'
	$System_Windows_Forms_DataVisualization_Charting_Legend_2 = New-Object 'System.Windows.Forms.DataVisualization.Charting.Legend'
	$System_Windows_Forms_DataVisualization_Charting_Legend_2.Enabled = $False
	$System_Windows_Forms_DataVisualization_Charting_Legend_2.Name = 'Legend1'
	[void]$chart1.Legends.Add($System_Windows_Forms_DataVisualization_Charting_Legend_2)
	$chart1.Location = '682, 3'
	$chart1.Margin = '0, 0, 0, 0'
	$chart1.Name = 'chart1'
	$chart1.Palette = 'Bright'
	$System_Windows_Forms_DataVisualization_Charting_Series_3 = New-Object 'System.Windows.Forms.DataVisualization.Charting.Series'
	$System_Windows_Forms_DataVisualization_Charting_Series_3.ChartArea = 'ChartArea1'
	$System_Windows_Forms_DataVisualization_Charting_Series_3.ChartType = 'Bar'
	$System_Windows_Forms_DataVisualization_Charting_Series_3.IsVisibleInLegend = $False
	$System_Windows_Forms_DataVisualization_Charting_Series_3.Legend = 'Legend1'
	$System_Windows_Forms_DataVisualization_Charting_Series_3.Name = 'Series1'
	[void]$chart1.Series.Add($System_Windows_Forms_DataVisualization_Charting_Series_3)
	$chart1.Size = '579, 84'
	$chart1.TabIndex = 10
	$chart1.Text = 'CPU + RAM'
	#
	# groupbox21
	#
	$groupbox21.Controls.Add($labelPleaseEnterFileExten)
	$groupbox21.Controls.Add($button_process_stop)
	$groupbox21.Controls.Add($button_process_start)
	$groupbox21.Controls.Add($textbox_Process)
	$groupbox21.ForeColor = '59, 59, 59'
	$groupbox21.Location = '507, 6'
	$groupbox21.Margin = '1, 1, 1, 1'
	$groupbox21.Name = 'groupbox21'
	$groupbox21.Size = '174, 78'
	$groupbox21.TabIndex = 8
	$groupbox21.TabStop = $False
	$groupbox21.Text = 'QueryStartStop'
	#
	# labelPleaseEnterFileExten
	#
	$labelPleaseEnterFileExten.Font = 'Microsoft Sans Serif, 6.75pt'
	$labelPleaseEnterFileExten.Location = '10, 48'
	$labelPleaseEnterFileExten.Name = 'labelPleaseEnterFileExten'
	$labelPleaseEnterFileExten.Size = '161, 27'
	$labelPleaseEnterFileExten.TabIndex = 5
	$labelPleaseEnterFileExten.Text = 'Please enter file extension e.g. .exe'
	#
	# button_process_stop
	#
	$button_process_stop.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$button_process_stop.ForeColor = 'Black'
	#region Binary Data
	$button_process_stop.Image = [System.Convert]::FromBase64String('
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
AInBlkgn/ujMAAAAAElFTkSuQmCC')
	#endregion
	$button_process_stop.Location = '129, 20'
	$button_process_stop.Margin = '1, 1, 1, 1'
	$button_process_stop.Name = 'button_process_stop'
	$button_process_stop.Size = '20, 20'
	$button_process_stop.TabIndex = 4
	$button_process_stop.UseVisualStyleBackColor = $True
	$button_process_stop.add_Click($button_process_stop_Click)
	#
	# button_process_start
	#
	$button_process_start.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$button_process_start.ForeColor = 'Black'
	#region Binary Data
	$button_process_start.Image = [System.Convert]::FromBase64String('
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')
	#endregion
	$button_process_start.Location = '151, 20'
	$button_process_start.Margin = '1, 1, 1, 1'
	$button_process_start.Name = 'button_process_start'
	$button_process_start.Size = '20, 20'
	$button_process_start.TabIndex = 3
	$button_process_start.UseVisualStyleBackColor = $True
	$button_process_start.add_Click($button_process_start_Click)
	#
	# textbox_Process
	#
	$textbox_Process.Location = '7, 20'
	$textbox_Process.Name = 'textbox_Process'
	$textbox_Process.Size = '118, 20'
	$textbox_Process.TabIndex = 0
	$textbox_Process.Text = '<Processname>'
	$textbox_Process.add_Click($textbox_Process_Click)
	$textbox_Process.add_KeyPress($textbox_Process_KeyPress)
	#
	# groupbox20
	#
	$groupbox20.Controls.Add($button_cpuram)
	$groupbox20.Controls.Add($button_taskmanager)
	$groupbox20.Controls.Add($button_process_cmd)
	$groupbox20.Controls.Add($button_process_grid)
	$groupbox20.Controls.Add($button_process_owner)
	$groupbox20.Controls.Add($button_process_100)
	$groupbox20.Controls.Add($button_proclasthour)
	$groupbox20.Controls.Add($button_process)
	$groupbox20.Font = 'Microsoft Sans Serif, 8.25pt'
	$groupbox20.ForeColor = '59, 59, 59'
	$groupbox20.Location = '6, 6'
	$groupbox20.Name = 'groupbox20'
	$groupbox20.Size = '497, 78'
	$groupbox20.TabIndex = 2
	$groupbox20.TabStop = $False
	$groupbox20.Text = 'Processes'
	#
	# button_cpuram
	#
	$button_cpuram.ForeColor = 'Black'
	#region Binary Data
	$button_cpuram.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAM1SURBVDhPldJ/TNRlHMDx68dqVm5troXl
mCzzuON+fg84OC6sEzx2gNwXOfU8OOLM1hBFi2xLQmttqYHgbLUluuk/TTet/sm54QFGxIWHCIrS
gRJRs2T89I5f03fPDq7+7tk+e/Z5/nh9fuxRAIqWlOXen+zP01sWh89TRN/ZBHzbN3EhmI/X52Z3
62dknWwk/uAPFLpLWWltZY3+PPrkL7xRoEn9OFMdTTA2TCDYI55+p7OzS9xjXA0ECfOQv0Q29BCu
dwW4NwrtHffR6I6wCCgVREJ9THxzAI/LyXz/BxSXyAzzNe6SLXw73c3RXwd4PxhBLvJw7FSY0OAU
iUmH/wMmrwUYPf427iKZR71VeIpl7vAVWzwuzj0IcPhGH3t/nsFZ6Gb/oQm6r98XQKyDRAXjbU2M
1b6Jy5kP1yrY6s4jRAOFm2XORK7wSW8f5c2z5G8sourjKdraR1BpYoD6MUYvfsfYp1txOuxwdQfy
phwGOESunMuJSAv7b9xie9Ms9pwCKj6c5uKlu6i1MSDpCf4+d5rxaie5620QLBGVbAxyAHteNscj
rbwnAM/lOWw2B2+9O83Z8yGSdJ8vApc1T3KvsYHxqhw2ZFrFCC5yHFaxg32st79B7cwVygVQ6J/D
as2mpPwBjaduo9XHAO1T/FF3kIndNl63mAWQR1aWWQCVZNoyqBOATwAO/zxm8zpcvjB19TfRGWOA
/mlGqiuZqLCQkSpBdxaZ64zcZSfpr5k5Ovsjnpu3sTXPYzRZ2Fgc5qOaHvRS7RJgWMbwLi+TuyTM
Bq34LRmkW9QMCSA5TYoC2wSQLgCNPpXs4gg793RhMP0LPMNQaS6TlWokjRJ6TCSnvspvVKCTtNQv
AVLzAmtVBjZ4I5Tu6ERKjgHGZxncnMbUXhUaZUIUMBhWRwGVVkn9XJsA+jG2LJCwJglH2QyubR1I
KUuA3/gc/fmJhPcZMKrXwq0MTCmv8CdV6Ew6vnz0C76BO1jaQakyIr+zgL2gVXRZtwg0qJfXdBS8
TGiPmvhVcYxcMpOw+kX8oTJWxa+kOnAM+cxp9Ef8vBD3EipHAG3a92KcypooIM4KEab/H4oV/wBx
dW8RUu1+OwAAAABJRU5ErkJggg==')
	#endregion
	$button_cpuram.Location = '350, 46'
	$button_cpuram.Name = 'button_cpuram'
	$button_cpuram.Size = '139, 23'
	$button_cpuram.TabIndex = 6
	$button_cpuram.Text = 'CPU+RAM Graph'
	$button_cpuram.TextImageRelation = 'ImageBeforeText'
	$button_cpuram.UseVisualStyleBackColor = $True
	$button_cpuram.add_Click($button_cpuram_Click)
	#
	# button_taskmanager
	#
	$button_taskmanager.ForeColor = 'Black'
	#region Binary Data
	$button_taskmanager.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAAeFJREFU
OE9tk00rhFEUx5/PQd5lvExhMUmSSaax8DZRiCZ5bdKMRtLUEAqZWZgsWKCwsJAipBSSZCVZ2OEz
mPWsjvmdcZ8Z5db/nvPcc87/nnvOeSxJr1QqJS+vb3L/8Cjnl9dyenYhR8cnip29fYX5xoYfMSwL
BUN8MyFD/mHx9XdJR69HWjyNUueqUVQ6yxQNTS5pa/dIdGlJSZUANg4I2kgsSygyLt5OtxIgvV1Z
HWmI1+IJ+fj8EouUufXm7kpi2wsSWQ0qGYFI1dPBuWeQzM7Py+PTs1i8CQduzw3GyQRrBiaTXxkI
zWi9lMAYcm9BRi93xRf2/5vBHwLe5Gqut9mR4YO4TB1vKjgbXQ5lbGky/P8QUGEIuv2ZDoDw7aG0
TA/KSGxOsf5+o3aCK6pLswRsztoqaY9MSMdKUG8k7Z7FgJ0ZwXXdbhnYWlBATBHpoBLQ35LyAmV2
/AYgTf8JLnMU2cCX1msXYGE4CkvzbQcyyf02OoEQojN4TK/FxgQWFOepI9LohSXZM4L5RgImUQeJ
jYIYIwHGycDYeKIpIuP/nUxm/gXGkjrg+F8mRgemhfa/wEYxIMGgP1SfT+vS6nEr0DkbmxzXt3M7
xbcJWKRDPQCEFBfgaMDMIPHJLJEfUMo7g1CmSGAAAAAASUVORK5CYII=')
	#endregion
	$button_taskmanager.Location = '350, 17'
	$button_taskmanager.Name = 'button_taskmanager'
	$button_taskmanager.Size = '139, 23'
	$button_taskmanager.TabIndex = 10
	$button_taskmanager.Text = 'Taskmanager'
	$button_taskmanager.TextImageRelation = 'ImageBeforeText'
	$button_taskmanager.UseVisualStyleBackColor = $True
	$button_taskmanager.add_Click($button_taskmanager_Click)
	#
	# button_process_cmd
	#
	$button_process_cmd.ForeColor = 'Black'
	#region Binary Data
	$button_process_cmd.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAHYSURBVDhPnZFPSJNhHMcfvdQ8JEiWHgQP
u3Ty0FEkzTkT2WaxMTHX/DMczDkQVwNdypx16VSUForgyZmHsObr69DIgxdBNw8S6hAtcWN7DUkh
L/n1+e0db3SYNb/w4fd74Pl+eOBhJc9CrHhITNwcnMMNwidT6BPS0P6H6zQHRRQNzSdKnocYK/aL
087gJsYihxgLSxjlvFuT8HY1iREFCcOcN5xXaz/wcv0n7MEoivzz7xkZZ7aOwdzLyPGtoPDFOm69
3kD5+DYMU7voCMaR65lBYOMIzPMRE19PIJWVYnL7Fwp8Ilh+/yy+7J3iwdQOWj7swf7pO5zCPnpC
B+hdjMO/lMSThTgep+leTMD1+RBh6QzX+gWwPO8sLhvqsqt9wdShqqoaFRV3UFl5FxqNFjU1tRdC
oa4i0GrvpSYJ6urqodMZoNc3ZITyl0Cna+Cv0Ci70WiGydSYEYos6JUFRpM5NfWG+zA3NuGh5RGa
LdaMUKjLrqQFra02WCwtsFrb0N7WAZvNfiEU6ioCh7MLjk4On51O1z+hpASqPvkb3W5PVlCoy/Ke
Ckh+iyISiWQFdajL8gfmuOs3DmKxrKAOdZmqJ7BEC9lU3v+D7lKHuoxHzbl9OZj6HPzNiwsq/Fta
AAAAAElFTkSuQmCC')
	#endregion
	$button_process_cmd.Location = '101, 17'
	$button_process_cmd.Name = 'button_process_cmd'
	$button_process_cmd.Size = '98, 23'
	$button_process_cmd.TabIndex = 5
	$button_process_cmd.Text = 'Commands'
	$button_process_cmd.TextImageRelation = 'ImageBeforeText'
	$button_process_cmd.UseVisualStyleBackColor = $True
	$button_process_cmd.add_Click($button_process_cmd_Click)
	#
	# button_process_grid
	#
	$button_process_grid.ForeColor = 'Black'
	#region Binary Data
	$button_process_grid.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAJBSURBVDhPhZJNTxNxEMb35sGPwcm3ROMH
8GIUW0o08irRk0JpQATRixpPLmvpbkv9Dp48gAd7aRUMEW0TY3wrrwUDLFtpwXa3tF26fZzZbYiV
JjzJL/Pf2ezszPwfIRwO7yqKAlkOQA4QHP85h0MKfI9DaBtScP2ufEDHcBA3H76YFPhjlq4XGsK6
0ifZ8X9xESFAf2Itr6xiObWGlRr2mXKsS7efwaKo6SZOuXxIG/t2vm1IhiDLMjRNw+TkFKaYqdcO
tedMWkXzHRFa3sTFW09xxu3D8dMebO9Z6BxWnA4sq4qNDbUhqFpw941hLrWD2eUM5lZ38CGVReLX
H3TfDzkFKvsWVFXD5uYWwdE5cw5WBe0DElr7JXi8Y2glrvoktA2Oo2c0pB90sJ3JHiKTzVIHFXuE
Cs28rZexuJVDIpXBzOJv3BilDngHyeQC3kQih4gQSwtJu0CJ9qbuFvBjfQdzS2m8m9fQPVIbgZXT
DeTyeh15yrFcvWP4urSO2S8pRD4m8WrmO15Of6MRJpwC1SpgGAbdu15HgXLFYhFur4QW2oGrV6SF
imihPVwboB08qBVgmWYZ5VKpDtM07Xc8QiN1spF4B/F4HLFYDNFotI63lPuc+ITLZCTWhZ4nONHc
j2Mn3fZz+72aD44SF1BzZfzc0nHOM4D5tIE0ubKDC3AHR6nF+9w2El8dm+k9xfjarmMkURSnuYjf
7z9EYNyPiaAM76Og3kVX1jUSpKtzYA90DErTAqmJOH8EZxvkCKHpL5+bBuf9xfXTAAAAAElFTkSu
QmCC')
	#endregion
	$button_process_grid.Location = '101, 46'
	$button_process_grid.Name = 'button_process_grid'
	$button_process_grid.Size = '98, 23'
	$button_process_grid.TabIndex = 4
	$button_process_grid.Text = 'Gridview'
	$button_process_grid.TextImageRelation = 'ImageBeforeText'
	$button_process_grid.UseVisualStyleBackColor = $True
	$button_process_grid.add_Click($button_process_grid_Click)
	#
	# button_process_owner
	#
	$button_process_owner.ForeColor = 'Black'
	#region Binary Data
	$button_process_owner.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAJRSURBVDhPnZLNSxRhHMfn6oLsJSvI3jTR
Vt3Vtd0dX2Zn9m1m3zd3HXfXfMtMrE51icBVsDp0qEMYHTwnEXToza1D0KVLf4EXoWv0YgQKQfJp
nlkLpIjwB995GJ7v58t35nmkxpuvNg7eqLJ/cZWG/5TwCkawUsNildmHG5x98LmmlS/2OvkPiX3B
CFaqn19lr1M//wLJUakF7HM6OXKokaZjx2lracXd0UmX9xQXfX5uyQHkoIoWDKGpKkpvn80IVnLM
V+2Xoxbc7elGDvShDWjEVJ2onuFuPAHRIGGzRNYsMlgw0aOGzewKONHUTMCCFTVCNJRGu58ksljg
SSoL8TD3zGFuF4cZGx0jnsrYzO4GLW14elX6tTRrskFi26q8bPIpGmepOMK2EeFb0mDLCBPOD9lM
nQio2wmw+mP1Zm0uxLvrGvFNleDzIvRHGJy+Alazx+kcL2M6eDttpK5inYLDeohpPdxF20cVzwcd
z2aEC3eKJN9bZrdK99McV99qVOQcff4EJ1u8NiNYyTFXC2jCjfJMJ7aSwfc9zERkBmNL5UdBxf1V
x7cRsxwqnSi2V4xgfzeQ2/3kQ3mylTyZ5SFmMrN0WOb8epTRS9OMZ6coGSNklRy9Ltlmag1+BfT4
SeppCtlhzhTGOW/O0o5MaWmSy6UZRssTmPkiqXiGgNdnMzsBtYvkdrWj9A9gWD8plzpNOVNGeR1m
yjxHeWiEwVyehJFAVaxPcrlsxj5G58Ler7JgpQPXHr1xLlTttD80t6O/7AlGsJI1zZZ69iap+Sdv
vWLTEaDnfwAAAABJRU5ErkJggg==')
	#endregion
	$button_process_owner.Location = '205, 46'
	$button_process_owner.Name = 'button_process_owner'
	$button_process_owner.Size = '139, 23'
	$button_process_owner.TabIndex = 3
	$button_process_owner.Text = 'Processes + Owner'
	$button_process_owner.TextImageRelation = 'ImageBeforeText'
	$button_process_owner.UseVisualStyleBackColor = $True
	$button_process_owner.add_Click($button_process_owner_Click)
	#
	# button_process_100
	#
	$button_process_100.ForeColor = 'Black'
	#region Binary Data
	$button_process_100.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAHSSURBVDhPpZNfb9JgFMZfRoNXc/FuIW7D
luLSQmlZBigy1Llosnmj2eKVpi18g+1LbFxzwXR309t9Li6bEkD+PJ5zJmQXJDpt+mue9/T0ec85
easA/BdLg/dBOY5zk8/nYdv2H7EsawGvC4XCjeKPW60WwjBAEARoNpuyboYhAt+HT4SkOc56Duey
kRi82n+DWn0P1doLNF7vU10K9cZLlKvPsEvU9hoSu+x2UXleE7qkc7kclG1b8MMWjk8+UUvA5y++
JH/9diVrvq6//5DYeDLBh48nxDF+jsfIGgYb2Dg8eo/pdILBYICDt+8kud8foE47M3Hcl9hFuw3M
ZnRPcd6+uK2AhohKpYrtbQvD4RCOU5TkGSXaNg83L5pjnFcq7cDzSiiXK+D2led58pKJomih4zhe
qu/iuu6twdraI2haCqPRCMmkJi97vd4ikXUikcDq6kOsrGjU7hSp1AMUi1Qtu3CZum7IwAwjSyZJ
nJ6eSSLDWtOSMM2c5PBGW1sZateBYhfTfEoGWWxuPiEDGgztmsnoSKcfC6w5pusm1tfT6HQ62Nj4
bUCPiE3mcEXcFmvHKQis5zEeHB8gOoVsEJGxcomdf8Rd+oPch6XBvwfqF+YNEga2AC2XAAAAAElF
TkSuQmCC')
	#endregion
	$button_process_100.Location = '6, 46'
	$button_process_100.Name = 'button_process_100'
	$button_process_100.Size = '89, 23'
	$button_process_100.TabIndex = 2
	$button_process_100.Text = '>100 MB'
	$button_process_100.TextImageRelation = 'ImageBeforeText'
	$button_process_100.UseVisualStyleBackColor = $True
	$button_process_100.add_Click($button_process_100_Click)
	#
	# button_proclasthour
	#
	$button_proclasthour.ForeColor = 'Black'
	#region Binary Data
	$button_proclasthour.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAMsSURBVDhPlZNfTJNXGMbfSy+93dUyL7za
zdhmYmwigpVSBKkrA1rAuYRtxo1lziwrBfknGmFhUXTV6TYoJMPZDrAg0tJN4yhFSkGrI0MXZMzO
uemk/BFF+e2czni/k/zyfu97nufJl/OdT+bP58rCgKVI8Xj5Qg4MG0/bbf1SWDggdrv/v6p6Pdf7
Wqf12jffbxEdUPQwZINZB1DOt031FLzZTa7lHJbtvcmqez3X+1qn9dqXDEh0Zz9+OvEuyxPvUbqz
E8feGD+Hl3j0B8/RvZ7rfa3Teu1L+LapN+g0waCFUvsZmj+7yeToCm0tC+w/kFDMU6eq+5sFJiNP
aW68mdRpvfbNfp8lMnPK4Hc79vHR7igjPyzScGiWyGAUFrtoqC/lScJL6McRDqqgkeCS0o3jdlSh
fXOnM0SvNXnmHrytt3Edvcfo8FWs+TbGwu0q5CKPHgRZmQsSHhzmZPMKXa0J8s0BtI/uTSIWU1C2
G3vxddymru6eOqifGI98h8VaosK8rDyMsPjgEnbXKhwdwvuuLPJSI7yRNi6W1JiIfWuv5Gd003b8
BjW1dzl1slqFXOPalV5ycu2MhnuI/drCa9XC9F+HcXqErLLNZB4VyVJIsdknhcYumg/FqK5RR851
xSQZmVbGo33q+RYT0x28XiX8Et/PlZlPqewUtjRKe/bnKsCe4ZOC9K6l8g9DVFXeIDo6pUya3xQz
ijiT8U7WqYBY3InrknB5ehc1Z4XMRvHINkNA0lNOHCsy+ynbFaLCOcXYmDb/icf7paqz+Id6WF8r
RON7cA0JJ4aF8O9WTA2CMJAmsa9T3i7b2kq+qZ+dxRf4eE+MyopbimmqnHfY/UkHGw8KkbvvcHxM
6JsyUK1ud/o+CcrcGZMsejYvc+cAH5hbKNh0jpK88+yw9Sv8vFVwEduOI6Q1qt/h7yK+mhAqAsJG
p/TpTyn33VvkH7eRufbUJ2cr1u5Nf9n1hW2Dd6nY4KF4g5eS9T4Ks+sxNglDCSvlQeHI4Rf1PXgp
Rx/i/bbkbXpVkaJYrXhB8cqz2XPS6iRQGxIMTgno3twkkgz4H2uNQofp+myJ/AtwYVJKIFClzwAA
AABJRU5ErkJggg==')
	#endregion
	$button_proclasthour.Location = '205, 17'
	$button_proclasthour.Name = 'button_proclasthour'
	$button_proclasthour.Size = '139, 23'
	$button_proclasthour.TabIndex = 1
	$button_proclasthour.Text = 'Started in Last Hour'
	$button_proclasthour.TextImageRelation = 'ImageBeforeText'
	$button_proclasthour.UseVisualStyleBackColor = $True
	$button_proclasthour.add_Click($button_proclasthour_Click)
	#
	# button_process
	#
	$button_process.ForeColor = 'Black'
	#region Binary Data
	$button_process.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAJRSURBVDhPnZLNSxRhHMfn6oLsJSvI3jTR
Vt3Vtd0dX2Zn9m1m3zd3HXfXfMtMrE51icBVsDp0qEMYHTwnEXToza1D0KVLf4EXoWv0YgQKQfJp
nlkLpIjwB995GJ7v58t35nmkxpuvNg7eqLJ/cZWG/5TwCkawUsNildmHG5x98LmmlS/2OvkPiX3B
CFaqn19lr1M//wLJUakF7HM6OXKokaZjx2lracXd0UmX9xQXfX5uyQHkoIoWDKGpKkpvn80IVnLM
V+2Xoxbc7elGDvShDWjEVJ2onuFuPAHRIGGzRNYsMlgw0aOGzewKONHUTMCCFTVCNJRGu58ksljg
SSoL8TD3zGFuF4cZGx0jnsrYzO4GLW14elX6tTRrskFi26q8bPIpGmepOMK2EeFb0mDLCBPOD9lM
nQio2wmw+mP1Zm0uxLvrGvFNleDzIvRHGJy+Alazx+kcL2M6eDttpK5inYLDeohpPdxF20cVzwcd
z2aEC3eKJN9bZrdK99McV99qVOQcff4EJ1u8NiNYyTFXC2jCjfJMJ7aSwfc9zERkBmNL5UdBxf1V
x7cRsxwqnSi2V4xgfzeQ2/3kQ3mylTyZ5SFmMrN0WOb8epTRS9OMZ6coGSNklRy9Ltlmag1+BfT4
SeppCtlhzhTGOW/O0o5MaWmSy6UZRssTmPkiqXiGgNdnMzsBtYvkdrWj9A9gWD8plzpNOVNGeR1m
yjxHeWiEwVyehJFAVaxPcrlsxj5G58Ler7JgpQPXHr1xLlTttD80t6O/7AlGsJI1zZZ69iap+Sdv
vWLTEaDnfwAAAABJRU5ErkJggg==')
	#endregion
	$button_process.Location = '6, 17'
	$button_process.Name = 'button_process'
	$button_process.Size = '89, 23'
	$button_process.TabIndex = 0
	$button_process.Text = 'Processes'
	$button_process.TextImageRelation = 'ImageBeforeText'
	$button_process.UseVisualStyleBackColor = $True
	$button_process.add_Click($button_process_Click)
	#
	# tabpage5
	#
	$tabpage5.Controls.Add($groupbox8)
	$tabpage5.Controls.Add($groupbox4)
	$tabpage5.ImageIndex = 4
	$tabpage5.Location = '4, 23'
	$tabpage5.Name = 'tabpage5'
	$tabpage5.Padding = '3, 3, 3, 3'
	$tabpage5.Size = '1264, 90'
	$tabpage5.TabIndex = 4
	$tabpage5.Text = 'Services'
	$tabpage5.UseVisualStyleBackColor = $True
	#
	# groupbox8
	#
	$groupbox8.Controls.Add($button_servicesrunning)
	$groupbox8.Controls.Add($button_services)
	$groupbox8.Controls.Add($button_servicesauto)
	$groupbox8.Controls.Add($button_servicesautostop)
	$groupbox8.Controls.Add($button_servicesnonstandard)
	$groupbox8.Font = 'Microsoft Sans Serif, 8.25pt'
	$groupbox8.ForeColor = '59, 59, 59'
	$groupbox8.Location = '3, 6'
	$groupbox8.Name = 'groupbox8'
	$groupbox8.Size = '419, 78'
	$groupbox8.TabIndex = 8
	$groupbox8.TabStop = $False
	$groupbox8.Text = 'Dienste'
	#
	# button_servicesrunning
	#
	$button_servicesrunning.ForeColor = 'Black'
	#region Binary Data
	$button_servicesrunning.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAIsSURBVDhPdVJfT9JRGOau75Hdd+FNtXVb
XfU9TJE/KmMMEUkzQpCQrVLRal20ZmHQRJHAEMgaEzQSxIox21wzY30Bnt7nBL/Q6t3eved53ud5
f+f8ztH9LyZ9fni8U2BtUX8F0NFye7wRyXAL6ibcHhwefgNri9LdvjN5LJqlFvwzQESR8MsIFl+E
MXpz/Mg1dgv37s8gFk+oSix8k33qqKdPG+BwuuIPHz9BuVJFOpND/eArynv7SKbSKH0sK5zOZFWf
Ourp6zxC1/CIq/H02SI2sm8RW1nDciyuajvJsz88MtqgnqYT/8DucKKyV8XqWhKx1QR8d4PwTgUw
JXUpElV8RXZFXcvye4DTNabIQDCI/FYRqfUNMU3DYDI/v3Dx0nVWf2Ba8exTRz19aoBsCbX6ASrV
T0hnc8jkNtX1Xbl67bJ85AwrMXn2qaOePm2A1WbHg9kQNt/lVXIHFqttzmZ3nGUlbveoo14bINHN
HLRYsVXcwfv8FuKJJHz+AOTOVSUmzz51bU97gArzkKUZjcZQEFGhsI3i9gcticmzbxoY4i2o0AbI
No9nQwvY/1zDq+UV9QZKuxXslHZVJSbPPnWiVy9WG9CrN6RCC48wMzePvn5jQ28wYXzCjS+1uqrE
/UZzk2bqBL+mr/MIXT29+jc9N/pSsj4v2U3T0fcfykzMNJoHf4pmXdbnJE8+JAmS6oUx5KzyFgZ4
5k4Vh2ua0wNOh/pqK/8ZAHS/AKdS+Ww60QpOAAAAAElFTkSuQmCC')
	#endregion
	$button_servicesrunning.Location = '5, 17'
	$button_servicesrunning.Margin = '2, 2, 2, 2'
	$button_servicesrunning.Name = 'button_servicesrunning'
	$button_servicesrunning.Size = '132, 23'
	$button_servicesrunning.TabIndex = 3
	$button_servicesrunning.Text = 'Running'
	$button_servicesrunning.TextImageRelation = 'ImageBeforeText'
	$button_servicesrunning.UseVisualStyleBackColor = $True
	$button_servicesrunning.add_Click($button_servicesrunning_Click)
	#
	# button_services
	#
	$button_services.ForeColor = 'Black'
	#region Binary Data
	$button_services.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAG6SURBVDhPpVHbSgJRFD1fE4ERRR8Vps6Y
mo7aeNccZ8x7l8cMI+itIiKiixVEPUQX0ZfMSCTqVQXpYbf3KYtIJWjDYp21z+x1NmsYAPwLLBqL
s3R2kaUyC00EqPEknYE09em+izlF637LmTS/iERV5guEjhVVA2w2iFEXqf8Xg1Z4LlZdyRc699Ua
PNUbQLyyWnjD/hbeNwca+IORB18gDHelCmzv7EIineNMmvqhiALBcJRlckssnkjz4R8GWDrrjOPi
+qYEqpbAVNgEMWmnW34hnV1Y5gPafOq3gVv2ViTXLBTPzmFtfQMiUYXzCWrqowng64841DNgZpfc
7WmrvR7Tkp29/UM4ODoFYly9aRItJUG0VLz+4KaixnsGTDWOGDEKYl2ctsKk3nBJrDeYyhhiGTO6
zecLzX4BM8klM8FsIbSnjEINzYaQqwaT+IzDV4MCRhNgTreH4YvdTXQzDieddYhRxLDV3jfgV9Jf
BmaLjcNml/hGHl+AzXp85UEB4w/43oCGiUlLLoLcN2BcvYP9J7xv9TGQObB6BmwUzHXqI8YGGhB6
BFwjTf3PR/5UPOCPI2fSWIy9A9wD+f2hDKCYAAAAAElFTkSuQmCC')
	#endregion
	$button_services.Location = '5, 44'
	$button_services.Margin = '2, 2, 2, 2'
	$button_services.Name = 'button_services'
	$button_services.Padding = '0, 0, 2, 0'
	$button_services.Size = '132, 23'
	$button_services.TabIndex = 1
	$button_services.Text = 'Services'
	$button_services.TextImageRelation = 'ImageBeforeText'
	$button_services.UseVisualStyleBackColor = $True
	$button_services.add_Click($button_services_Click)
	#
	# button_servicesauto
	#
	$button_servicesauto.ForeColor = 'Black'
	#region Binary Data
	$button_servicesauto.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAALdSURBVDhPfVHLTlNRFN0jv8APUNCxMUYS
iULAGAgJISFq4sSJI+Rhy6MtpZS2tzxLoZQS3hYMMYDUKo2WQml5VqpAQCBtQQIIQglBJo5ZnnNo
ceZO1t173bPXuvvsS/Ums4DJ3CxQ19BITRYrNTZZwDh45jx+zhHXcIgHF7E8yuCsrTdRDDg6OgbP
nMf6Tln+EOv/Z8AaRp0fRzHy3gm9VH1iMNagvaML7nGvyJyz9+f8nPfx/ksD7qbVGcb73gwgFN7E
zFwAe/sHCEW24PPPYH0jJPjM3Lw45328n+s4iDkTi8TKKsPZ4PAIZue/wD02gc/ucZE5xsa8mJsP
Yvidk4mlM97PdULLxhOFRqtDOLIJz4QPbo8XzRYbzM2tsLS0weXyYMq3iJ2tE+h1JugNdULHQTqD
EVxstdmwuLwC/9QsE9kgk5U5kpKSs2UypaOjbQDJtQT1IOGJ8SYkXQskqQGSsY6oskqPnb19hDd/
YGY+gLnAAsxmG9JTM5PYqFfSUrLudrY4kMIMNvZLUD5EqHLkQtLaUK23Xhio1Bp0dvdiIbiIYHAJ
VksPcquv/kprIKTWEVJqCPcMzOBAj9nIU6gdhGfSbWQ08/UR3eEoVaiwvPId35ZWMD25hORqws8z
G9aPs7EWzcHqYTbC0Va0zxICu89R5SJkmmiI1BotsQmouExx7nK5sbq6gfDavvjicrQAnQt0ifYv
hA6Wu74Slg5fIINNSOUVlaRQqU+7e+3Y2t7BJ/cEdrdPcZ+N7Y8+gD1E6GOwbxB6Vi5gXyPoPYSH
WpokZXkF5Re+8vfa+9HV8xqFRfKzYrkGjw3XkFpPSGc7eMSQJhH6I8wsTNB5GdeQh109QRiwSMzL
L5zOe1ngZ/UtvpMSZvLnN6AsMoHzDGby9oCJfZfi6zl8idwgZnKDIZHXJWUqKi5VQi5XQSE3IstC
lMXuawwI8WRcLAz+E+LvxMAjXicIJoLoLwYrGRa+kko1AAAAAElFTkSuQmCC')
	#endregion
	$button_servicesauto.Location = '141, 17'
	$button_servicesauto.Margin = '2, 2, 2, 2'
	$button_servicesauto.Name = 'button_servicesauto'
	$button_servicesauto.Padding = '0, 0, 2, 0'
	$button_servicesauto.Size = '132, 23'
	$button_servicesauto.TabIndex = 4
	$button_servicesauto.Text = 'Auto'
	$button_servicesauto.TextImageRelation = 'ImageBeforeText'
	$button_servicesauto.UseVisualStyleBackColor = $True
	$button_servicesauto.add_Click($button_servicesauto_Click)
	#
	# button_servicesautostop
	#
	$button_servicesautostop.ForeColor = 'Black'
	#region Binary Data
	$button_servicesautostop.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAIvSURBVDhPjVHdS5NxFH7/gUDoD2j/QHTh
nULsyroJyhC6iBKqjdmHBRF96drmR3MfTXM1bW5FXpTKsuV0frYvyrS5NZ2OgtzNoJtIdhNE8HTO
eV/XogwPPJzfOed5nvf8fq+yU7g9fdiG1vp/OFz3ggytVJxuD9byG+DMNc1qCJlqTiXsDlfw+egY
GHTe7HG64R8KIjI1LZlr6n+r4vxp0n7HOhp88hTv0xksxBLIbxSwks1hbj4mPa4XYnE5M4/5mrQS
OmtHV2lkLIRYIoWp6Cwik9MVcM19njOP+apMC1tnd01H112kV7KIzsxjgkT3vT54+rySQ+Nh6fOc
eZpMDXJkVzwcGMSbxSVZu/+BD1evXQ83Hm8ycB53nkVx+AhWX3QLb1sjBhZbJ9KZDwJe83U8SV/u
x6nTzSdovMd1vsHwOXAY+GoF52xqUrisEwOzxQaGP/AYydRbAW9w83b7MD2WPmevS34vXMI5gwmc
F3ubhM8QA4rafTqdvs1skSswojNzYvLMbsSXV41A6YoYcOZ6pPWAi3WqnMJoatlLXyy/DEewtJwW
LCdnUfAews+PZ4CiQTWgzHXBc3Br3Vn/+0/cuNWWHXg0JHcLT6h3XPM3o5w4Bnw6+Re4v9pTF9fk
inKx9XLIN+gHg1695DUbUQzogXUy0CAbVNU8py2OahaKztRyIcyg835yL/941wDk6PV3AM/zjvot
Va4G30nuRc7svisw/1/BL7wLKLW/AIvoBAk4ngJhAAAAAElFTkSuQmCC')
	#endregion
	$button_servicesautostop.ImageAlign = 'MiddleRight'
	$button_servicesautostop.Location = '277, 17'
	$button_servicesautostop.Margin = '2, 2, 2, 2'
	$button_servicesautostop.Name = 'button_servicesautostop'
	$button_servicesautostop.Padding = '0, 0, 1, 0'
	$button_servicesautostop.Size = '132, 23'
	$button_servicesautostop.TabIndex = 5
	$button_servicesautostop.Text = 'Auto and stopped'
	$button_servicesautostop.TextImageRelation = 'ImageBeforeText'
	$button_servicesautostop.UseVisualStyleBackColor = $True
	$button_servicesautostop.add_Click($button_servicesautostop_Click)
	#
	# button_servicesnonstandard
	#
	$button_servicesnonstandard.ForeColor = 'Black'
	#region Binary Data
	$button_servicesnonstandard.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAIVSURBVDhPjVPfa1JhGPYvyF11qzUoWNDN
dhvJoqt2U39AN+0iCHKR5kFNmHr0rInH4/FsTYY5deWsqRBLIx2CuxjuIgbdNCgIMvrBIoKx9Obp
fc/OhbYT7IOHh/d9nveB857vswCwDB5PWJm4Pxvv3gvEMENgds3KXU84OWFY9MNz+uxgAA2PeyMq
2p1dHPb6OPjT07nR7sAXTcEjJscNq3mAKyj33+19xKcv37G5/Rb1rR2duz/20dzqwB1M9A2reYA7
pODr/i+Uai0UNzbx7GWDuIlSvYWfvw/AumE1D/DNLWLq6hXcmLqGxytrKFEIM9fcZ92wmgc8jKUx
edmBC+fP4eLYGNZrbZ25nnQ4ECDdsJoHeCOpb9O3nbDZ7Bg5ZUWx2sCI1Qqb3Y6b03fAumE1D7h1
V4hIahaZQgXLuTKWss915pr7pEcNq3kAndMeUUVMyUBOZRFXn+g8n8hAoD7rR7b/BLhDieteUXkv
0LYjcwuQaGkisTsog/p7pF8yrMMBgpg845e0XrHSwM7uB6y8qPGlgSuY0Jlr7rPulxY+k//sUADf
stqbbazRf8+tbyBffoXVah1Pq6915pr7rNfJ9yCs0NhAQEheRrnchLqUJxSQSjNWB1DQ+4xKpXk8
IEDfqWk5PJpfRCyehkJL/BfcZ13T8rTQ5HCA0xdtCfSITgqnX2oNBdAZJfBLOylGjwJg+Qt+uCHV
V2k6OQAAAABJRU5ErkJggg==')
	#endregion
	$button_servicesnonstandard.Location = '141, 44'
	$button_servicesnonstandard.Margin = '2, 2, 2, 2'
	$button_servicesnonstandard.Name = 'button_servicesnonstandard'
	$button_servicesnonstandard.Padding = '0, 0, 1, 0'
	$button_servicesnonstandard.Size = '132, 23'
	$button_servicesnonstandard.TabIndex = 6
	$button_servicesnonstandard.Text = 'Non Standard User'
	$button_servicesnonstandard.TextImageRelation = 'ImageBeforeText'
	$button_servicesnonstandard.UseVisualStyleBackColor = $True
	$button_servicesnonstandard.add_Click($button_servicesnonstandard_Click)
	#
	# groupbox4
	#
	$groupbox4.Controls.Add($button_servicesstop)
	$groupbox4.Controls.Add($button_servicesstart)
	$groupbox4.Controls.Add($button_servicesrestart)
	$groupbox4.Controls.Add($button_servicescheck)
	$groupbox4.Controls.Add($textbox_services)
	$groupbox4.Font = 'Microsoft Sans Serif, 8.25pt'
	$groupbox4.ForeColor = '59, 59, 59'
	$groupbox4.Location = '428, 6'
	$groupbox4.Name = 'groupbox4'
	$groupbox4.Size = '219, 52'
	$groupbox4.TabIndex = 7
	$groupbox4.TabStop = $False
	$groupbox4.Text = 'QueryStartStop'
	#
	# button_servicesstop
	#
	$button_servicesstop.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$button_servicesstop.ForeColor = 'Black'
	#region Binary Data
	$button_servicesstop.Image = [System.Convert]::FromBase64String('
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
AInBlkgn/ujMAAAAAElFTkSuQmCC')
	#endregion
	$button_servicesstop.Location = '139, 20'
	$button_servicesstop.Name = 'button_servicesstop'
	$button_servicesstop.Size = '20, 20'
	$button_servicesstop.TabIndex = 4
	$button_servicesstop.UseVisualStyleBackColor = $True
	$button_servicesstop.add_Click($button_servicesstop_Click)
	#
	# button_servicesstart
	#
	$button_servicesstart.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$button_servicesstart.ForeColor = 'Black'
	#region Binary Data
	$button_servicesstart.Image = [System.Convert]::FromBase64String('
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')
	#endregion
	$button_servicesstart.Location = '165, 20'
	$button_servicesstart.Name = 'button_servicesstart'
	$button_servicesstart.Size = '20, 20'
	$button_servicesstart.TabIndex = 3
	$button_servicesstart.UseVisualStyleBackColor = $True
	$button_servicesstart.add_Click($button_servicesstart_Click)
	#
	# button_servicesrestart
	#
	$button_servicesrestart.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$button_servicesrestart.ForeColor = 'Black'
	#region Binary Data
	$button_servicesrestart.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAAAwAAAAMCAYAAABWdVznAAAABGdBTUEAALGOfPtRkwAAACBjSFJN
AACHDwAAjA8AAP1SAACBQAAAfXkAAOmLAAA85QAAGcxzPIV3AAAKOWlDQ1BQaG90b3Nob3AgSUND
IHByb2ZpbGUAAEjHnZZ3VFTXFofPvXd6oc0wAlKG3rvAANJ7k15FYZgZYCgDDjM0sSGiAhFFRJoi
SFDEgNFQJFZEsRAUVLAHJAgoMRhFVCxvRtaLrqy89/Ly++Osb+2z97n77L3PWhcAkqcvl5cGSwGQ
yhPwgzyc6RGRUXTsAIABHmCAKQBMVka6X7B7CBDJy82FniFyAl8EAfB6WLwCcNPQM4BOB/+fpFnp
fIHomAARm7M5GSwRF4g4JUuQLrbPipgalyxmGCVmvihBEcuJOWGRDT77LLKjmNmpPLaIxTmns1PZ
Yu4V8bZMIUfEiK+ICzO5nCwR3xKxRoowlSviN+LYVA4zAwAUSWwXcFiJIjYRMYkfEuQi4uUA4EgJ
X3HcVyzgZAvEl3JJS8/hcxMSBXQdli7d1NqaQffkZKVwBALDACYrmcln013SUtOZvBwAFu/8WTLi
2tJFRbY0tba0NDQzMv2qUP91829K3NtFehn4uWcQrf+L7a/80hoAYMyJarPziy2uCoDOLQDI3fti
0zgAgKSobx3Xv7oPTTwviQJBuo2xcVZWlhGXwzISF/QP/U+Hv6GvvmckPu6P8tBdOfFMYYqALq4b
Ky0lTcinZ6QzWRy64Z+H+B8H/nUeBkGceA6fwxNFhImmjMtLELWbx+YKuGk8Opf3n5r4D8P+pMW5
FonS+BFQY4yA1HUqQH7tBygKESDR+8Vd/6NvvvgwIH554SqTi3P/7zf9Z8Gl4iWDm/A5ziUohM4S
8jMX98TPEqABAUgCKpAHykAd6ABDYAasgC1wBG7AG/iDEBAJVgMWSASpgA+yQB7YBApBMdgJ9oBq
UAcaQTNoBcdBJzgFzoNL4Bq4AW6D+2AUTIBnYBa8BgsQBGEhMkSB5CEVSBPSh8wgBmQPuUG+UBAU
CcVCCRAPEkJ50GaoGCqDqqF6qBn6HjoJnYeuQIPQXWgMmoZ+h97BCEyCqbASrAUbwwzYCfaBQ+BV
cAK8Bs6FC+AdcCXcAB+FO+Dz8DX4NjwKP4PnEIAQERqiihgiDMQF8UeikHiEj6xHipAKpAFpRbqR
PuQmMorMIG9RGBQFRUcZomxRnqhQFAu1BrUeVYKqRh1GdaB6UTdRY6hZ1Ec0Ga2I1kfboL3QEegE
dBa6EF2BbkK3oy+ib6Mn0K8xGAwNo42xwnhiIjFJmLWYEsw+TBvmHGYQM46Zw2Kx8lh9rB3WH8vE
CrCF2CrsUexZ7BB2AvsGR8Sp4Mxw7rgoHA+Xj6vAHcGdwQ3hJnELeCm8Jt4G749n43PwpfhGfDf+
On4Cv0CQJmgT7AghhCTCJkIloZVwkfCA8JJIJKoRrYmBRC5xI7GSeIx4mThGfEuSIemRXEjRJCFp
B+kQ6RzpLuklmUzWIjuSo8gC8g5yM/kC+RH5jQRFwkjCS4ItsUGiRqJDYkjiuSReUlPSSXK1ZK5k
heQJyeuSM1J4KS0pFymm1HqpGqmTUiNSc9IUaVNpf+lU6RLpI9JXpKdksDJaMm4ybJkCmYMyF2TG
KQhFneJCYVE2UxopFykTVAxVm+pFTaIWU7+jDlBnZWVkl8mGyWbL1sielh2lITQtmhcthVZKO04b
pr1borTEaQlnyfYlrUuGlszLLZVzlOPIFcm1yd2WeydPl3eTT5bfJd8p/1ABpaCnEKiQpbBf4aLC
zFLqUtulrKVFS48vvacIK+opBimuVTyo2K84p6Ss5KGUrlSldEFpRpmm7KicpFyufEZ5WoWiYq/C
VSlXOavylC5Ld6Kn0CvpvfRZVUVVT1Whar3qgOqCmrZaqFq+WpvaQ3WCOkM9Xr1cvUd9VkNFw08j
T6NF454mXpOhmai5V7NPc15LWytca6tWp9aUtpy2l3audov2Ax2yjoPOGp0GnVu6GF2GbrLuPt0b
erCehV6iXo3edX1Y31Kfq79Pf9AAbWBtwDNoMBgxJBk6GWYathiOGdGMfI3yjTqNnhtrGEcZ7zLu
M/5oYmGSYtJoct9UxtTbNN+02/R3Mz0zllmN2S1zsrm7+QbzLvMXy/SXcZbtX3bHgmLhZ7HVosfi
g6WVJd+y1XLaSsMq1qrWaoRBZQQwShiXrdHWztYbrE9Zv7WxtBHYHLf5zdbQNtn2iO3Ucu3lnOWN
y8ft1OyYdvV2o/Z0+1j7A/ajDqoOTIcGh8eO6o5sxybHSSddpySno07PnU2c+c7tzvMuNi7rXM65
Iq4erkWuA24ybqFu1W6P3NXcE9xb3Gc9LDzWepzzRHv6eO7yHPFS8mJ5NXvNelt5r/Pu9SH5BPtU
+zz21fPl+3b7wX7efrv9HqzQXMFb0ekP/L38d/s/DNAOWBPwYyAmMCCwJvBJkGlQXlBfMCU4JvhI
8OsQ55DSkPuhOqHC0J4wybDosOaw+XDX8LLw0QjjiHUR1yIVIrmRXVHYqLCopqi5lW4r96yciLaI
LoweXqW9KnvVldUKq1NWn46RjGHGnIhFx4bHHol9z/RnNjDn4rziauNmWS6svaxnbEd2OXuaY8cp
40zG28WXxU8l2CXsTphOdEisSJzhunCruS+SPJPqkuaT/ZMPJX9KCU9pS8Wlxqae5Mnwknm9acpp
2WmD6frphemja2zW7Fkzy/fhN2VAGasyugRU0c9Uv1BHuEU4lmmfWZP5Jiss60S2dDYvuz9HL2d7
zmSue+63a1FrWWt78lTzNuWNrXNaV78eWh+3vmeD+oaCDRMbPTYe3kTYlLzpp3yT/LL8V5vDN3cX
KBVsLBjf4rGlpVCikF84stV2a9021DbutoHt5turtn8sYhddLTYprih+X8IqufqN6TeV33zaEb9j
oNSydP9OzE7ezuFdDrsOl0mX5ZaN7/bb3VFOLy8qf7UnZs+VimUVdXsJe4V7Ryt9K7uqNKp2Vr2v
Tqy+XeNc01arWLu9dn4fe9/Qfsf9rXVKdcV17w5wD9yp96jvaNBqqDiIOZh58EljWGPft4xvm5sU
moqbPhziHRo9HHS4t9mqufmI4pHSFrhF2DJ9NProje9cv+tqNWytb6O1FR8Dx4THnn4f+/3wcZ/j
PScYJ1p/0Pyhtp3SXtQBdeR0zHYmdo52RXYNnvQ+2dNt293+o9GPh06pnqo5LXu69AzhTMGZT2dz
z86dSz83cz7h/HhPTM/9CxEXbvUG9g5c9Ll4+ZL7pQt9Tn1nL9tdPnXF5srJq4yrndcsr3X0W/S3
/2TxU/uA5UDHdavrXTesb3QPLh88M+QwdP6m681Lt7xuXbu94vbgcOjwnZHokdE77DtTd1PuvriX
eW/h/sYH6AdFD6UeVjxSfNTws+7PbaOWo6fHXMf6Hwc/vj/OGn/2S8Yv7ycKnpCfVEyqTDZPmU2d
mnafvvF05dOJZ+nPFmYKf5X+tfa5zvMffnP8rX82YnbiBf/Fp99LXsq/PPRq2aueuYC5R69TXy/M
F72Rf3P4LeNt37vwd5MLWe+x7ys/6H7o/ujz8cGn1E+f/gUDmPP8usTo0wAAAAlwSFlzAAALDAAA
CwwBP0AiyAAAAVlJREFUKFNdkb1KA1EQhQdZZfGHXNdkN7uJC4KglVho6yNYiCBYK/gComKroMHC
B7AS0UJJEFJbWASxEEUMERuLgBjR2i5+JxAILnw7c8+cuffurBWLRUuSxOI4HiWuE6v5fP6J+Ahl
tFUY5OnP5XIL3YYpinfwAWest2C3UChcsf5ig1PiMdqlGojJM8V7xBkwcguCwLLZrE6ep96ENvmF
di+xQ5NFRJTBMpmMeZ5nvu97URStoX2DGqoytGCnaxbaWXDnFP0ErQznsGEIt1xhjpM6ZsUeBtAc
DIVhOAwTxivgWEdxjIIm1Sezmv+xCK+GucIpNyweMG4yBL9n1J0BCPJDtLqSX2jTVMM4naapCZl7
GkjjFrfZl/hDpyZwDSP6eEHeZZJ6De3FOdcpvCFsg/5DA/ZgCZbhCN6pNbj6LA2mj15BUKNGWCLW
4VOwbjDaA8zjYM45+wNkFVyX3qPSfQAAAABJRU5ErkJggg==')
	#endregion
	$button_servicesrestart.Location = '191, 20'
	$button_servicesrestart.Name = 'button_servicesrestart'
	$button_servicesrestart.Size = '20, 20'
	$button_servicesrestart.TabIndex = 2
	$button_servicesrestart.UseVisualStyleBackColor = $True
	$button_servicesrestart.add_Click($button_servicesrestart_Click)
	#
	# button_servicescheck
	#
	$button_servicescheck.ForeColor = 'Black'
	#region Binary Data
	$button_servicescheck.Image = [System.Convert]::FromBase64String('
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')
	#endregion
	$button_servicescheck.Location = '113, 20'
	$button_servicescheck.Name = 'button_servicescheck'
	$button_servicescheck.Size = '20, 20'
	$button_servicescheck.TabIndex = 1
	$button_servicescheck.UseVisualStyleBackColor = $True
	$button_servicescheck.add_Click($button_servicescheck_Click)
	#
	# textbox_services
	#
	$textbox_services.Location = '7, 20'
	$textbox_services.Name = 'textbox_services'
	$textbox_services.Size = '100, 20'
	$textbox_services.TabIndex = 0
	$textbox_services.Text = '<Service>'
	$textbox_services.add_MouseClick($textbox_services_MouseClick)
	#
	# tabpage6
	#
	$tabpage6.Controls.Add($groupbox22)
	$tabpage6.ImageIndex = 5
	$tabpage6.Location = '4, 23'
	$tabpage6.Name = 'tabpage6'
	$tabpage6.Padding = '3, 3, 3, 3'
	$tabpage6.Size = '1264, 90'
	$tabpage6.TabIndex = 5
	$tabpage6.Text = 'Harddisk'
	$tabpage6.UseVisualStyleBackColor = $True
	#
	# groupbox22
	#
	$groupbox22.Controls.Add($button_diskusage)
	$groupbox22.Controls.Add($button_deleteoffline)
	$groupbox22.Controls.Add($button_volumes)
	$groupbox22.Font = 'Microsoft Sans Serif, 8.25pt'
	$groupbox22.ForeColor = '59, 59, 59'
	$groupbox22.Location = '3, 6'
	$groupbox22.Name = 'groupbox22'
	$groupbox22.Size = '259, 81'
	$groupbox22.TabIndex = 6
	$groupbox22.TabStop = $False
	$groupbox22.Text = 'Harddisk'
	#
	# button_diskusage
	#
	$button_diskusage.ForeColor = 'Black'
	#region Binary Data
	$button_diskusage.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAJaSURBVDhPfZJLT1NRFIWZ+wPUoUChBQai
caAxRgWJylN5JBArlQKV8n4LQVGQRBR0gMiAP2AEEmKclDQFUUlDooni4xcUBiZM1Dq593zufZGK
RDzJuo+911p333VOEpCkazkr49jLTM/TRY/7h4DILmhNe8pRrmocrV6WMz3t0cOZxPJP8r0yF/wX
oGYXpKY95ShXNQmDRXcatFRAUxkmWIq9B7SnHOU6mm2DiCsF3oZhbhozdRf7fg/2aPffkJr2mJ2G
d2EcTcIgzQXV5zATg5jQM/i4Ah9ew/tXW9DntRXMwgxmcgjqCnE0CQMJCG8O1rXzWIFL2O1VmH4/
jPfBvQ7MzevYXVexGsux6oucTCLu9D8GmrBOYNcVYDdXYPf4MIMNMNolJjcwwy3Y/bWOsR28LBPk
O7uSMJhJTX6xkXOczaJTxH0FWJ1euBOEsR54JFOMtGL1+oj7i9ksOcNG7glUkzB4nnJojtUQ3x6P
8rWjgXVvGetXyoj9xrq31HnXnnJYXcDRbBtE0mVLfHkweRvCs/AlCp8kyLU3W9BQP0stLJonw1C/
O0T3HiE+7JcQOzG3NMRqrKb/hpiHVVsopO0Qr2+FONaLGWrG7qvFaqvC+leISxkemUCOcKAY01qJ
6auBoUZ4oCHKFCNtmIF6jIbbLCfRf5GljB0G0ynJ49HsLGKFp4kH5AuDAfl6G0wMwJTkMtYNw43E
g+XESs4SPZKFahIGsva3HDzgnU93heTffmqoEZdLkOocWecuoWlvPi01pFzV7DTQtU+QLMgWHN0D
2lOOckVL0i9eOH6N5N3ztgAAAABJRU5ErkJggg==')
	#endregion
	$button_diskusage.Location = '6, 19'
	$button_diskusage.Name = 'button_diskusage'
	$button_diskusage.Size = '109, 23'
	$button_diskusage.TabIndex = 0
	$button_diskusage.Text = 'Disk Usage'
	$button_diskusage.TextImageRelation = 'ImageBeforeText'
	$button_diskusage.UseVisualStyleBackColor = $True
	$button_diskusage.add_Click($button_diskusage_Click)
	#
	# button_deleteoffline
	#
	$button_deleteoffline.ForeColor = 'Black'
	#region Binary Data
	$button_deleteoffline.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAALWSURBVDhPjVNtT5JRGD6f+w0t11qtlw+l
5tByzlxvs/RDc9MPUs2t9cWtVcutP+BmH6zNtbIULZ0GKCICAr6CgAKPIPEiiiC+m6Si5gsiXp3z
uCmu2jrbtXPu+1z3/VznOuchX1o7SJ20PVUkkXfXiGWo+fYX0DzbZzzGTwQrrm6Uq2F0eOEJziOw
sIqJ+ZVDsJjl2T7jMf6xBrXiNth9U7CPToHzTsLm+RMsz/YZj/HrWxRHDZjE1c0YggsrlBAC5wnA
5j4Ci+2jIQTnl7G6FeOPdKxBraQNnfoh+GcWsRjZxPpOHGs7e4hsx7C2vcevlyJb8E//gM5gPVDA
imUqUt+mIkQklUPdP4guIwe9xYXBkXE4qNzxqTCcY7OwOCdg4DzoMduh1VshkrajTt5JalU9pEbd
z5sIrcGCvkEHjJRodU3Qwhn4JpfgmpgD5w7C5PBBb3NBR5vUyjvxWTtAvNlnifvmRUIqq0XKt58a
0KzQQUO/wHmCcPnnqIKf1P1F3rwusxOSLjPeNStR3tAqdeecJ87cFDKSl0ZIlaixdXkjSqX6INcY
IFP3QaEzQdU7hI5uM9p0RihMTuieP8VI1hnYcy5g+M5lDN9P+2DPF1APJHJoB6wIzC0hvLGNXzFg
YzeO9WicznQNIFBVgWBBBlBeCrx5AVQ8Q+Dhbb5JgonDMFhdGHIyE6f5Izj9C7AEwrAKTmL/VRFF
IeIvC7BfVgi8FsKWmwreRDW9RmaiifPyJn6n7o+FwnBTD6yhFdgykgBNE9WSMHRiWO8mg1R+FLV+
lSnR0WuiCtz8FXppYWB2Fb7pZdhnIrBnnsZeSRZ2H1/HjvAanTMRe3ID3L2rIHQkFT0qKX5f32Rh
frCHcvgT0bi6XQtNWSnG8lMQLRZgVyhAVJiO0QfpUN680nLwHAk5QXGOIvVfUGdfEnN5Atjy0sFR
KG8lt9D8KYr/Hoyc2JTGhPwGGBuwwDgyF9QAAAAASUVORK5CYII=')
	#endregion
	$button_deleteoffline.Location = '121, 48'
	$button_deleteoffline.Name = 'button_deleteoffline'
	$button_deleteoffline.Size = '131, 23'
	$button_deleteoffline.TabIndex = 3
	$button_deleteoffline.Text = 'Delete Offlinecache'
	$button_deleteoffline.TextImageRelation = 'ImageBeforeText'
	$button_deleteoffline.UseVisualStyleBackColor = $True
	$button_deleteoffline.add_Click($button_deleteoffline_Click)
	#
	# button_volumes
	#
	$button_volumes.ForeColor = 'Black'
	#region Binary Data
	$button_volumes.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAJUSURBVDhPdVPbbhJRFOXdD/DdPzDGrzG+
mPgB/oHPJtaoT00AYyWmBcsloVOoCAhth+F+GxhgpnQogVIFaoHSFnG59yQdwMtJFmHOXmvN3uuc
sQCw8Hrn8j20O72bti3PxLrpxr/ANeYwlzWGln9o45nDKyCSLCJfa0HrDqF2BivgPa4xh7msMQ3I
GVlFN5CuNJFiyH+A9rh2y2ONacDtDSczHHUHKKknSMsaiQjlJdAz15gzvJwZI5kGNqcXgaiIYkNH
pz/CxfUcP65+4nw6M8D/L67m6AzGKDVaCMaTsDmXOrC7fNiNJLAXTyGSKOIgqyBDbStHPVS0HnKV
Y4i5OmKpEr4cZhGISbC7vAsDCgTBr0mExSziaRmJQh25qo6KegqleYaC0kKyqJJxBVGpgL39FIe4
MFhbt/tfrX+Awy1AoE7EnIJC7YQ6OENd/45SvQ2JTAP0ko+eAN5YHWCNafDW7tgejK+RyFchhA/h
2gnDE4zBHxKxE07AF4zjkxChMUUyUtCfXIM1pgFdDgRprrLWQm84wXgGjG5+GWEyRjdzY+/0/BKy
1jZGYM3CgAK5DTEqUYg0ghFicxFiIr8IcZdDXDbgQAJRCaGDDJHKZoiy2l0JcT8jU9A54xhXQuQH
ge4BF/kUpGIDeRJV6e21428oUqCpkmaeAo+7YvD8xdrLjW0/vJ9jZJI32i+rHTT0PrT2kMbo0hg6
IiT2heLYcPvBGtOA1t1HT54+fm19H6Q7PuV7bt3660tkTJnDXNYsG/C6Q7hHuE948B9wjTnMJS0s
vwEsTAjkI+DtQgAAAABJRU5ErkJggg==')
	#endregion
	$button_volumes.Location = '6, 48'
	$button_volumes.Name = 'button_volumes'
	$button_volumes.Size = '109, 23'
	$button_volumes.TabIndex = 2
	$button_volumes.Text = 'Drives'
	$button_volumes.TextImageRelation = 'ImageBeforeText'
	$button_volumes.UseVisualStyleBackColor = $True
	$button_volumes.add_Click($button_volumes_Click)
	#
	# tabpage8
	#
	$tabpage8.Controls.Add($groupbox23)
	$tabpage8.ImageIndex = 6
	$tabpage8.Location = '4, 23'
	$tabpage8.Name = 'tabpage8'
	$tabpage8.Padding = '3, 3, 3, 3'
	$tabpage8.Size = '1264, 90'
	$tabpage8.TabIndex = 7
	$tabpage8.Text = 'Eventlog'
	$tabpage8.UseVisualStyleBackColor = $True
	#
	# groupbox23
	#
	$groupbox23.Controls.Add($button_eventlogmmc)
	$groupbox23.Controls.Add($button_eventlog20)
	$groupbox23.Controls.Add($button_eventlognames)
	$groupbox23.Font = 'Microsoft Sans Serif, 8.25pt'
	$groupbox23.ForeColor = '59, 59, 59'
	$groupbox23.Location = '3, 6'
	$groupbox23.Name = 'groupbox23'
	$groupbox23.Size = '228, 81'
	$groupbox23.TabIndex = 3
	$groupbox23.TabStop = $False
	$groupbox23.Text = 'Eventlog'
	#
	# button_eventlogmmc
	#
	$button_eventlogmmc.ForeColor = 'Black'
	#region Binary Data
	$button_eventlogmmc.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAGTSURBVDhPpZPJTsJQGIX7IC6MqC/gCwhB
E9yAogtBlEGMCoIKgvoiuqOSkDg9hNM7aNwYdKe0LCxDGXq850pImjgQPcmX3Paec+7fplVKpVK1
WCxCVVUUCoWBoJcZZhUu/ipmFbZRT+VnlJ9fBoJeitl+wWvlDXpVF1Sh6bqkomkSTSefe/TQS9kK
Jp1ueH1+LAZCCEfjWE9sYSeTQ2Yvj0RyG7HVNQSCy5j1L8DpmpIZW4HZasGSK8CyLHS6XbQ7HQnX
XXGP+4ReylbgdLnhm/WLU0KIxOLYSKawm80J8thMpBEV9xYDS/DOzctpKVvBd+IETdOU8GSzZaLe
aMg9W4HLPY3AUgip9DZ2M1mshCPweGbQbrVRr9dQMwS1GgzDwLuA4jfx6wRAR2D2aIqX0ITV7k3A
ghO1IC/2zh8wsn+H8UM7Ywe3fUb3bzGcu0H29F5mVJHtFwxlrxE8e8HKxc/QQy/FrCj4fIT85SOG
8ze2E7+CHnopZv//LxwfHV1xwbbiyWBIr8gwqwg5BBN/Q3F8AIYjCyDDQLmEAAAAAElFTkSuQmCC')
	#endregion
	$button_eventlogmmc.Location = '6, 19'
	$button_eventlogmmc.Name = 'button_eventlogmmc'
	$button_eventlogmmc.Size = '109, 23'
	$button_eventlogmmc.TabIndex = 0
	$button_eventlogmmc.Text = 'Eventlog (MMC)'
	$button_eventlogmmc.TextImageRelation = 'ImageBeforeText'
	$button_eventlogmmc.UseVisualStyleBackColor = $True
	$button_eventlogmmc.add_Click($button_eventlogmmc_Click)
	#
	# button_eventlog20
	#
	$button_eventlog20.ForeColor = 'Black'
	#region Binary Data
	$button_eventlog20.Image = [System.Convert]::FromBase64String('
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')
	#endregion
	$button_eventlog20.Location = '6, 48'
	$button_eventlog20.Name = 'button_eventlog20'
	$button_eventlog20.Size = '109, 23'
	$button_eventlog20.TabIndex = 1
	$button_eventlog20.Text = 'Last20'
	$button_eventlog20.TextImageRelation = 'ImageBeforeText'
	$button_eventlog20.UseVisualStyleBackColor = $True
	$button_eventlog20.add_Click($button_eventlog20_Click)
	#
	# button_eventlognames
	#
	$button_eventlognames.ForeColor = 'Black'
	#region Binary Data
	$button_eventlognames.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAJySURBVDhPnZPbTxNBFMb7ZqJ/golFMRof
fPKvMH2TXggVett2e1tqjU8GKbQSEl/URIWQaGJMNDHc2y1UWtsGCOCDyoMFCaUUsDcstUIQDeRz
ZnYbQsSY+CVfzs7ZOb85szujuNwdqZzvDEPpE3GmPXTESl8I5zpEXAyMlRR/Ey3+lyaXN1HnE1/K
JUdFV6YaWcxjlDj4WYrDxFQnvP0sxpdKFPJKLjsUbZUqslxCNF1CLL3JYmS5yPInbw5gd/+APdNO
LgTG+uVSSTVAcvUrJrNlTBHTmFwts7x3cB6nbg2RTgbYuM4fgVwqqQaYXd/C3EYF72rOfUdhj706
otNdyeMB73NVfMhX8ZF4vriN1Ldf4Cwc9PpmqFQqpH8Cdp4Hb7XCZDQeQmqAVGkbC7KXtn5ggxS4
XG6MBkO41qDBFpnjcgsIhcNoNpj+BKTLO8yZyi6+7B6g59kLcFYeBoMZj54+h5l0EwyK4B0uWDg7
DCaL9EdqgPzOHgrEm3v72CZjp8ON6ZlZPH7SC7VaB1EMQxC8mJqZQ09vH5pb5C5qgIFPOQwvFCCu
VGC38Wz1FqMZTfoWtD/oQzAkku0EwdnsMJmtMJo4CaKUAUOpHDlERUSyVTjsDqytrSO9kkEsGkVD
gxZieBzu1hvIkvxKJoO38Tj01w1QkNPFAIMEMLJYwLgMeEMKQ+Ex3PH5oNE0wkq6EjxeTERjLN/e
0SkBjrsLrS4nEskkg/gDATSqtSzv9XiQZPkY/He7pC1canudoBDaCb0XysAEdLfvo1UQYOMd4EwW
XBX8OHtvGrq2hyzP805YLDy0jU0J+h3ria/8nxX1vwFsOngCQXU3WAAAAABJRU5ErkJggg==')
	#endregion
	$button_eventlognames.Location = '121, 19'
	$button_eventlognames.Name = 'button_eventlognames'
	$button_eventlognames.Size = '98, 23'
	$button_eventlognames.TabIndex = 2
	$button_eventlognames.Text = 'LogNames'
	$button_eventlognames.TextImageRelation = 'ImageBeforeText'
	$button_eventlognames.UseVisualStyleBackColor = $True
	$button_eventlognames.add_Click($button_eventlognames_Click)
	#
	# tabpage10
	#
	$tabpage10.Controls.Add($groupbox18)
	$tabpage10.Controls.Add($groupbox17)
	$tabpage10.Font = 'Microsoft Sans Serif, 8.25pt'
	$tabpage10.ForeColor = 'ControlText'
	$tabpage10.ImageIndex = 7
	$tabpage10.Location = '4, 23'
	$tabpage10.Margin = '0, 0, 0, 0'
	$tabpage10.Name = 'tabpage10'
	$tabpage10.Padding = '3, 3, 3, 3'
	$tabpage10.Size = '1264, 90'
	$tabpage10.TabIndex = 9
	$tabpage10.Text = 'SCCM'
	$tabpage10.UseVisualStyleBackColor = $True
	#
	# groupbox18
	#
	$groupbox18.Controls.Add($buttonTSHanging)
	$groupbox18.Controls.Add($button_getsccmcache)
	$groupbox18.Controls.Add($button_getadvertisedsoftware)
	$groupbox18.Font = 'Microsoft Sans Serif, 8.25pt'
	$groupbox18.ForeColor = '59, 59, 59'
	$groupbox18.Location = '410, 6'
	$groupbox18.Name = 'groupbox18'
	$groupbox18.Size = '237, 78'
	$groupbox18.TabIndex = 7
	$groupbox18.TabStop = $False
	$groupbox18.Text = 'SCCM Client'
	#
	# buttonTSHanging
	#
	$buttonTSHanging.ForeColor = 'Black'
	#region Binary Data
	$buttonTSHanging.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAItSURBVDhPnVNdaJJhFP4uutBuuozu/KuL
3YVSeRExkDXaLvIu6O9ixYp+KOomso1K/dRdFwW1BltzFGUE5YpRa7V0MdHUtelyNTdZbk0F80Y2
n8553dRIiHbg4XkP33mec97z8UrbrK+yWzpeYrPlxX+BNayV+LDRYK3Ebhwnu31QW33Q/ANcw7Uc
rK0YqK1+uGOrcE+toH+yPvgb13Atx18GA/ESXIE8XOM14Dzwi1AQ4Jo/DJRrBufcIWjtn7BDLmP7
GnSOAHSuMHRdE4LVcgBn3Z+FhrWS8mrZIJ9OYiUzD2RTKBGKmRQKyz+Qz+awOOhArseAtJc4k8XP
hZTQsLYywcXHEWjsY9R1DFrqfMkzhXAwiCHPQ8zdMlCFA0ni10/64PePC42CDeotcSAOaJ0hDL8Z
wWzPcSB1Ho0tpwR/6z6G5963QqPgK6wbaGw+sen2wSX0x0rQ0J2DfZ1YfrYfKFyGqfW04MWnTXh3
zyI0Sou3xoD+Lxtc+5BDbwzY5RrFjFMPJNuApXbsaz4jGLNtiFh3Co2ic6hqoLrpo/FXcTtaxINp
wHPDjOJoC/D9KImO0PiHy0x5YeQAsu4T2HT9Y9XA4k1ARXtQySEccvRi4Q51mTEDMcLXg9jTdEGw
yBNmpO8aYLLdR923MN9Fo0cbgelmIE5gTtAuavMJE0LOvZC2Xnk0vP4aFbyUjveYkxvwRd6NsM1Y
QcRePTOishGTLiMkCi1BvzFI+t98rs60RYT23gAAAABJRU5ErkJggg==')
	#endregion
	$buttonTSHanging.Location = '99, 48'
	$buttonTSHanging.Name = 'buttonTSHanging'
	$buttonTSHanging.Size = '132, 23'
	$buttonTSHanging.TabIndex = 4
	$buttonTSHanging.Text = 'TS Hanging'
	$buttonTSHanging.TextImageRelation = 'ImageBeforeText'
	$buttonTSHanging.UseVisualStyleBackColor = $True
	$buttonTSHanging.add_Click($buttonTSHanging_Click)
	#
	# button_getsccmcache
	#
	$button_getsccmcache.ForeColor = 'Black'
	#region Binary Data
	$button_getsccmcache.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAGJSURBVDhPjZK7TgJBGIWtfRALC29rJSDg
pdJgT2zUQhZ8B1nAxCcwMXZAY2fslNn1hvGCiVYWNkaNJBKNrstCosLxnwGXmwt8ySQ7u/Odk5nZ
nm7RouPgozoVAA1Te1TFQWuLNL7AVscsq6sApjhp3QcSgX4Yx1P0XLBCOgaoXC5noTMnjJNZxAOD
MM/95H2K7bQNYIoL+L5DQh4g2Qfj1I/8xQLMy2Xy3toHqBH6WLyGrrpgpH2IyxLJizAzMvCTRaqy
BenfAKa4QXVIBIeEXGnmcpDO8N6S+dqWADXiAd73qdlN8lxdM8nFW5IdlsxpCBByboeah4VcaV4i
OQSYNyQ7G2SOCDhcn5bUqJcOOwld81SbR2uyfoZUuFXmiICDtUmUnzaRDDU1X63Qdo5sZY4VUHrY
QD5N9yyP1OTXPbCwy1bm/J2BxCJelB63UMjQPXM5t0uy+O9tZU79IUpM8aD8HAdetsGUzjKnPoAj
abEJaDEvgjN989V3bWkO4PBWPnrFrAMAen4B5nJpBq01bqoAAAAASUVORK5CYII=')
	#endregion
	$button_getsccmcache.Location = '6, 19'
	$button_getsccmcache.Name = 'button_getsccmcache'
	$button_getsccmcache.Size = '86, 23'
	$button_getsccmcache.TabIndex = 3
	$button_getsccmcache.Text = 'Cache Size'
	$button_getsccmcache.TextImageRelation = 'ImageBeforeText'
	$button_getsccmcache.UseVisualStyleBackColor = $True
	$button_getsccmcache.add_Click($button_getsccmcache_Click)
	#
	# button_getadvertisedsoftware
	#
	$button_getadvertisedsoftware.ForeColor = 'Black'
	#region Binary Data
	$button_getadvertisedsoftware.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAGeSURBVDhPnZBNLwNBGMfnSCQ4eLm4+QgO
4tM4Cj6BEELiLA60M7s7m9ZLaEIr6FLqLdLQROKOm3CRCFttUf6eZ1qbFCH6JL/MbDK//8z+Rcdk
6r59Ygut4x5axpO0/k75jAd22BVttNHn95Bndwb1B5/n2GFXNI8l4V09odu5QI9mLv/gwpxlh13R
MLKJWoddUV8J2Eisw5YRaLVALAY4MgoVtiDDoYD1RNw47AYBWkVw+TCF05s+YgDZm0Fa+5G57kU+
D/i5JyKH11KJAkPGqQ6w5hHLNmEmJTBbgffTngDeQeK7kXmqA4bLATvbabj2EiI6TiQQ1WtmdZ0Y
bOVCSQUppWF7yzMOu6KuEuD7Pj31GcViiXgLKNB3ofiCfOGZKCJH/+P7D8ZhN3jBXnqfbpqDple4
9nIVmnCsBVhK0wsU0rs7xjEvqCrxsVxilku8HQz4LLNAZXIXP5dIt38t8VuZlZGhHwJOjjNwrUVE
nBVEnfgXVk3BttR0exiZo0PjmIDG0aT5qGXYFe1DsQPecNp/YIddQdNJdNWG6PwAnGzfM2eNDhIA
AAAASUVORK5CYII=')
	#endregion
	$button_getadvertisedsoftware.Location = '98, 19'
	$button_getadvertisedsoftware.Name = 'button_getadvertisedsoftware'
	$button_getadvertisedsoftware.Size = '132, 23'
	$button_getadvertisedsoftware.TabIndex = 2
	$button_getadvertisedsoftware.Text = 'Advertised Software'
	$button_getadvertisedsoftware.TextImageRelation = 'ImageBeforeText'
	$button_getadvertisedsoftware.UseVisualStyleBackColor = $True
	$button_getadvertisedsoftware.add_Click($button_getadvertisedsoftware_Click)
	#
	# groupbox17
	#
	$groupbox17.Controls.Add($button_sccm_start)
	$groupbox17.Controls.Add($combobox1)
	$groupbox17.Font = 'Microsoft Sans Serif, 8.25pt'
	$groupbox17.ForeColor = '59, 59, 59'
	$groupbox17.Location = '3, 6'
	$groupbox17.Name = 'groupbox17'
	$groupbox17.Size = '401, 78'
	$groupbox17.TabIndex = 6
	$groupbox17.TabStop = $False
	$groupbox17.Text = 'SCCM Cycles'
	#
	# button_sccm_start
	#
	$button_sccm_start.ForeColor = 'Black'
	$button_sccm_start.Location = '319, 28'
	$button_sccm_start.Name = 'button_sccm_start'
	$button_sccm_start.Size = '75, 23'
	$button_sccm_start.TabIndex = 6
	$button_sccm_start.Text = 'Start'
	$button_sccm_start.UseVisualStyleBackColor = $True
	$button_sccm_start.add_Click($button_sccm_start_Click)
	#
	# combobox1
	#
	$combobox1.FormattingEnabled = $True
	$combobox1.Location = '6, 29'
	$combobox1.Name = 'combobox1'
	$combobox1.Size = '307, 21'
	$combobox1.TabIndex = 5
	#
	# tabpage11
	#
	$tabpage11.Controls.Add($button_search)
	$tabpage11.Controls.Add($textbox_search)
	$tabpage11.ImageIndex = 10
	$tabpage11.Location = '4, 23'
	$tabpage11.Name = 'tabpage11'
	$tabpage11.Padding = '3, 3, 3, 3'
	$tabpage11.Size = '1264, 90'
	$tabpage11.TabIndex = 12
	$tabpage11.Text = 'Search'
	$tabpage11.UseVisualStyleBackColor = $True
	#
	# button_search
	#
	$button_search.ForeColor = 'Black'
	#region Binary Data
	$button_search.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAMBSURBVDhPjZFbTFRXFIaXSZsYIzbxrSZt
Y/ps04SYphVnmAYZvNvnGiUB24fGtl4evEVmAGHu58yVYQQxqVdKkehQtaaC1Ypo7G2sF6RTOgMS
FI1DJKKoX/emwWB9cSV/zt5rr/Xt868tkVh8iuolFt+dF47GDwdDUaZK5/RZJJZ4oef5Ihytk1Ck
7u14fYLff/uF/8cfKhcwQ+iaSKzuZUAoEsvzBUwejY5wZfAxnx3KsL41w6ZjWTYk++kZHmdsNIeu
0bXPAcFwTMxQVLx+s/lSdzepgXE2tuXIjkD6PpzNjHEgleOrk4MKMkZ31wV0re7RvWIEIxIww+L2
+OHJU75szbEyOJMFTuHrgyUk/4bG1AiOrrvUXrjHs0cPcbl9yk54olcCRkT8AQVwmRNey1vAViP0
D22iQEGaMxC58Rjjz1Gcl3PqkjF21bj1X4jfCImY/gYxfLvFcDdQvmcOVtVs3SVc7S/DUinsG4L9
d6DpFviuj/Pk4QOqqmtwewPiURCxGyJl3nwp88zH5hayQ1tZl5hNV98nLFQAq5ZDKD+8jL0DcP/O
MBWVNVS6TKl0KwvLAiJffDNL7F7BViuksutYE5/FqV4Lp9NWOvss/NT3IR8pO9fuQnvyBFWuIKno
B3IlbhFZ6pMjnze9QVljHmvqZ3Dur1VsPvgmn9ZNZ21ixoSdAqWKlsX0XPuHHTur+PVqmkvGfC5H
bSJL1M3ns4s40/cxP/YWcuLGQn64aaEjbVNPaKPQJdwbhO+THWzb7iR5/BQDww+4ne7gYsiKLPXK
yGKPUKwKC6uFoz3zWJ14nSJlp1jlV9fOw7HDx5ZtDoKxRhr2tXH97F4YbuO8qQAq3lfK17KrIX57
8y1KG15jiU8ocsrJyTOtdmcBnXs2wnfvkDle2vqzWYSsVK+gtUINU9vZ3zuT0qZpmqyb5q71vCdV
TkO2VrjVVvJbHHaaK0podpT8VzMJ0LI75YwaKsVO6dTA5eqZpwLaq4smIJO6GC3R+xfiXSV9qL+v
ECL/Ak6IIfRrg51ZAAAAAElFTkSuQmCC')
	#endregion
	$button_search.Location = '300, 30'
	$button_search.Name = 'button_search'
	$button_search.Size = '75, 24'
	$button_search.TabIndex = 10
	$button_search.Text = 'Search'
	$button_search.TextImageRelation = 'ImageBeforeText'
	$button_search.UseVisualStyleBackColor = $True
	$button_search.add_Click($button_search_Click)
	#
	# textbox_search
	#
	$textbox_search.Location = '8, 33'
	$textbox_search.Name = 'textbox_search'
	$textbox_search.Size = '286, 20'
	$textbox_search.TabIndex = 9
	$textbox_search.Text = 'Search'
	$textbox_search.add_Click($textbox_search_Click)
	$textbox_search.add_KeyPress($textbox_search_KeyPress)
	#
	# tabpage_debug
	#
	$tabpage_debug.Controls.Add($button_getvariablesfilter)
	$tabpage_debug.Controls.Add($button_listvariables)
	$tabpage_debug.Controls.Add($textbox_debug)
	$tabpage_debug.Controls.Add($button_debug)
	$tabpage_debug.ImageIndex = 8
	$tabpage_debug.Location = '4, 23'
	$tabpage_debug.Name = 'tabpage_debug'
	$tabpage_debug.Padding = '3, 3, 3, 3'
	$tabpage_debug.Size = '1264, 90'
	$tabpage_debug.TabIndex = 11
	$tabpage_debug.Text = 'Debug'
	$tabpage_debug.UseVisualStyleBackColor = $True
	#
	# button_getvariablesfilter
	#
	$button_getvariablesfilter.ForeColor = 'Black'
	#region Binary Data
	$button_getvariablesfilter.Image = [System.Convert]::FromBase64String('
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
kJA/exyhBPX6kMwAAAAASUVORK5CYII=')
	#endregion
	$button_getvariablesfilter.Location = '145, 35'
	$button_getvariablesfilter.Name = 'button_getvariablesfilter'
	$button_getvariablesfilter.Size = '150, 24'
	$button_getvariablesfilter.TabIndex = 4
	$button_getvariablesfilter.Text = 'Get Variables (Filtered)'
	$button_getvariablesfilter.TextImageRelation = 'ImageBeforeText'
	$button_getvariablesfilter.UseVisualStyleBackColor = $True
	$button_getvariablesfilter.add_Click($button_getvariablesfilter_Click)
	#
	# button_listvariables
	#
	$button_listvariables.ForeColor = 'Black'
	#region Binary Data
	$button_listvariables.Image = [System.Convert]::FromBase64String('
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
UgjHdwaX8gf2UIwhS7FQngAAAABJRU5ErkJggg==')
	#endregion
	$button_listvariables.Location = '9, 35'
	$button_listvariables.Name = 'button_listvariables'
	$button_listvariables.Size = '130, 24'
	$button_listvariables.TabIndex = 3
	$button_listvariables.Text = 'Get Variables'
	$button_listvariables.TextImageRelation = 'ImageBeforeText'
	$button_listvariables.UseVisualStyleBackColor = $True
	$button_listvariables.add_Click($button_listvariables_Click)
	#
	# textbox_debug
	#
	$textbox_debug.AcceptsReturn = $True
	$textbox_debug.AutoCompleteMode = 'SuggestAppend'
	$textbox_debug.AutoCompleteSource = 'CustomSource'
	$textbox_debug.BackColor = 'WindowText'
	$textbox_debug.Font = 'Lucida Console, 8.25pt'
	$textbox_debug.ForeColor = 'Info'
	$textbox_debug.Location = '9, 11'
	$textbox_debug.Name = 'textbox_debug'
	$textbox_debug.Size = '512, 18'
	$textbox_debug.TabIndex = 2
	$textbox_debug.Text = '<Enter PS Command>'
	$textbox_debug.add_Click($textbox_debug_Click)
	$textbox_debug.add_KeyPress($textbox_debug_KeyPress)
	#
	# button_debug
	#
	$button_debug.ForeColor = 'Black'
	#region Binary Data
	$button_debug.Image = [System.Convert]::FromBase64String('
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
sUhhiLcHpfwD8w947NiC0pEAAAAASUVORK5CYII=')
	#endregion
	$button_debug.Location = '527, 6'
	$button_debug.Name = 'button_debug'
	$button_debug.Size = '75, 24'
	$button_debug.TabIndex = 1
	$button_debug.Text = 'Run'
	$button_debug.TextImageRelation = 'ImageBeforeText'
	$button_debug.UseVisualStyleBackColor = $True
	$button_debug.add_Click($button_debug_Click)
	#
	# statusbar1
	#
	$statusbar1.Location = '0, 853'
	$statusbar1.Name = 'statusbar1'
	$statusbar1.Padding = '3, 0, 0, 0'
	$statusbar1.Size = '1272, 20'
	$statusbar1.TabIndex = 7
	$statusbar1.Text = 'statusbar1'
	#
	# toolstrip1
	#
	$toolstrip1.BackgroundImageLayout = 'None'
	$toolstrip1.GripMargin = '0, 0, 0, 0'
	$toolstrip1.GripStyle = 'Hidden'
	[void]$toolstrip1.Items.Add($textbox_computername)
	[void]$toolstrip1.Items.Add($toolstripseparator11)
	[void]$toolstrip1.Items.Add($button_Check)
	[void]$toolstrip1.Items.Add($toolstriplabel2)
	[void]$toolstrip1.Items.Add($toolstripseparator12)
	[void]$toolstrip1.Items.Add($textbox_username)
	[void]$toolstrip1.Items.Add($toolstripseparator10)
	[void]$toolstrip1.Items.Add($button_GetPC)
	[void]$toolstrip1.Items.Add($toolstripseparator4)
	[void]$toolstrip1.Items.Add($Toolstrip_os)
	[void]$toolstrip1.Items.Add($Toolstrip_OSStatus)
	[void]$toolstrip1.Items.Add($toolstripseparator2)
	[void]$toolstrip1.Items.Add($toolstrip_home)
	[void]$toolstrip1.Items.Add($toolstrip_home_status)
	[void]$toolstrip1.Items.Add($toolstripseparator1)
	[void]$toolstrip1.Items.Add($toolstrip_user)
	[void]$toolstrip1.Items.Add($toolstrip_user_status)
	$toolstrip1.Location = '0, 24'
	$toolstrip1.Name = 'toolstrip1'
	$toolstrip1.Padding = '5, 0, 5, 0'
	$toolstrip1.RenderMode = 'Professional'
	$toolstrip1.Size = '1272, 26'
	$toolstrip1.TabIndex = 6
	$toolstrip1.Text = 'toolstrip1'
	#
	# menustrip1
	#
	[void]$menustrip1.Items.Add($FileToolStripMenuItem)
	[void]$menustrip1.Items.Add($toolstripmenuitem1)
	$menustrip1.Location = '0, 0'
	$menustrip1.Name = 'menustrip1'
	$menustrip1.Padding = '5, 2, 0, 2'
	$menustrip1.RenderMode = 'Professional'
	$menustrip1.Size = '1272, 24'
	$menustrip1.TabIndex = 0
	$menustrip1.Text = 'menustrip1'
	#
	# toolstriplabel2
	#
	$toolstriplabel2.Name = 'toolstriplabel2'
	$toolstriplabel2.Size = '0, 23'
	#
	# FileToolStripMenuItem
	#
	[void]$FileToolStripMenuItem.DropDownItems.Add($toolsToolStripMenuItem)
	[void]$FileToolStripMenuItem.DropDownItems.Add($optionsToolStripMenuItem)
	[void]$FileToolStripMenuItem.DropDownItems.Add($quitToolStripMenuItem)
	$FileToolStripMenuItem.Name = 'FileToolStripMenuItem'
	$FileToolStripMenuItem.Size = '46, 20'
	$FileToolStripMenuItem.Text = 'Datei'
	#
	# button_Check
	#
	$button_Check.BackColor = 'Transparent'
	$button_Check.BackgroundImageLayout = 'None'
	$button_Check.ForeColor = 'Desktop'
	#region Binary Data
	$button_Check.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAG0SURBVDhPxVJtK0NhGN6P8Q8kYdsh8xd8ky/4
QGos2WjvK4pIfJRpFMU2Lzsv28hstlrblCLCVpLVDGOW1w+X5znbULPxzVV3p3Oe+7rvc13PJfkX
2OatCIXCrsJrZTQaOcj1LGSk6vQC7Iuz2I9GoepTotBSHpQYuAaEC2AtDqycATU6N7SqHkquzneV
QZOJh+2cEAYdWDh8g8b3BKU3h+nYM+Tmrd+3yww8rJEMxmNArdqOsdAduvl7GH03oMMLbaWgh1I9
h6M9AfU6FiP+dEKz+4qGIScG3Eko2SSazWUGUM3WU2Dp6DFep3WJOhnyzbKdSnTxD2B0G2hfvUCL
RSgdQN0OpqlmO0YjwEQwnaBkclQtJc+pYAqtzltCFreXGsgYWDiJaUvH76LmYf8rBj2XCfpXJ0E3
GKMARX7zz+7LDRzmDl6g9b9gJpIlmh3o8eTQsRyPN5o+ieWvrt7gxmQ4B7V4XVkYd9JgtOto28wU
N1eGgySsloRERRzv9WTRyWXQy15BkXe8cmhotmk8acIYsxfN5CoVZq7odmUyhYsXAqp+MdtFnd/r
T6gi9efmL0gkHz/KK4p1BUlkAAAAAElFTkSuQmCC')
	#endregion
	$button_Check.ImageAlign = 'MiddleRight'
	$button_Check.ImageTransparentColor = 'White'
	$button_Check.Name = 'button_Check'
	$button_Check.Size = '60, 23'
	$button_Check.Text = 'Check'
	$button_Check.TextImageRelation = 'TextBeforeImage'
	$button_Check.add_Click($button_check_click)
	#
	# toolstripmenuitem1
	#
	[void]$toolstripmenuitem1.DropDownItems.Add($aboutToolStripMenuItem)
	$toolstripmenuitem1.Name = 'toolstripmenuitem1'
	$toolstripmenuitem1.Size = '24, 20'
	$toolstripmenuitem1.Text = '?'
	#
	# aboutToolStripMenuItem
	#
	$aboutToolStripMenuItem.Name = 'aboutToolStripMenuItem'
	$aboutToolStripMenuItem.Size = '152, 22'
	$aboutToolStripMenuItem.Text = 'About'
	$aboutToolStripMenuItem.add_Click($aboutToolStripMenuItem_Click)
	#
	# textbox_username
	#
	$textbox_username.Name = 'textbox_username'
	$textbox_username.Size = '100, 26'
	$textbox_username.Text = 'Username'
	$textbox_username.TextBoxTextAlign = 'Center'
	$textbox_username.add_KeyPress($textbox_username_KeyPress)
	#
	# button_GetPC
	#
	$button_GetPC.DisplayStyle = 'Text'
	#region Binary Data
	$button_GetPC.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAIDSURBVDhPpZLrS5NhGMb3j4SWh0oRQVExD4go
nkDpg4hGYKxG6WBogkMZKgPNCEVJFBGdGETEvgwyO9DJE5syZw3PIlPEE9pgBCLZ5XvdMB8Ew8gX
bl54nuf63dd90OGSnwCahxbPRNPAPMw9Xpg6ZmF46kZZ0xSKzJPIrhpDWsVnpBhGkKx3nAX8Pv7z
1zg8OoY/cITdn4fwbf/C0kYAN3Ma/w3gWfZL5kzTKBxjWyK2DftwI9tyMYCZKXbNHaD91bLYJrDX
sYbrWfUKwJrPE9M2M1OcVzOOpHI7Jr376Hi9ogHqFIANO0/MmmmbmSmm9a8ze+I4MrNWAdjtoJgW
cx+PSzg166yZZ8xM8XvXDix9c4jIqFYAjoriBV9AhEPv1mH/sonogha0afbZMMZz+yreTGyhpusH
wtNNCsA5U1zS4BLxzJIfg299qO32Ir7UJtZfftyATqeT+8o2D8JSjQrAJblrncYL7ZJ2+bfaFnC/
1S1NjL3diRat7qrO7wLRP3HjWsojBeComDEo5mNjuweFGvjWg2EBhCbpkW78htSHHwRyNdmgAFzP
Eee2iFkzayy2OLXzT4gr6UdUnlXrullsxxQ+kx0g8BTA3aZlButjSTyjODq/WcQcW/B/Je4OQhLv
KQDnzN1mp0nnkvAhR8VuMzNrpm1mpjgkoVwB/v8DTgDQASA1MVpwzwAAAABJRU5ErkJggg==')
	#endregion
	$button_GetPC.ImageTransparentColor = 'Magenta'
	$button_GetPC.Name = 'button_GetPC'
	$button_GetPC.Size = '47, 23'
	$button_GetPC.Text = 'Get PC'
	$button_GetPC.add_Click($button_GetPC_Click)
	#
	# toolstripseparator10
	#
	$toolstripseparator10.Name = 'toolstripseparator10'
	$toolstripseparator10.Size = '6, 26'
	#
	# quitToolStripMenuItem
	#
	$quitToolStripMenuItem.Name = 'quitToolStripMenuItem'
	$quitToolStripMenuItem.Size = '152, 22'
	$quitToolStripMenuItem.Text = 'Beenden'
	$quitToolStripMenuItem.add_Click($quitToolStripMenuItem_Click)
	#
	# toolstripseparator4
	#
	$toolstripseparator4.Name = 'toolstripseparator4'
	$toolstripseparator4.Size = '6, 26'
	#
	# toolsToolStripMenuItem
	#
	[void]$toolsToolStripMenuItem.DropDownItems.Add($aDExplorerToolStripMenuItem)
	[void]$toolsToolStripMenuItem.DropDownItems.Add($nirLauncherToolStripMenuItem1)
	[void]$toolsToolStripMenuItem.DropDownItems.Add($procexpToolStripMenuItem)
	[void]$toolsToolStripMenuItem.DropDownItems.Add($procmonToolStripMenuItem)
	#region Binary Data
	$toolsToolStripMenuItem.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAKmSURBVDhPpZJZSJRRFIBvWmmmhr2YplAT
CCW0UikkURG+JVFptEAkJpGYiDMu45qmaWZoLhDVQ76UFEN7zjhaYpYNmgsY2Kg1Lo1jpWkiFvR1
f39UDB+CDnw/h3PP/bj33F8A/4X6kVF889bTlPwC9IVF6K9cXRi5pvTI3ifTm5SYEVy+Z1CSbf9C
odqrhiJ44SKq6mRa6yQwL5YsmU+trNU5C+plT4OkUfJKiI5ZgdlFMFheQrcuVhJHd2IcPUnx9CSr
9OrO050Qy82yCvTF5aSVVFASc049xYxgqLyYppXONHkI3q4QWLxdsfi6Y/Fxo9nLiRuHwqh5Y2F8
6id9Qw5evm4iu+DKb1XgJjBK1/NpHxha2zHJ3LhIrXedjiA+9zK2QTuGh4/JuVRIanYeWbn56lPU
uAr6z57AnniOPkXQ0oYjJRZ7ppah9Hi+aaPR5RXQ2WXlRX0jurQMHAf3qUNXBKalgpHrxXRpPDH7
ulLr54Y1YCU9AV7YNMsZ8BbcefyMLmsPLe/aiNMmo03NRJ+ZrZ5gWpCbRO/GVXza4odtqx8Dm30Y
DfTk8JmLZCcXYetsp7WtnY7O93z5Pob96wiJqenqDIxyiCPaSPp2+NMftAb7Tn8mtnhxPPoCLqVW
Xk1AzDMbNbdvEK1L4UxyBlkR4XNXMMoZjEaFMbRLw3DIOiaCVnMiJo9lpR9o+QHbK/vZ/2iMk1EZ
/Nq0gqlje7BGHpt7xhr5CpNHQxgP3cBE6HrYvRqna520TUJwpY0DD4YJvv+ZUwlF/N67lqkjwZjk
zzUrMHmIMUVilJjlaSyy7FHWwe4qB4ceONh79yPhR87TLOt18rpKr8ldjM0KZGyWzPvfl+cYq9cV
NRBY0ohXmqH673WJsmdWsFBoJDPNSr5ACPEHYgQRrGo3yQQAAAAASUVORK5CYII=')
	#endregion
	$toolsToolStripMenuItem.Name = 'toolsToolStripMenuItem'
	$toolsToolStripMenuItem.Size = '152, 22'
	$toolsToolStripMenuItem.Text = 'Tools'
	#
	# aDExplorerToolStripMenuItem
	#
	$aDExplorerToolStripMenuItem.Name = 'aDExplorerToolStripMenuItem'
	$aDExplorerToolStripMenuItem.Size = '152, 22'
	$aDExplorerToolStripMenuItem.Text = 'ADExplorer'
	$aDExplorerToolStripMenuItem.add_Click($aDExplorerToolStripMenuItem_Click)
	#
	# procexpToolStripMenuItem
	#
	$procexpToolStripMenuItem.Name = 'procexpToolStripMenuItem'
	$procexpToolStripMenuItem.Size = '152, 22'
	$procexpToolStripMenuItem.Text = 'Procexp'
	$procexpToolStripMenuItem.add_Click($procexpToolStripMenuItem_Click)
	#
	# procmonToolStripMenuItem
	#
	$procmonToolStripMenuItem.Name = 'procmonToolStripMenuItem'
	$procmonToolStripMenuItem.Size = '152, 22'
	$procmonToolStripMenuItem.Text = 'Procmon'
	$procmonToolStripMenuItem.add_Click($procmonToolStripMenuItem_Click)
	#
	# nirLauncherToolStripMenuItem1
	#
	$nirLauncherToolStripMenuItem1.Name = 'nirLauncherToolStripMenuItem1'
	$nirLauncherToolStripMenuItem1.Size = '152, 22'
	$nirLauncherToolStripMenuItem1.Text = 'NirLauncher'
	$nirLauncherToolStripMenuItem1.add_Click($nirLauncherToolStripMenuItem1_Click)
	#
	# optionsToolStripMenuItem
	#
	$optionsToolStripMenuItem.Name = 'optionsToolStripMenuItem'
	$optionsToolStripMenuItem.Size = '152, 22'
	$optionsToolStripMenuItem.Text = 'Optionen'
	$optionsToolStripMenuItem.add_Click($optionsToolStripMenuItem_Click)
	#
	# textbox_computername
	#
	$textbox_computername.AcceptsReturn = $True
	$textbox_computername.AcceptsTab = $True
	$textbox_computername.AutoCompleteMode = 'SuggestAppend'
	$textbox_computername.AutoCompleteSource = 'CustomSource'
	$textbox_computername.BackColor = '255, 203, 26'
	$textbox_computername.BorderStyle = 'FixedSingle'
	$textbox_computername.CharacterCasing = 'Upper'
	$textbox_computername.Font = 'Consolas, 12pt'
	$textbox_computername.Name = 'textbox_computername'
	$textbox_computername.Size = '150, 26'
	$textbox_computername.Text = 'LOCALHOST'
	$textbox_computername.TextBoxTextAlign = 'Center'
	$textbox_computername.ToolTipText = 'Geben Sie einen Computernamen ein'
	$textbox_computername.add_KeyPress($textbox_computername_KeyPress)
	$textbox_computername.add_TextChanged($textbox_computername_TextChanged)
	#
	# Toolstrip_os
	#
	$Toolstrip_os.Font = 'Segoe UI, 9pt, style=Bold'
	$Toolstrip_os.Name = 'Toolstrip_os'
	$Toolstrip_os.Size = '0, 23'
	#
	# Toolstrip_OSStatus
	#
	$Toolstrip_OSStatus.Name = 'Toolstrip_OSStatus'
	$Toolstrip_OSStatus.Size = '0, 23'
	#
	# toolstrip_home
	#
	$toolstrip_home.Font = 'Segoe UI, 9pt, style=Bold'
	$toolstrip_home.Name = 'toolstrip_home'
	$toolstrip_home.Size = '0, 23'
	#
	# toolstrip_home_status
	#
	$toolstrip_home_status.Name = 'toolstrip_home_status'
	$toolstrip_home_status.Size = '0, 23'
	$toolstrip_home_status.add_Click($toolstrip_home_status_Click)
	#
	# toolstrip_user
	#
	$toolstrip_user.Font = 'Segoe UI, 9pt, style=Bold'
	$toolstrip_user.Name = 'toolstrip_user'
	$toolstrip_user.Size = '0, 23'
	#
	# toolstrip_user_status
	#
	$toolstrip_user_status.Name = 'toolstrip_user_status'
	$toolstrip_user_status.Size = '0, 23'
	$toolstrip_user_status.add_Click($toolstrip_user_status_Click)
	#
	# toolstripseparator2
	#
	$toolstripseparator2.Name = 'toolstripseparator2'
	$toolstripseparator2.Size = '6, 26'
	$toolstripseparator2.Visible = $False
	#
	# toolstripseparator1
	#
	$toolstripseparator1.Name = 'toolstripseparator1'
	$toolstripseparator1.Size = '6, 26'
	$toolstripseparator1.Visible = $False
	#
	# toolstripseparator11
	#
	$toolstripseparator11.Name = 'toolstripseparator11'
	$toolstripseparator11.Size = '6, 26'
	#
	# toolstripseparator12
	#
	$toolstripseparator12.Name = 'toolstripseparator12'
	$toolstripseparator12.Size = '6, 26'
	#
	# imagelist1
	#
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	#region Binary Data
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAu
MC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAA
ACZTeXN0ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkD
AAAADwMAAACyFgAAAk1TRnQBSQFMAgEBCwEAAZABAQGQAQEBEAEAARABAAT/AQkBAAj/AUIBTQE2
AQQGAAE2AQQCAAEoAwABQAMAATADAAEBAQABCAYAAQwYAAGAAgABgAMAAoABAAGAAwABgAEAAYAB
AAKAAgADwAEAAcAB3AHAAQAB8AHKAaYBAAEzBQABMwEAATMBAAEzAQACMwIAAxYBAAMcAQADIgEA
AykBAANVAQADTQEAA0IBAAM5AQABgAF8Af8BAAJQAf8BAAGTAQAB1gEAAf8B7AHMAQABxgHWAe8B
AAHWAucBAAGQAakBrQIAAf8BMwMAAWYDAAGZAwABzAIAATMDAAIzAgABMwFmAgABMwGZAgABMwHM
AgABMwH/AgABZgMAAWYBMwIAAmYCAAFmAZkCAAFmAcwCAAFmAf8CAAGZAwABmQEzAgABmQFmAgAC
mQIAAZkBzAIAAZkB/wIAAcwDAAHMATMCAAHMAWYCAAHMAZkCAALMAgABzAH/AgAB/wFmAgAB/wGZ
AgAB/wHMAQABMwH/AgAB/wEAATMBAAEzAQABZgEAATMBAAGZAQABMwEAAcwBAAEzAQAB/wEAAf8B
MwIAAzMBAAIzAWYBAAIzAZkBAAIzAcwBAAIzAf8BAAEzAWYCAAEzAWYBMwEAATMCZgEAATMBZgGZ
AQABMwFmAcwBAAEzAWYB/wEAATMBmQIAATMBmQEzAQABMwGZAWYBAAEzApkBAAEzAZkBzAEAATMB
mQH/AQABMwHMAgABMwHMATMBAAEzAcwBZgEAATMBzAGZAQABMwLMAQABMwHMAf8BAAEzAf8BMwEA
ATMB/wFmAQABMwH/AZkBAAEzAf8BzAEAATMC/wEAAWYDAAFmAQABMwEAAWYBAAFmAQABZgEAAZkB
AAFmAQABzAEAAWYBAAH/AQABZgEzAgABZgIzAQABZgEzAWYBAAFmATMBmQEAAWYBMwHMAQABZgEz
Af8BAAJmAgACZgEzAQADZgEAAmYBmQEAAmYBzAEAAWYBmQIAAWYBmQEzAQABZgGZAWYBAAFmApkB
AAFmAZkBzAEAAWYBmQH/AQABZgHMAgABZgHMATMBAAFmAcwBmQEAAWYCzAEAAWYBzAH/AQABZgH/
AgABZgH/ATMBAAFmAf8BmQEAAWYB/wHMAQABzAEAAf8BAAH/AQABzAEAApkCAAGZATMBmQEAAZkB
AAGZAQABmQEAAcwBAAGZAwABmQIzAQABmQEAAWYBAAGZATMBzAEAAZkBAAH/AQABmQFmAgABmQFm
ATMBAAGZATMBZgEAAZkBZgGZAQABmQFmAcwBAAGZATMB/wEAApkBMwEAApkBZgEAA5kBAAKZAcwB
AAKZAf8BAAGZAcwCAAGZAcwBMwEAAWYBzAFmAQABmQHMAZkBAAGZAswBAAGZAcwB/wEAAZkB/wIA
AZkB/wEzAQABmQHMAWYBAAGZAf8BmQEAAZkB/wHMAQABmQL/AQABzAMAAZkBAAEzAQABzAEAAWYB
AAHMAQABmQEAAcwBAAHMAQABmQEzAgABzAIzAQABzAEzAWYBAAHMATMBmQEAAcwBMwHMAQABzAEz
Af8BAAHMAWYCAAHMAWYBMwEAAZkCZgEAAcwBZgGZAQABzAFmAcwBAAGZAWYB/wEAAcwBmQIAAcwB
mQEzAQABzAGZAWYBAAHMApkBAAHMAZkBzAEAAcwBmQH/AQACzAIAAswBMwEAAswBZgEAAswBmQEA
A8wBAALMAf8BAAHMAf8CAAHMAf8BMwEAAZkB/wFmAQABzAH/AZkBAAHMAf8BzAEAAcwC/wEAAcwB
AAEzAQAB/wEAAWYBAAH/AQABmQEAAcwBMwIAAf8CMwEAAf8BMwFmAQAB/wEzAZkBAAH/ATMBzAEA
Af8BMwH/AQAB/wFmAgAB/wFmATMBAAHMAmYBAAH/AWYBmQEAAf8BZgHMAQABzAFmAf8BAAH/AZkC
AAH/AZkBMwEAAf8BmQFmAQAB/wKZAQAB/wGZAcwBAAH/AZkB/wEAAf8BzAIAAf8BzAEzAQAB/wHM
AWYBAAH/AcwBmQEAAf8CzAEAAf8BzAH/AQAC/wEzAQABzAH/AWYBAAL/AZkBAAL/AcwBAAJmAf8B
AAFmAf8BZgEAAWYC/wEAAf8CZgEAAf8BZgH/AQAC/wFmAQABIQEAAaUBAANfAQADdwEAA4YBAAOW
AQADywEAA7IBAAPXAQAD3QEAA+MBAAPqAQAD8QEAA/gBAAHwAfsB/wEAAaQCoAEAA4ADAAH/AgAB
/wMAAv8BAAH/AwAB/wEAAf8BAAL/AgAD/wIAAfMLAAHzAwAB/w3zAf8DAAH0AfMB9BsAAesB/wIA
Af8B9AHzAfQB/wIAAf8B6wMAAbwBRgFMAQ8BWAEPAXkBDwGdAZEBswEPAqcBvAMAAXMBLgFzBgAD
8xIAAeoB8QH/AfMBvAFLASQBSwG8AfMB/wHxAeoDAAElAUYBTQERAVkBQwF+AUMBwQG6AdoBEQHm
AacBhgMAAS4BNgEvAfMB9AMAAfMBUQFLAVEB8xEAAhIB8wEqASQBKwEkASsCJAHzAhIDAAElAUwB
TQERAVkBQwF+AREBwQG6AdoBEQHOAc8BhgPzAS4BVwEvAS4BeAPzAVIBdAFTARoBUhEAAfEBSgEk
ATEBKgFSASQBUgEkASsBJAFKAfEDAAElARcBTQERAVkBQwF+AUMBwQG6AdoBEQHOAc8BhgEvAy4B
WAEvAi4BUALsAe0B9wGZAcMBUhIAASoBKwFSASsBUwEkAVMBKgFSAioEAAElAW8BTQFDAVkBFQF+
ARUBwQG6AdoBQwHOAc8BhgEuB1gBLgH0Ae8B7AHvAfMBGgFSEgABJAFMAXoBTAF6ASQBegFMAXoB
TAEkBAABJQFvAU0BFQFZARUBfgEVAcEBugHaARUBzgHPAYYBHAMvAXkBUAIvAi4BUAHxAewB8AFS
EQAB8wH0ASQBUgGaAVIBmgElAZoBUgGaAVIBJAH0AfMCAAElARYBTQEVAVkBFAF+ARQBwQG6AdoB
FQHmAbUBhgIAAi4BeQEvBFgBLgEZAe8B7BIAAesB9wEkAXUBmgJMASsCTAGaAXQBJAH3AesCAAEl
AZQBTQEUAXoBFAF+ARQBwQG6AdsBFAHmAbUBhgIAAVABLgF+AS8BeQMuAVAB3AH0AewSAAHxAW0B
JAIrAXQDegF0AUwBKwEkAW0B8QIAASUBlAHjARQBegETAX4BFAHBAboB2wEUAeYBtQGGAgAB7QFQ
Ai4BeQEuAuEC3AH/AewTAAH/ASQDegNTA3oBJAH/AwABJQEaAXUBEwF6ARIBnwETAcEBugHbARMB
5gEJAYYCAAHtAf8B1QEuAX4BLgEJA9wB/wHsEwABvAEjAUwHUgErASMBvAMAASUBGgF1ARIBegES
AZ8BEgHBAbsB2wETAdUBvAGGAgAB7AH/AdUCLgFQAQkD3AH2AewTAAISAUsBKgUrASoBSwISAwAB
JQG9AXUBEgF6ARIBnwESAcEBuwHbARIB1QHxAYYCAAEHAbwBGQHbAfQCGQEJAboBGQG8AQcTAAFt
AgABvAFLAiQBIwFLAbwCAAFtAwABJQEaAXUBEgF6ARIBnwESAcEBuwHbARIB1gHyAYYCAAH/Ae0B
/wEZArQCugEZAf8B7QH/EwAB6wMAARMB9wHsAeoBEQMAAesDAAElARoB9AG8AfYBvAH2AbwC/wH0
AbwB9AHdAYYDAAH/AZIBvAT/AbwB7QH/GAAB9wEUARUBQwH3BwABGwElAUwB6gFSAeoBVwHqAZ0B
kAGzARIBpwGGAfEEAAH/AbwE7QG8Af8dAAH/AbwB8AHyAQcB/wMAAf8B9AjzAfQB/wIAAfQO8wH0
AQABvAGLCoYBiwG8AfQIAAH/AfMB7AETAeoB7AHyAf8BAAH/AfAB7AEUBkMBFAHsAfAB/wEAAQcO
9wEHAbwBtAGuAc8BrgGLAa4CtAWLAbQBBwgAAbwB7AHqAuwBbQHsAQcBAAHvARUBEgHrAewB7QL3
Ae0B7AHrAeoBFQHvAQAB9w7/AfcBiwGuAYsBrgGGAYsCrgKLAbQEhgGLCAAB8wHqAewC9AHtAeoB
8gEAARUB6gFtAesB7AHtAZIB7QPsAesBbQEVAQAB9wH/AbQKrQG0Af8B9wOGBP8BtQX/AmYBhggA
AfIBEwHrAfMB9AHtARMB8QEAARUB6gFtAesC7AGSAe0C7ALrAW0BFQEAAfcB/wGtCrQBrQH/AfcB
hgJmAf8DiwGuBf8BhgFmAYYDAAH/AfMB8AH/AQABvAHsAeoC7AHqAewBBwEAAUMB6gFtAesC7AGS
Ae0C7AHrAm0BQwEAAfcB/wG0Cq0BtAH/AfcBhgJmAf8DiwGuBf8BZgKGAQAC9AH/Ae8BbQHzAf8B
8gH0AewBEwESAewB8wH/AQABQwFtAZIBBwHyBPEB8gG8AZIBbQFDAQAB9wz/AfYB/wH3A4YB/wGL
Av8BiwL/AfIC/wGLAa4BhgEAAfcBEgHsARIBQwLsAUMB8gG8AfIB8wEHAf8CAAHtAfABkgHsAm0C
6wJtAewBkgHwAe0BAAH3Af8BFAHqAusB6gETAf8F9AH/AZIBhgKLAf8EiwGuAYYBZgGLAYYCiwGG
AQAB8gETAUMBEwESARQBQwHsAf8HAAHsARUBEwFtAewB7QGSAe0C7AFtARIBFAHsAQAB9wz/AfQB
/wH3AYYCiwH/AYsC/wGLAa4D/wGGAs8BhgH0AfABEwHsAfIB9AEHARQB7AHzAv8FAAEVAm0B6wLs
AZIB7QLsAusBbQEVAQAB9wH/ARQBEgHqAm0C6wJtAeoBEgEUAf8B9wGGAq4B/wSLAWYD/wFmAc8B
tAGGAewBEgEUAQcB/wEAAfQB6gFDAesB8AH/BQABFQHqAW0B6wLsAZIB7QLsAesCbQFDAQAB9w7/
AfcBhgLPAf8BrQL/Ac8BtQP/Ac8BtAG1AYYBBwHsARQB9wH0Af8B8gISAe8B8wH/BQABQwHqAZIB
BwbxAQcBkgFtAUMBAAH3Af8BFAESAeoCbQPrAW0B6gESARQB/wH3AYYCzwH/Aa0DzwH/Aa4BiwG0
A7UBhgH/AfIBEwESAfcBBwHsARUB7AL/BgABQwHwAe8BkgbsAZIB7wHwAUMBAAH3Af8M8wH/AfcB
hgK0Af8BtAPPAf8FtQEJAYYBAAEHBhQBEgHzBwABQwzsAUMBAAH3Af8M8gH/AfcBiwK0AYsBhgG1
AfMC/wW1AQkBiwEAAfEBBwHyAewBEwG8AfIB9wH0BwABvAEUAesB7Ab3AewB6wEUAbwBAAH3Dv8B
9wG8AbsJtQO7AfABBwMAAf8BvAHsAfQLAAHzAZIBFAZDARQBkgHzAgAB7wL3CpIC9wHvAQAB8QGL
CoYBiwHxAwAB9ArzAfQFAAH/BPMB/wgADvMEAAHzAQAB8wH/AfMBAAHzAQAB8wEAAfMEAAHvAewB
7QbrAe0B7AHvBQABBwSRAQcG8wH0AQADEgITBFICEwMSAwAB9AF0AfMBdAHyAXQB8wF0AfMBdAHz
AXQB9AMAAewCBwEkBFIBJAIHAewCAAH0AvMBkQG1ArsBtQeRAfcBAAPsAusBUgKgAVIC6wPsAgAB
8wH3AeoJbQHqAfcB8wIAAewB9gH/ASQEUgEkAf8B9gHsAgAB7wSRAq4EkQH3AgcBvAGRBgABmgJS
AZoHAAF0AuoJEgLqAXQCAAHtAQgBvAEkAXQCUgF0ASQBvAEIAe0CAAGRAbsB/wb0Af8BuwGRAQcB
uwG8AZECAAH0BPMBbQEUBPMB9AMAAfMB6gFtCRIBbQHqAfMCAAHtAQgB8AEkAXkCKwF5ASQB8AEI
Ae0CAAGRAbsBswLUAtoC1AGzAQcBkQEHAbsBvAGRAgABBwrvAQcDAAF0AeoB6wESBBMEEgHrAeoB
dAIAAe0BGgHwASoBmQIrAZkBKgHwARoB7QIAAZEBvAGzBtQBswG8AZECCQHwAZECAAHvCv8B7wMA
AfIB6gHrARMB8QEHAf8BvAFtAxIB6wHqAfMBAAH0AZIBGwHwASoBmQIaAZkBKgHwARsBkgH0AQAB
kQHwArMB1AHaBNsBvAGRAi4BGQGRAgAB7wP/AW0C6wFtA/8B7wMAAXQB6gHsARMEFAETAhIBEwHs
AeoBdAEAAXQB9wHzAfABUgQqAVIB8AHzAfcBdAEAAZEB8gOzAdQD2wHVAfABkQI1AfMBkQIAAe8D
/wRtA/8B7wMAAfMB6gHsARQB8QK8AZIEEwHsAeoB8wEAASQBSwH/BxsB8AH/AUsBJAEAAZEB8wGs
BLMDtAHxAZECtQHzAZECAAHvAf8BbQESBOoBEgFtAf8B7wMAAXQB6gHtBhQDEwHtAeoBdAIAASoB
UQMbAccBpgMbAVEBKgIAAZEI9ALzAZECGQHzAZECAAHvAf8BFAETBBIBEwEUAf8B7wMAAfMB6gGS
ARQB8QG8Ae8CvAHwAhQBkgHqAfMCAAIqAVIB9AEbAq0BGwH0AVIBJAMAAQcG7QSRA7UB8wGRAgAB
7wH/AUMBFQQUARUBQwH/Ae8DAAF0AeoB9wkUAfcB6gF0AgABKgFSASoBUgH2AvQB/wFSASQB9woA
AZEB9AXxAfQBkQIAAe8B/wEQAUMBcwJDAXMBQwEQAf8B7wMAAfMB6gHvARUIFAHvAeoB8wIAAXkC
KwEqAVIC/wFSASoB8wGSCgABkQH0AQkCvAIJAfQBkQIAAe8B/wEPARABcwIQAXMBEAEPAf8B7wMA
AXQB6gHvAewH7QHsAe8B6gF0BgABKgJSASoB9wEbAZIKAAGRB/8BkQIAAe8B9Aj/AfQB7wQAAe8L
6gHvCAACKwEAAbwB9wG8CgABBweRAQcCAAG8Cu8BvAUAAVIBAAFSAQABUgEAAVIBAAFSAQABUgIA
AUIBTQE+BwABPgMAASgDAAFAAwABMAMAAQEBAAEBBQABgAEBFgAD/wEAAb8B+wGAAQAB4wH/AgAB
mAEzAYABAAHjAfECAAGAAQMBgAEAAuACAAGAAQMBgAUAAYABAwGABQABwAEHAYAFAAHAAQcBgAIA
AQEDAAEBAYABAAHAAQMDAAEBAYABAAHAAQMDAAEBAYABAAHAAQMCAAGAAQMBgAEAAcABAwIAAYAB
AwGAAQABwAEDAgABgAEDAYABAAHAAQMCAAGwARsBgAEAAcABAwIAAbgBOwGAAQAB4AEHAgAB+AE/
AYABAAHwAQ8CAAH/AYEBwAEDAgABgAEAAf8BAAGAAQEEAAH/AQABgAEBBAAB/wEAAYABAQQAAf8B
AAGAAQEEAAHhAQABgAEBBAABgAEAAYABAQQAAYABAQGAAQEEAAGAAT8BgAEBBQABDwGAAQEEAAEE
AQ8BgAEBBQABDwGAAQEFAAEfAYABAQQAAYABPwGAAQEEAAGAAT8BgAEBBAAB4QH/AcABAwIAAYAB
AQHAAQMB4AF/AYABAQHoAasBwAEDAeABAAGAAQEBwAEBAcABAwIAAYABAQGAAQABwAEDAgAB/AE/
AYABAAHAAQMCAAHAAQMBgAEAAcABAwIAAcABAwGAAQABwAEDAgABwAEDAYABAAGAAQECAAHAAQMB
gAEAAYABAQIAAcABAwGAAQABgAEBAgABwAEDAYABAAHAAQMCAAHAAQMBgAEAAcABBwIAAcABAwGA
AQABwAEHAf4BAAHAAQMBgAEAAcABBwH+AQABwAEDAYABAAH8AQcB/gEAAcABAwHAAQEB/gFHAf4B
AAHAAQMB6gGrCw=='))
	#endregion
	$imagelist1.ImageStream = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$imagelist1.TransparentColor = 'Transparent'
	#
	# contextmenustrip1
	#
	$contextmenustrip1.Name = 'contextmenustrip1'
	$contextmenustrip1.Size = '61, 4'
	#
	# folderbrowserdialog1
	#
	$menustrip1.ResumeLayout()
	$toolstrip1.ResumeLayout()
	$tabpage_debug.ResumeLayout()
	$tabpage11.ResumeLayout()
	$groupbox17.ResumeLayout()
	$groupbox18.ResumeLayout()
	$tabpage10.ResumeLayout()
	$groupbox23.ResumeLayout()
	$tabpage8.ResumeLayout()
	$groupbox22.ResumeLayout()
	$tabpage6.ResumeLayout()
	$groupbox4.ResumeLayout()
	$groupbox8.ResumeLayout()
	$tabpage5.ResumeLayout()
	$groupbox20.ResumeLayout()
	$groupbox21.ResumeLayout()
	$chart1.EndInit()
	$tabpage4.ResumeLayout()
	$groupbox19.ResumeLayout()
	$tabpage3.ResumeLayout()
	$groupbox1.ResumeLayout()
	$groupbox2.ResumeLayout()
	$groupbox5.ResumeLayout()
	$groupbox6.ResumeLayout()
	$groupbox7.ResumeLayout()
	$groupbox16.ResumeLayout()
	$tabpage2.ResumeLayout()
	$groupbox9.ResumeLayout()
	$groupbox11.ResumeLayout()
	$groupbox12.ResumeLayout()
	$groupbox13.ResumeLayout()
	$groupbox14.ResumeLayout()
	$groupbox15.ResumeLayout()
	$tabpage1.ResumeLayout()
	$tabcontrol_Home.ResumeLayout()
	$MainForm.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $MainForm.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$MainForm.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$MainForm.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$MainForm.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $MainForm.ShowDialog()

}
#endregion Source: MainForm.psf

#region Source: Globals.ps1
	
	# Configuration	
	############################################################################################
	#!!!!!!!!!!!!!!!!!!!!!!!!!!!!C O N F I G U R A T I O N!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	############################################################################################
	
	# Snapins
	Add-PSSnapin Quest.ActiveRoles.ADManagement -ErrorAction SilentlyContinue
	Import-module grouppolicy -ErrorAction Continue
	Import-Module CimCmdlets -ErrorAction Continue
	Import-Module ActiveDirectory -ErrorAction Continue
	
	# PowershellToolkit information
	$ApplicationName = "LAFIT"
	$ApplicationVersion = "3.0.0.2"
	$ApplicationLastUpdate = "13.06.2016"
	
	# Author Information
	$AuthorName = "Renato Bacchi"
	$AuthorEmail = "renato.bacchi@ur.ch"
	
	# Text to show in the Status Bar when the form load
	$StatusBarStartUp = "$ApplicationName - $ApplicationVersion - (c) Renato Bacchi"
	
	# Title of the MainForm / Mainform Titel
	$domain = $env:userdomain.ToUpper()
	$MainFormTitle = "$ApplicationName $ApplicationVersion - Last Update: $ApplicationLastUpdate - $domain\$env:username"
	
	# Font Styles / Schrift Stile
	$bold = New-Object Drawing.Font("Lucida Console", 8, [Drawing.Fontstyle]::Bold)
	$norm = New-Object Drawing.Font("Lucida Console", 8, [Drawing.Fontstyle]::Regular)
	$log = New-Object Drawing.Font("Lucida Console", 1, [Drawing.Fontstyle]::Regular)
	[Drawing.Color]$gray = "Control"
	[Drawing.Color]$green = "Green"
	[Drawing.Color]$red = "Red"
	[Drawing.Color]$black = "Black"
	$global:Fillchar = 178
	$Newline = "`n"
	$Newline2 = "`n`n"
	
	## Environment Variables / Umgebungsvariablen
	if (Test-Path "C:\Program Files (x86)") { $global:Programfiles = "C:\Program Files (x86)" }
	else { $global:Programfiles = "C:\Program Files" }
	$cmd = "cmd.exe"
	
	# Folder / Ordner
	$global:Profilefolder = "\\cifsprofile\profile$"
	$global:Homefolder = "\\cifshome\home$"
	$global:Outfile = $pwd
	$global:Confpath = $env:APPDATA += "\Powershell Toolkit\"
	
	# SCCM
	$global:SCCMEnabled = "true"
	$global:SiteName = "V02"
	$global:SCCMServer = "srv-sccm15.kt.ur.ch"
	$global:SCCMNameSpace = "root\sms\site_$SiteName"
	$global:CmRCViewer = "$global:Programfiles\ConfigMgr\bin\i386\CmRcViewer.exe"
	
	# External Tools
	$global:Nirlauncher = "$global:Programfiles\Nirsoft"
	$global:Sysinternals = "$global:Programfiles\Sysinternals"
	
	# Loading Lang-Variables because $lang.xyz does not work in AddRichtTextbox -Text if there
	# are multiple Variables, bc. those are not strings but hashtablekeys
	# Maybe these should be change to something like global:langfolder and so on, so the code would be more readable
	$global:ChangePasswordAtLogon = $lang.ChangePasswordAtLogon
	$global:CheckComputerGroups = $lang.CheckComputerGroups
	$global:CheckConn = $lang.CheckConn
	$global:ComputerNotFound = $lang.ComputerNotFound
	$global:ComputerOfflineOrWrong = $lang.ComputerOfflineOrWrong
	$global:Cycle1 = $lang.Cycle1
	$global:Cycle2 = $lang.Cycle2
	$global:Cycle3 = $lang.Cycle3
	$global:Cycle4 = $lang.Cycle4
	$global:Cycle5 = $lang.Cycle5
	$global:Cycle6 = $lang.Cycle6
	$global:Cycle7 = $lang.Cycle7
	$global:Cycle8 = $lang.Cycle8
	$global:Cycle9 = $lang.Cycle9
	$global:DestinationComputer = $lang.DestinationComputer
	$global:DnsConf = $lang.DnsConf
	$global:DoYouWantToTransfer = $lang.DoYouWantToTransfer
	$global:EnterCommand = $lang.EnterCommand
	$global:EnterDestinationComputer = $lang.EnterDestinationComputer
	$global:EnterPassword = $lang.EnterPassword
	$global:EnterSourceComputer = $lang.EnterSourceComputer
	$global:EnterUsername = $lang.EnterUsername
	$global:ErrorUnlocking = $lang.ErrorUnlocking
	$global:FolderPathInputBoxMsg = $lang.FolderPathInputBoxMsg
	$global:FolderPathInputBoxTitle = $lang.FolderPathInputBoxTitle
	$global:FollowingLocked = $lang.FollowingLocked
	$global:LockedUser = $lang.LockedUser
	$global:NetConf = $lang.NetConf
	$global:NoInputDetected = $lang.NoInputDetected
	$global:NoUserUnlocked = $lang.NoUserUnlocked
	$global:NoUsersLocked = $lang.NoUsersLocked
	$global:NotExistinginAD = $lang.NotExistinginAD
	$global:PSRnotEnabled = $lang.PSRnotEnabled
	$global:PasswordResetOK = $lang.PasswordResetOK
	$global:Please = $lang.Please
	$global:RegKeySet = $lang.RegKeySet
	$global:RemoteCommandSent = $lang.RemoteCommandSent
	$global:RunRemoteCMD = $lang.RunRemoteCMD
	$global:ShowFolderRights = $lang.ShowFolderRights
	$global:ShowLocalAdminsOf = $lang.ShowLocalAdminsOf
	$global:ShowingComputergroupsOf = $lang.ShowingComputergroupsOf
	$global:ShowingLastPC = $lang.ShowingLastPC
	$global:SourceComputer = $lang.SourceComputer
	$global:TransferComputerGroups = $lang.TransferComputerGroups
	$global:Transferring = $lang.Transferring
	$global:TwoIdenticalComputers = $lang.TwoIdenticalComputers
	$global:UnlockUser = $lang.UnlockUser
	$global:UnlockedOK = $lang.UnlockedOK
	$global:YouHaveEnteredTwoIdenticalComputers = $lang.YouHaveEnteredTwoIdenticalComputers
	$global:checkHomeRights = $lang.checkHomeRights
	$global:checkProfileRights = $lang.checkProfileRights
	$global:configFolderExisting = $lang.configFolderExisting
	$global:configFrom = $lang.configFrom
	$global:createConfigError = $lang.createConfigError
	$global:created = $lang.created
	$global:existing = $lang.existing
	$global:folder = $lang.folder
	$global:loaded = $lang.loaded
	$global:openPSRS = $lang.openPSRS
	$global:starting = $lang.starting
	# Languagefiles Language.psd1 in Folders, e.g. \de-DE\ with Variables and Strings
	
	############################################################################################
	#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	############################################################################################
	#endregion Configuration
	
	# Adder Functions
	
	#region Add-ListViewItem
	function Add-ListViewItem
	{
	<#
		.SYNOPSIS
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.DESCRIPTION
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.PARAMETER ListView
			The ListView control to add the items to.
	
		.PARAMETER Items
			The object or objects you wish to load into the ListView's Items collection.
			
		.PARAMETER  ImageIndex
			The index of a predefined image in the ListView's ImageList.
		
		.PARAMETER  SubItems
			List of strings to add as Subitems.
		
		.PARAMETER Group
			The group to place the item(s) in.
		
		.PARAMETER Clear
			This switch clears the ListView's Items before adding the new item(s).
		
		.EXAMPLE
			Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
	#>
		
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.ListView]$ListView,
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			$Items,
			[int]$ImageIndex = -1,
			[string[]]$SubItems,
			[System.Windows.Forms.ListViewGroup]$Group,
			[switch]$Clear)
		
		if ($Clear)
		{
			$ListView.Items.Clear();
		}
		
		if ($Items -is [Array])
		{
			$ListView.BeginUpdate()
			foreach ($item in $Items)
			{
				$listitem = $ListView.Items.Add($item.ToString(), $ImageIndex)
				#Store the object in the Tag
				$listitem.Tag = $item
				
				if ($SubItems -ne $null)
				{
					$listitem.SubItems.AddRange($SubItems)
				}
				
				if ($Group -ne $null)
				{
					$listitem.Group = $Group
				}
			}
			$ListView.EndUpdate()
		}
		else
		{
			#Add a new item to the ListView
			$listitem = $ListView.Items.Add($Items.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $Items
			
			if ($SubItems -ne $null)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if ($Group -ne $null)
			{
				$listitem.Group = $Group
			}
		}
	}
	#endregion
	
	#region Add-RichTextBox
	# Function - Add Text to RichTextBox
	function Add-RichTextBox
	{
		[CmdletBinding()]
		param ($text)
		$Fill = "-"
		$Fill = $Fill * $Fillchar
		#$richtextbox_output.Text += "`tCOMPUTERNAME: $ComputerName`n"
		$richtextbox_output.SelectionFont = $log
		$richtextbox_output.SelectionColor = $Gray
		$timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss`n"
		$richtextbox_output.AppendText($timestamp)
		$richtextbox_output.SelectionFont = $norm
		$richtextbox_output.SelectionColor = $Black
		$richtextbox_output.AppendText($text)
		$richtextbox_output.SelectionFont = $bold
		$richtextbox_output.AppendText($Newline)
		$richtextbox_output.AppendText($Fill)
		$richtextbox_output.AppendText($Newline)
	}
	#Set-Alias artb Add-RichTextBox -Description "Add content to the RichTextBox"
	#endregion
	
	#region Add-RichtextBoxOK
	function Add-RichTextBoxOK
	{
		[CmdletBinding()]
		param ($text)
		$Fill = "-"
		$Fill = $Fill * $Fillchar
		#$richtextbox_output.Text += "`tCOMPUTERNAME: $ComputerName`n"
		$richtextbox_output.SelectionFont = $log
		$richtextbox_output.SelectionColor = $Gray
		$timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss`n"
		$richtextbox_output.SelectionFont = $norm
		$richtextbox_output.SelectionColor = $Green
		$richtextbox_output.AppendText($text)
		$richtextbox_output.SelectionColor = $Black
		$richtextbox_output.AppendText($Newline)
		$richtextbox_output.AppendText($Fill)
		$richtextbox_output.AppendText($Newline)
	}
	#endregion RichtextBoxOK
	
	#region Add-RichtextBoxTitle
	function Add-RichTextBoxTitle
	{
		[CmdletBinding()]
		param ($text)
		$Fill = "-"
		$Fill = $Fill * $Fillchar
		#$richtextbox_output.Text += "`tCOMPUTERNAME: $ComputerName`n"
		$richtextbox_output.SelectionFont = $log
		$richtextbox_output.SelectionColor = $Gray
		$timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss`n"
		$richtextbox_output.SelectionFont = $bold
		$richtextbox_output.SelectionColor = $Black
		$richtextbox_output.SelectionFont = $bold
		$richtextbox_output.AppendText($text)
		$richtextbox_output.SelectionFont = $bold
		$richtextbox_output.AppendText($Newline)
		$richtextbox_output.AppendText($Fill)
		$richtextbox_output.AppendText($Newline)
	}
	#endregion RichtextBoxWarn
	
	#region Add-RichtextBoxWarn
	function Add-RichTextBoxWarn
	{
		[CmdletBinding()]
		param ($text)
		$Fill = "-"
		$Fill = $Fill * $Fillchar
		#$richtextbox_output.Text += "`tCOMPUTERNAME: $ComputerName`n"
		$richtextbox_output.SelectionFont = $log
		$richtextbox_output.SelectionColor = $Gray
		$timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss`n"
		$richtextbox_output.SelectionFont = $norm
		$richtextbox_output.SelectionColor = $Red
		$richtextbox_output.AppendText($text)
		$richtextbox_output.SelectionColor = $Black
		$richtextbox_output.SelectionFont = $bold
		$richtextbox_output.AppendText($Newline)
		$richtextbox_output.AppendText($Fill)
		$richtextbox_output.AppendText($Newline)
		
	}
	#endregion RichtextBoxWarn
	
	# Clearer Functions
	
	#region Clear-Chart
	function Clear-Chart
	{
	<#
		.SYNOPSIS
			This function clears the contents of the chart
	
		.DESCRIPTION
			Use the function to remove contents from the chart control
	
		.PARAMETER  ChartControl
			The Chart Control to clear
	
		.PARAMETER  LeaveSingleChart
			Leaves the first chart and removes all others from the control
		
		.LINK
			http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
	#>
		Param (
			[ValidateNotNull()]
			[Parameter(Position = 1, Mandatory = $true)]
			[System.Windows.Forms.DataVisualization.Charting.Chart]
			$ChartControl
			,
			[Parameter(Position = 2, Mandatory = $false)]
			[Switch]$LeaveSingleChart
		)
		
		$count = 0
		if ($LeaveSingleChart)
		{
			$count = 1
		}
		
		while ($ChartControl.Series.Count -gt $count)
		{
			$ChartControl.Series.RemoveAt($ChartControl.Series.Count - 1)
		}
		
		while ($ChartControl.ChartAreas.Count -gt $count)
		{
			$ChartControl.ChartAreas.RemoveAt($ChartControl.ChartAreas.Count - 1)
		}
		
		while ($ChartControl.Titles.Count -gt $count)
		{
			$ChartControl.Titles.RemoveAt($ChartControl.Titles.Count - 1)
		}
		
		if ($ChartControl.Series.Count -gt 0)
		{
			$ChartControl.Series[0].Points.Clear()
		}
	}
	#endregion Clear-Chart
	
	# Getter Functions
	
	#region Get-ComputerTxtBox
	function Get-ComputerTxtBox
	{ $global:ComputerName = $textbox_computername.Text }
	#endregion
	
	#region Get-DiskSpace
	
	function Get-DiskSpace
	{
		
		    <#
		        .Synopsis  
		            Gets the disk space for specified host
		            
		        .Description
		            Gets the disk space for specified host
		            
		        .Parameter ComputerName
		            Name of the Computer to get the diskspace from (Default is localhost.)
		            
		        .Example
		            Get-Diskspace
		            # Gets diskspace from local machine
		    
		        .Example
		            Get-Diskspace -ComputerName MyServer
		            Description
		            -----------
		            Gets diskspace from MyServer
		            
		        .Example
		            $Servers | Get-Diskspace
		            Description
		            -----------
		            Gets diskspace for each machine in the pipeline
		            
		        .OUTPUTS
		            PSCustomObject
		            
		        .Notes
		            NAME:      Get-DiskSpace 
		            AUTHOR:    YetiCentral\bshell
		            Website:   www.bsonposh.com
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
		)
		
		Begin
		{
			Write-Verbose " [Get-DiskSpace] :: Start Begin"
			$Culture = New-Object System.Globalization.CultureInfo("en-US")
			Write-Verbose " [Get-DiskSpace] :: End Begin"
		}
		
		Process
		{
			Write-Verbose " [Get-DiskSpace] :: Start Process"
			if ($ComputerName -match "(.*)(\$)$")
			{
				$ComputerName = $ComputerName -replace "(.*)(\$)$", '$1'
				
			}
			Write-Verbose " [Get-DiskSpace] :: `$ComputerName - $ComputerName"
			Write-Verbose " [Get-DiskSpace] :: Testing Connectivity"
			if (Test-Host $ComputerName -TCPPort 135)
			{
				Write-Verbose " [Get-DiskSpace] :: Connectivity Passed"
				try
				{
					Write-Verbose " [Get-DiskSpace] :: Getting Operating System Version using - Get-WmiObject Win32_OperatingSystem -ComputerName $ComputerName -Property Version"
					$OSVersionInfo = Get-WmiObject Win32_OperatingSystem -ComputerName $ComputerName -Property Version -ea STOP
					Write-Verbose " [Get-DiskSpace] :: Getting Operating System returned $($OSVersionInfo.Version)"
					if ($OSVersionInfo.Version -gt 5.2)
					{
						Write-Verbose " [Get-DiskSpace] :: Version high enough to use Win32_Volume"
						Write-Verbose " [Get-DiskSpace] :: Calling Get-WmiObject -class Win32_Volume -ComputerName $ComputerName -Property `"Name`",`"FreeSpace`",`"Capacity`" -filter `"DriveType=3`""
						$DiskInfos = Get-WmiObject -class Win32_Volume                          `
												   -ComputerName $ComputerName                  `
												   -Property "Name", "FreeSpace", "Capacity"      `
												   -filter "DriveType=3" -ea STOP
						Write-Verbose " [Get-DiskSpace] :: Win32_Volume returned $($DiskInfos.count) disks"
						foreach ($DiskInfo in $DiskInfos)
						{
							$myobj = @{ }
							$myobj.ComputerName = $ComputerName
							$myobj.OSVersion = $OSVersionInfo.Version
							$Myobj.Drive = $DiskInfo.Name
							$Myobj.CapacityGB = [float]($DiskInfo.Capacity/1GB).ToString("n2", $Culture)
							$Myobj.FreeSpaceGB = [float]($DiskInfo.FreeSpace/1GB).ToString("n2", $Culture)
							$Myobj.PercentFree = "{0:P2}" -f ($DiskInfo.FreeSpace / $DiskInfo.Capacity)
							$obj = New-Object PSObject -Property $myobj
							$obj.PSTypeNames.Clear()
							$obj.PSTypeNames.Add('BSonPosh.DiskSpace')
							$obj
						}
					}
					else
					{
						Write-Verbose " [Get-DiskSpace] :: Version not high enough to use Win32_Volume using Win32_LogicalDisk"
						$DiskInfos = Get-WmiObject -class Win32_LogicalDisk                       `
												   -ComputerName $ComputerName                       `
												   -Property SystemName, DeviceID, FreeSpace, Size   `
												   -filter "DriveType=3" -ea STOP
						foreach ($DiskInfo in $DiskInfos)
						{
							$myobj = @{ }
							$myobj.ComputerName = $ComputerName
							$myobj.OSVersion = $OSVersionInfo.Version
							$Myobj.Drive = "{0}\" -f $DiskInfo.DeviceID
							$Myobj.CapacityGB = [float]($DiskInfo.Capacity/1GB).ToString("n2", $Culture)
							$Myobj.FreeSpaceGB = [float]($DiskInfo.FreeSpace/1GB).ToString("n2", $Culture)
							$Myobj.PercentFree = "{0:P2}" -f ($DiskInfo.FreeSpace / $DiskInfo.Capacity)
							$obj = New-Object PSObject -Property $myobj
							$obj.PSTypeNames.Clear()
							$obj.PSTypeNames.Add('BSonPosh.DiskSpace')
							$obj
						}
					}
				}
				catch
				{
					Write-Host " Host [$ComputerName] Failed with Error: $($Error[0])" -ForegroundColor Red
				}
			}
			else
			{
				Write-Host " Host [$ComputerName] Failed Connectivity Test " -ForegroundColor Red
			}
			Write-Verbose " [Get-DiskSpace] :: End Process"
			
		}
	}
	
	#endregion 
	
	#region Get-InstalledSoftware
	
	function Get-InstalledSoftware
	{
		
		    <#
		        .Synopsis
		            Gets the installed software using Uninstall regkey for specified host.
		
		        .Description
		            Gets the installed software using Uninstall regkey for specified host.
		
		        .Parameter ComputerName
		            Name of the Computer to get the installed software from (Default is localhost.)
		
		        .Example
		            Get-InstalledSoftware
		            Description
		            -----------
		            Gets installed software from local machine
		
		        .Example
		            Get-InstalledSoftware -ComputerName MyServer
		            Description
		            -----------
		            Gets installed software from MyServer
		
		        .Example
		            $Servers | Get-InstalledSoftware
		            Description
		            -----------
		            Gets installed software for each machine in the pipeline
		
		        .OUTPUTS
		            PSCustomObject
		
		        .Notes
		            NAME:      Get-InstalledSoftware
		            AUTHOR:    YetiCentral\bshell
		            Website:   www.bsonposh.com
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
		)
		begin
		{
			
			Write-Verbose " [Get-InstalledPrograms] :: Start Begin"
			$Culture = New-Object System.Globalization.CultureInfo("en-US")
			Write-Verbose " [Get-InstalledPrograms] :: End Begin"
			
		}
		process
		{
			
			Write-Verbose " [Get-InstalledPrograms] :: Start Process"
			if ($ComputerName -match "(.*)(\$)$")
			{
				$ComputerName = $ComputerName -replace "(.*)(\$)$", '$1'
				
			}
			Write-Verbose " [Get-InstalledPrograms] :: `$ComputerName - $ComputerName"
			Write-Verbose " [Get-InstalledPrograms] :: Testing Connectivity"
			if (Test-Host $ComputerName -TCPPort 135)
			{
				try
				{
					$RegKey = Get-RegistryKey -Path "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall" -ComputerName $ComputerName
					foreach ($key in $RegKey.GetSubKeyNames())
					{
						$SubKey = $RegKey.OpenSubKey($key)
						if ($SubKey.GetValue("DisplayName"))
						{
							$myobj = @{
								Name = $SubKey.GetValue("DisplayName")
								Version = $SubKey.GetValue("DisplayVersion")
								Vendor = $SubKey.GetValue("Publisher")
								Install = $SubKey.GetValue("InstallDate")
								#Uninstall = $SubKey.GetValue("UninstallString")
							}
							$obj = New-Object PSObject -Property $myobj
							$obj.PSTypeNames.Clear()
							$obj.PSTypeNames.Add('BSonPosh.SoftwareInfo')
							$obj
						}
					}
				}
				catch
				{
					Write-Host " Host [$ComputerName] Failed with Error: $($Error[0])" -ForegroundColor Red
				}
			}
			else
			{
				Write-Host " Host [$ComputerName] Failed Connectivity Test " -ForegroundColor Red
			}
			Write-Verbose " [Get-InstalledPrograms] :: End Process"
			
		}
	}
	
	#endregion 	
	
	#region Get-IP 
	
	function Get-IP
	{
		
		    <#
		        .Synopsis 
		            Get the IP of the specified host.
		            
		        .Description
		            Get the IP of the specified host.
		            
		        .Parameter ComputerName
		            Name of the Computer to get IP (Default localhost.)
		                
		        .Example
		            Get-IP
		            Description
		            -----------
		            Get IP information the localhost
		            
		            
		        .OUTPUTS
		            PSCustomObject
		            
		        .INPUTS
		            System.String
		        
		        .Notes
		            NAME:      Get-IP
		            AUTHOR:    YetiCentral\bshell
		            Website:   www.bsonposh.com
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
		)
		Process
		{
			$NICs = Get-WmiObject Win32_NetworkAdapterConfiguration -Filter "IPEnabled='$True'" -ComputerName $ComputerName
			foreach ($Nic in $NICs)
			{
				$myobj = @{
					Name = $Nic.Description
					MacAddress = $Nic.MACAddress
					IP4 = $Nic.IPAddress | where{ $_ -match "\d+\.\d+\.\d+\.\d+" }
					IP6 = $Nic.IPAddress | where{ $_ -match "\:\:" }
					IP4Subnet = $Nic.IPSubnet | where{ $_ -match "\d+\.\d+\.\d+\.\d+" }
					DefaultGWY = $Nic.DefaultIPGateway | Select -First 1
					DNSServer = $Nic.DNSServerSearchOrder
					WINSPrimary = $Nic.WINSPrimaryServer
					WINSSecondary = $Nic.WINSSecondaryServer
				}
				$obj = New-Object PSObject -Property $myobj
				$obj.PSTypeNames.Clear()
				$obj.PSTypeNames.Add('BSonPosh.IPInfo')
				$obj
			}
		}
	}
	
	#endregion 
	
	#region Get-MemoryConfiguration 
	
	function Get-MemoryConfiguration
	{
		
		    <#
		        .Synopsis 
		            Gets the Memory Config for specified host.
		            
		        .Description
		            Gets the Memory Config for specified host.
		            
		        .Parameter ComputerName
		            Name of the Computer to get the Memory Config from (Default is localhost.)
		            
		        .Example
		            Get-MemoryConfiguration
		            Description
		            -----------
		            Gets Memory Config from local machine
		    
		        .Example
		            Get-MemoryConfiguration -ComputerName MyServer
		            Description
		            -----------
		            Gets Memory Config from MyServer
		            
		        .Example
		            $Servers | Get-MemoryConfiguration
		            Description
		            -----------
		            Gets Memory Config for each machine in the pipeline
		            
		        .OUTPUTS
		            PSCustomObject
		            
		        .Notes
		            NAME:      Get-MemoryConfiguration 
		            AUTHOR:    YetiCentral\bshell
		            Website:   www.bsonposh.com
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
		)
		
		Process
		{
			
			Write-Verbose " [Get-MemoryConfiguration] :: Begin Process"
			if ($ComputerName -match "(.*)(\$)$")
			{
				$ComputerName = $ComputerName -replace "(.*)(\$)$", '$1'
			}
			if (Test-Host $ComputerName -TCPPort 135)
			{
				Write-Verbose " [Get-MemoryConfiguration] :: Processing $ComputerName"
				try
				{
					$MemorySlots = Get-WmiObject Win32_PhysicalMemory -ComputerName $ComputerName -ea STOP
					foreach ($Dimm in $MemorySlots)
					{
						$myobj = @{ }
						$myobj.ComputerName = $ComputerName
						$myobj.Description = $Dimm.Tag
						$myobj.Slot = $Dimm.DeviceLocator
						$myobj.Speed = $Dimm.Speed
						$myobj.SizeGB = $Dimm.Capacity/1gb
						
						$obj = New-Object PSObject -Property $myobj
						$obj.PSTypeNames.Clear()
						$obj.PSTypeNames.Add('BSonPosh.MemoryConfiguration')
						$obj
					}
				}
				catch
				{
					Write-Host " Host [$ComputerName] Failed with Error: $($Error[0])" -ForegroundColor Red
				}
			}
			else
			{
				Write-Host " Host [$ComputerName] Failed Connectivity Test " -ForegroundColor Red
			}
			Write-Verbose " [Get-MemoryConfiguration] :: End Process"
			
		}
	}
	
	#endregion 
	
	#region Get-MotherBoard
	
	function Get-MotherBoard
	{
		
		    <#
		        .Synopsis 
		            Gets the Mother Board info for specified host.
		            
		        .Description
		            Gets the Mother Board info for specified host.
		            
		        .Parameter ComputerName
		            Name of the Computer to get the Mother Board info from (Default is localhost.) 
		            
		        .Example
		            Get-MotherBoard
		            Description
		            -----------
		            Gets Mother Board info from local machine
		    
		        .Example
		            Get-MotherBoard -ComputerName MyOtherDesktop
		            Description
		            -----------
		            Gets Mother Board info from MyOtherDesktop
		            
		        .Example
		            $Windows7Machines | Get-MotherBoard
		            Description
		            -----------
		            Gets Mother Board info for each machine in the pipeline
		            
		        .OUTPUTS
		            PSCustomObject
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            N/A
		            
		        .Notes
		            NAME:      Get-MotherBoard
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
		)
		
		Process
		{
			
			if ($ComputerName -match "(.*)(\$)$")
			{
				$ComputerName = $ComputerName -replace "(.*)(\$)$", '$1'
			}
			if (Test-Host -ComputerName $ComputerName -TCPPort 135)
			{
				try
				{
					$MBInfo = Get-WmiObject Win32_BaseBoard -ComputerName $ComputerName -ea STOP
					$myobj = @{
						ComputerName = $ComputerName
						Name = $MBInfo.Product
						Manufacturer = $MBInfo.Manufacturer
						Version = $MBInfo.Version
						SerialNumber = $MBInfo.SerialNumber
					}
					
					$obj = New-Object PSObject -Property $myobj
					$obj.PSTypeNames.Clear()
					$obj.PSTypeNames.Add('BSonPosh.Computer.MotherBoard')
					$obj
				}
				catch
				{
					Write-Host " Host [$ComputerName] Failed with Error: $($Error[0])" -ForegroundColor Red
				}
			}
			else
			{
				Write-Host " Host [$ComputerName] Failed Connectivity Test " -ForegroundColor Red
			}
			
		}
	}
	
	#endregion # Get-MotherBoard
	
	#region Get-NicInfo 
	
	function Get-NICInfo
	{
		
		    <#
		        .Synopsis  
		            Gets the NIC info for specified host
		            
		        .Description
		            Gets the NIC info for specified host
		            
		        .Parameter ComputerName
		            Name of the Computer to get the NIC info from (Default is localhost.)
		            
		        .Example
		            Get-NicInfo
		            # Gets NIC info from local machine
		    
		        .Example
		            Get-NicInfo -ComputerName MyServer
		            Description
		            -----------
		            Gets NIC info from MyServer
		            
		        .Example
		            $Servers | Get-NicInfo
		            Description
		            -----------
		            Gets NIC info for each machine in the pipeline
		            
		        .OUTPUTS
		            PSCustomObject
		            
		        .Notes
		            NAME:      Get-NicInfo 
		            AUTHOR:    YetiCentral\bshell
		            Website:   www.bsonposh.com
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
		)
		
		Process
		{
			if ($ComputerName -match "(.*)(\$)$")
			{
				$ComputerName = $ComputerName -replace "(.*)(\$)$", '$1'
			}
			
			if (Test-Host -ComputerName $ComputerName -TCPPort 135)
			{
				try
				{
					$NICS = Get-WmiObject -class Win32_NetworkAdapterConfiguration -ComputerName $ComputerName
					
					foreach ($NIC in $NICS)
					{
						$Query = "Select Name,NetConnectionID FROM Win32_NetworkAdapter WHERE Index='$($NIC.Index)'"
						$NetConnnectionID = Get-WmiObject -Query $Query -ComputerName $ComputerName
						
						$myobj = @{
							ComputerName = $ComputerName
							Name = $NetConnnectionID.Name
							NetID = $NetConnnectionID.NetConnectionID
							MacAddress = $NIC.MacAddress
							IP = $NIC.IPAddress | ?{ $_ -match "\d*\.\d*\.\d*\." }
							Subnet = $NIC.IPSubnet | ?{ $_ -match "\d*\.\d*\.\d*\." }
							Enabled = $NIC.IPEnabled
							Index = $NIC.Index
						}
						
						$obj = New-Object PSObject -Property $myobj
						$obj.PSTypeNames.Clear()
						$obj.PSTypeNames.Add('BSonPosh.NICInfo')
						$obj
					}
				}
				catch
				{
					Add-RichTextBoxWarn -text "Host $ComputerName Failed"
				}
			}
			else
			{
				Add-RichTextBoxWarn -text "Host $ComputerName Failed Connectivity Test"
			}
		}
	}
	
	#endregion 
	
	#region Get-Processor
	
	function Get-Processor
	{
		
		    <#
		        .Synopsis 
		            Gets the Computer Processor info for specified host.
		            
		        .Description
		            Gets the Computer Processor info for specified host.
		            
		        .Parameter ComputerName
		            Name of the Computer to get the Computer Processor info from (Default is localhost.)
		            
		        .Example
		            Get-Processor
		            Description
		            -----------
		            Gets Computer Processor info from local machine
		    
		        .Example
		            Get-Processor -ComputerName MyServer
		            Description
		            -----------
		            Gets Computer Processor info from MyServer
		            
		        .Example
		            $Servers | Get-Processor
		            Description
		            -----------
		            Gets Computer Processor info for each machine in the pipeline
		            
		        .OUTPUTS
		            PSCustomObject
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            N/A
		            
		        .Notes
		            NAME:      Get-Processor
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
		)
		
		Process
		{
			
			if ($ComputerName -match "(.*)(\$)$")
			{
				$ComputerName = $ComputerName -replace "(.*)(\$)$", '$1'
			}
			if (Test-Host -ComputerName $ComputerName -TCPPort 135)
			{
				try
				{
					$CPUS = Get-WmiObject Win32_Processor -ComputerName $ComputerName -ea STOP
					foreach ($CPU in $CPUs)
					{
						$myobj = @{
							ComputerName = $ComputerName
							Name = $CPU.Name
							Manufacturer = $CPU.Manufacturer
							Speed = $CPU.MaxClockSpeed
							Cores = $CPU.NumberOfCores
							L2Cache = $CPU.L2CacheSize
							Stepping = $CPU.Stepping
						}
					}
					$obj = New-Object PSObject -Property $myobj
					$obj.PSTypeNames.Clear()
					$obj.PSTypeNames.Add('BSonPosh.Computer.Processor')
					$obj
				}
				catch
				{
					Write-Host " Host [$ComputerName] Failed with Error: $($Error[0])" -ForegroundColor Red
				}
			}
			else
			{
				Write-Host " Host [$ComputerName] Failed Connectivity Test " -ForegroundColor Red
			}
			
		}
	}
	
	#endregion
	
	#region Get-RegistryHive 
	
	function Get-RegistryHive
	{
		param ($HiveName)
		Switch -regex ($HiveName)
		{
			"^(HKCR|ClassesRoot|HKEY_CLASSES_ROOT)$"               { [Microsoft.Win32.RegistryHive]"ClassesRoot"; continue }
			"^(HKCU|CurrentUser|HKEY_CURRENTt_USER)$"              { [Microsoft.Win32.RegistryHive]"CurrentUser"; continue }
			"^(HKLM|LocalMachine|HKEY_LOCAL_MACHINE)$"          { [Microsoft.Win32.RegistryHive]"LocalMachine"; continue }
			"^(HKU|Users|HKEY_USERS)$"                          { [Microsoft.Win32.RegistryHive]"Users"; continue }
			"^(HKCC|CurrentConfig|HKEY_CURRENT_CONFIG)$"          { [Microsoft.Win32.RegistryHive]"CurrentConfig"; continue }
			"^(HKPD|PerformanceData|HKEY_PERFORMANCE_DATA)$"    { [Microsoft.Win32.RegistryHive]"PerformanceData"; continue }
			Default { 1; continue }
		}
	}
	
	#endregion 
	
	#region Get-RegistryKey 
	
	function Get-RegistryKey
	{
		
		    <#
		        .Synopsis 
		            Gets the registry key provide by Path.
		            
		        .Description
		            Gets the registry key provide by Path.
		                        
		        .Parameter Path 
		            Path to the key.
		            
		        .Parameter ComputerName 
		            Computer to get the registry key from.
		            
		        .Parameter Recurse 
		            Recursively returns registry keys starting from the Path.
		        
		        .Parameter ReadWrite
		            Returns the Registry key in Read Write mode.
		            
		        .Example
		            Get-registrykey HKLM\Software\Adobe
		            Description
		            -----------
		            Returns the Registry key for HKLM\Software\Adobe
		            
		        .Example
		            Get-registrykey HKLM\Software\Adobe -ComputerName MyServer1
		            Description
		            -----------
		            Returns the Registry key for HKLM\Software\Adobe on MyServer1
		        
		        .Example
		            Get-registrykey HKLM\Software\Adobe -Recurse
		            Description
		            -----------
		            Returns the Registry key for HKLM\Software\Adobe and all child keys
		                    
		        .OUTPUTS
		            Microsoft.Win32.RegistryKey
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            New-RegistryKey
		            Remove-RegistryKey
		            Test-RegistryKey
		        .Notes
		            NAME:      Get-RegistryKey
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			
			[Parameter(mandatory = $true)]
			[string]$Path,
			[Alias("Server")]
			[Parameter(ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:ComputerName,
			[Parameter()]
			[switch]$Recurse,
			[Alias("RW")]
			[Parameter()]
			[switch]$ReadWrite
			
		)
		
		Begin
		{
			
			Write-Verbose " [Get-RegistryKey] :: Start Begin"
			Write-Verbose " [Get-RegistryKey] :: `$Path = $Path"
			Write-Verbose " [Get-RegistryKey] :: Getting `$Hive and `$KeyPath from $Path "
			$PathParts = $Path -split "\\|/", 0, "RegexMatch"
			$Hive = $PathParts[0]
			$KeyPath = $PathParts[1..$PathParts.count] -join "\"
			Write-Verbose " [Get-RegistryKey] :: `$Hive = $Hive"
			Write-Verbose " [Get-RegistryKey] :: `$KeyPath = $KeyPath"
			
			Write-Verbose " [Get-RegistryKey] :: End Begin"
			
		}
		
		Process
		{
			
			Write-Verbose " [Get-RegistryKey] :: Start Process"
			Write-Verbose " [Get-RegistryKey] :: `$ComputerName = $ComputerName"
			
			$RegHive = Get-RegistryHive $hive
			
			if ($RegHive -eq 1)
			{
				Write-Host "Invalid Path: $Path, Registry Hive [$hive] is invalid!" -ForegroundColor Red
			}
			else
			{
				Write-Verbose " [Get-RegistryKey] :: `$RegHive = $RegHive"
				
				$BaseKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($RegHive, $ComputerName)
				Write-Verbose " [Get-RegistryKey] :: `$BaseKey = $BaseKey"
				
				if ($ReadWrite)
				{
					try
					{
						$Key = $BaseKey.OpenSubKey($KeyPath, $true)
						$Key = $Key | Add-Member -Name "ComputerName" -MemberType NoteProperty -Value $ComputerName -PassThru
						$Key = $Key | Add-Member -Name "Hive" -MemberType NoteProperty -Value $RegHive -PassThru
						$Key = $Key | Add-Member -Name "Path" -MemberType NoteProperty -Value $KeyPath -PassThru
						$Key.PSTypeNames.Clear()
						$Key.PSTypeNames.Add('BSonPosh.Registry.Key')
						$Key
					}
					catch
					{
						Write-Verbose " [Get-RegistryKey] ::  ERROR :: Unable to Open Key:$KeyPath in $KeyPath with RW Access"
					}
					
				}
				else
				{
					try
					{
						$Key = $BaseKey.OpenSubKey("$KeyPath")
						if ($Key)
						{
							$Key = $Key | Add-Member -Name "ComputerName" -MemberType NoteProperty -Value $ComputerName -PassThru
							$Key = $Key | Add-Member -Name "Hive" -MemberType NoteProperty -Value $RegHive -PassThru
							$Key = $Key | Add-Member -Name "Path" -MemberType NoteProperty -Value $KeyPath -PassThru
							$Key.PSTypeNames.Clear()
							$Key.PSTypeNames.Add('BSonPosh.Registry.Key')
							$Key
						}
					}
					catch
					{
						Write-Verbose " [Get-RegistryKey] ::  ERROR :: Unable to Open SubKey:$Name in $KeyPath"
					}
				}
				
				if ($Recurse)
				{
					Write-Verbose " [Get-RegistryKey] :: Recurse Passed: Processing Subkeys of [$($Key.Name)]"
					$Key
					$SubKeyNames = $Key.GetSubKeyNames()
					foreach ($Name in $SubKeyNames)
					{
						try
						{
							$SubKey = $Key.OpenSubKey($Name)
							if ($SubKey.GetSubKeyNames())
							{
								Write-Verbose " [Get-RegistryKey] :: Calling [Get-RegistryKey] for [$($SubKey.Name)]"
								Get-RegistryKey -ComputerName $ComputerName -Path $SubKey.Name -Recurse
							}
							else
							{
								Get-RegistryKey -ComputerName $ComputerName -Path $SubKey.Name
							}
						}
						catch
						{
							Write-Verbose " [Get-RegistryKey] ::  ERROR :: Write-Host Unable to Open SubKey:$Name in $($Key.Name)"
						}
					}
				}
			}
			Write-Verbose " [Get-RegistryKey] :: End Process"
			
		}
	}
	
	#endregion 
	
	#region Get-RegistryValue 
	
	function Get-RegistryValue
	{
		
		    <#
		        .Synopsis 
		            Get the value for given the registry value.
		            
		        .Description
		            Get the value for given the registry value.
		                        
		        .Parameter Path 
		            Path to the key that contains the value.
		            
		        .Parameter Name 
		            Name of the Value to check.
		            
		        .Parameter ComputerName 
		            Computer to get value.
		            
		        .Parameter Recurse 
		            Recursively gets the Values on the given key.
		            
		        .Parameter Default 
		            Returns the default value for the Value.
		        
		        .Example
		            Get-RegistryValue HKLM\SOFTWARE\Adobe\SwInstall -Name State 
		            Description
		            -----------
		            Returns value of State under HKLM\SOFTWARE\Adobe\SwInstall.
		            
		        .Example
		            Get-RegistryValue HKLM\Software\Adobe -Name State -ComputerName MyServer1
		            Description
		            -----------
		            Returns value of State under HKLM\SOFTWARE\Adobe\SwInstall on MyServer1
		            
		        .Example
		            Get-RegistryValue HKLM\Software\Adobe -Recurse
		            Description
		            -----------
		            Returns all the values under HKLM\SOFTWARE\Adobe.
		    
		        .Example
		            Get-RegistryValue HKLM\Software\Adobe -ComputerName MyServer1 -Recurse
		            Description
		            -----------
		            Returns all the values under HKLM\SOFTWARE\Adobe on MyServer1
		            
		        .Example
		            Get-RegistryValue HKLM\Software\Adobe -Default
		            Description
		            -----------
		            Returns the default value for HKLM\SOFTWARE\Adobe.
		                    
		        .OUTPUTS
		            PSCustomObject
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            New-RegistryValue
		            Remove-RegistryValue
		            Test-RegistryValue
		            
		        .Notes    
		            NAME:      Get-RegistryValue
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[Parameter(mandatory = $true)]
			[string]$Path,
			[Parameter()]
			[string]$Name,
			[Alias("dnsHostName")]
			[Parameter(ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:ComputerName,
			[Parameter()]
			[switch]$Recurse,
			[Parameter()]
			[switch]$Default
		)
		
		Process
		{
			
			Write-Verbose " [Get-RegistryValue] :: Begin Process"
			Write-Verbose " [Get-RegistryValue] :: Calling Get-RegistryKey -Path $path -ComputerName $ComputerName"
			
			if ($Recurse)
			{
				$Keys = Get-RegistryKey -Path $path -ComputerName $ComputerName -Recurse
				foreach ($Key in $Keys)
				{
					if ($Name)
					{
						try
						{
							Write-Verbose " [Get-RegistryValue] :: Getting Value for [$Name]"
							$myobj = @{ } #| Select ComputerName,Name,Value,Type,Path
							$myobj.ComputerName = $ComputerName
							$myobj.Name = $Name
							$myobj.value = $Key.GetValue($Name)
							$myobj.Type = $Key.GetValueKind($Name)
							$myobj.path = $Key
							
							$obj = New-Object PSCustomObject -Property $myobj
							$obj.PSTypeNames.Clear()
							$obj.PSTypeNames.Add('BSonPosh.Registry.Value')
							$obj
						}
						catch
						{
							Write-Verbose " [Get-RegistryValue] ::  ERROR :: Unable to Get Value for:$Name in $($Key.Name)"
						}
						
					}
					elseif ($Default)
					{
						try
						{
							Write-Verbose " [Get-RegistryValue] :: Getting Value for [(Default)]"
							$myobj = @{ } #"" | Select ComputerName,Name,Value,Type,Path
							$myobj.ComputerName = $ComputerName
							$myobj.Name = "(Default)"
							$myobj.value = if ($Key.GetValue("")) { $Key.GetValue("") }
							else { "EMPTY" }
							$myobj.Type = if ($Key.GetValue("")) { $Key.GetValueKind("") }
							else { "N/A" }
							$myobj.path = $Key
							
							$obj = New-Object PSCustomObject -Property $myobj
							$obj.PSTypeNames.Clear()
							$obj.PSTypeNames.Add('BSonPosh.Registry.Value')
							$obj
						}
						catch
						{
							Write-Verbose " [Get-RegistryValue] ::  ERROR :: Unable to Get Value for:(Default) in $($Key.Name)"
						}
					}
					else
					{
						try
						{
							Write-Verbose " [Get-RegistryValue] :: Getting all Values for [$Key]"
							foreach ($ValueName in $Key.GetValueNames())
							{
								Write-Verbose " [Get-RegistryValue] :: Getting all Value for [$ValueName]"
								$myobj = @{ } #"" | Select ComputerName,Name,Value,Type,Path
								$myobj.ComputerName = $ComputerName
								$myobj.Name = if ($ValueName -match "^$") { "(Default)" }
								else { $ValueName }
								$myobj.value = $Key.GetValue($ValueName)
								$myobj.Type = $Key.GetValueKind($ValueName)
								$myobj.path = $Key
								
								$obj = New-Object PSCustomObject -Property $myobj
								$obj.PSTypeNames.Clear()
								$obj.PSTypeNames.Add('BSonPosh.Registry.Value')
								$obj
							}
						}
						catch
						{
							Write-Verbose " [Get-RegistryValue] ::  ERROR :: Unable to Get Value for:$ValueName in $($Key.Name)"
						}
					}
				}
			}
			else
			{
				$Key = Get-RegistryKey -Path $path -ComputerName $ComputerName
				Write-Verbose " [Get-RegistryValue] :: Get-RegistryKey returned $Key"
				if ($Name)
				{
					try
					{
						Write-Verbose " [Get-RegistryValue] :: Getting Value for [$Name]"
						$myobj = @{ } # | Select ComputerName,Name,Value,Type,Path
						$myobj.ComputerName = $ComputerName
						$myobj.Name = $Name
						$myobj.value = $Key.GetValue($Name)
						$myobj.Type = $Key.GetValueKind($Name)
						$myobj.path = $Key
						
						$obj = New-Object PSCustomObject -Property $myobj
						$obj.PSTypeNames.Clear()
						$obj.PSTypeNames.Add('BSonPosh.Registry.Value')
						$obj
					}
					catch
					{
						Write-Verbose " [Get-RegistryValue] ::  ERROR :: Unable to Get Value for:$Name in $($Key.Name)"
					}
				}
				elseif ($Default)
				{
					try
					{
						Write-Verbose " [Get-RegistryValue] :: Getting Value for [(Default)]"
						$myobj = @{ } #"" | Select ComputerName,Name,Value,Type,Path
						$myobj.ComputerName = $ComputerName
						$myobj.Name = "(Default)"
						$myobj.value = if ($Key.GetValue("")) { $Key.GetValue("") }
						else { "EMPTY" }
						$myobj.Type = if ($Key.GetValue("")) { $Key.GetValueKind("") }
						else { "N/A" }
						$myobj.path = $Key
						
						$obj = New-Object PSCustomObject -Property $myobj
						$obj.PSTypeNames.Clear()
						$obj.PSTypeNames.Add('BSonPosh.Registry.Value')
						$obj
					}
					catch
					{
						Write-Verbose " [Get-RegistryValue] ::  ERROR :: Unable to Get Value for:$Name in $($Key.Name)"
					}
				}
				else
				{
					Write-Verbose " [Get-RegistryValue] :: Getting all Values for [$Key]"
					foreach ($ValueName in $Key.GetValueNames())
					{
						Write-Verbose " [Get-RegistryValue] :: Getting all Value for [$ValueName]"
						$myobj = @{ } #"" | Select ComputerName,Name,Value,Type,Path
						$myobj.ComputerName = $ComputerName
						$myobj.Name = if ($ValueName -match "^$") { "(Default)" }
						else { $ValueName }
						$myobj.value = $Key.GetValue($ValueName)
						$myobj.Type = $Key.GetValueKind($ValueName)
						$myobj.path = $Key
						
						$obj = New-Object PSCustomObject -Property $myobj
						$obj.PSTypeNames.Clear()
						$obj.PSTypeNames.Add('BSonPosh.Registry.Value')
						$obj
					}
				}
			}
			
			Write-Verbose " [Get-RegistryValue] :: End Process"
			
		}
	}
	
	#endregion 
	
	#region Get-Routetable 
	
	function Get-Routetable
	{
		
		    <#
		        .Synopsis 
		            Gets the route table for specified host.
		            
		        .Description
		            Gets the route table for specified host.
		            
		        .Parameter ComputerName
		            Name of the Computer to get the route table from (Default is localhost.)
		            
		        .Example
		            Get-RouteTable
		            Description
		            -----------
		            Gets route table from local machine
		    
		        .Example
		            Get-RouteTable -ComputerName MyServer
		            Description
		            -----------
		            Gets route table from MyServer
		            
		        .Example
		            $Servers | Get-RouteTable
		            Description
		            -----------
		            Gets route table for each machine in the pipeline
		            
		        .OUTPUTS
		            PSCustomObject
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            N/A
		            
		        .Notes
		            NAME:      Get-RouteTable
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
		)
		process
		{
			
			if ($ComputerName -match "(.*)(\$)$")
			{
				$ComputerName = $ComputerName -replace "(.*)(\$)$", '$1'
			}
			if (Test-Host $ComputerName -TCPPort 135)
			{
				$Routes = Get-WMIObject Win32_IP4RouteTable -ComputerName $ComputerName -Property Name, Mask, NextHop, Metric1, Type
				foreach ($Route in $Routes)
				{
					$myobj = @{ }
					$myobj.ComputerName = $ComputerName
					$myobj.Name = $Route.Name
					$myobj.NetworkMask = $Route.mask
					$myobj.Gateway = if ($Route.NextHop -eq "0.0.0.0") { "On-Link" }
					else { $Route.NextHop }
					$myobj.Metric = $Route.Metric1
					
					$obj = New-Object PSObject -Property $myobj
					$obj.PSTypeNames.Clear()
					$obj.PSTypeNames.Add('BSonPosh.RouteTable')
					$obj
				}
			}
			else
			{
				Write-Host " Host [$ComputerName] Failed Connectivity Test " -ForegroundColor Red
			}
			
		}
	}
	
	#endregion 
	
	#region Get-SystemType 
	
	function Get-SystemType
	{
		
		    <#
		        .Synopsis 
		            Gets the system type for specified host
		            
		        .Description
		            Gets the system type info for specified host
		            
		        .Parameter ComputerName
		            Name of the Computer to get the System Type from (Default is localhost.)
		            
		        .Example
		            Get-SystemType
		            Description
		            -----------
		            Gets System Type from local machine
		    
		        .Example
		            Get-SystemType -ComputerName MyServer
		            Description
		            -----------
		            Gets System Type from MyServer
		            
		        .Example
		            $Servers | Get-SystemType
		            Description
		            -----------
		            Gets System Type for each machine in the pipeline
		            
		        .OUTPUTS
		            PSObject
		            
		        .Notes
		            NAME:      Get-SystemType 
		            AUTHOR:    YetiCentral\bshell
		            Website:   www.bsonposh.com
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
		)
		
		Begin
		{
			
			function ConvertTo-ChassisType($Type)
			{
				switch ($Type)
				{
					1    { "Other" }
					2    { "Unknown" }
					3    { "Desktop" }
					4    { "Low Profile Desktop" }
					5    { "Pizza Box" }
					6    { "Mini Tower" }
					7    { "Tower" }
					8    { "Portable" }
					9    { "Laptop" }
					10    { "Notebook" }
					11    { "Hand Held" }
					12    { "Docking Station" }
					13    { "All in One" }
					14    { "Sub Notebook" }
					15    { "Space-Saving" }
					16    { "Lunch Box" }
					17    { "Main System Chassis" }
					18    { "Expansion Chassis" }
					19    { "SubChassis" }
					20    { "Bus Expansion Chassis" }
					21    { "Peripheral Chassis" }
					22    { "Storage Chassis" }
					23    { "Rack Mount Chassis" }
					24    { "Sealed-Case PC" }
				}
			}
			function ConvertTo-SecurityStatus($Status)
			{
				switch ($Status)
				{
					1    { "Other" }
					2    { "Unknown" }
					3    { "None" }
					4    { "External Interface Locked Out" }
					5    { "External Interface Enabled" }
				}
			}
			
		}
		Process
		{
			
			Write-Verbose " [Get-SystemType] :: Process Start"
			if ($ComputerName -match "(.*)(\$)$")
			{
				$ComputerName = $ComputerName -replace "(.*)(\$)$", '$1'
			}
			if (Test-Host $ComputerName -TCPPort 135)
			{
				try
				{
					Write-Verbose " [Get-SystemType] :: Getting System (Enclosure) Type info use WMI"
					$SystemInfo = Get-WmiObject Win32_SystemEnclosure -ComputerName $ComputerName
					$CSInfo = Get-WmiObject -Query "Select Model FROM Win32_ComputerSystem" -ComputerName $ComputerName
					
					Write-Verbose " [Get-SystemType] :: Creating Hash Table"
					$myobj = @{ }
					Write-Verbose " [Get-SystemType] :: Setting ComputerName   - $ComputerName"
					$myobj.ComputerName = $ComputerName
					
					Write-Verbose " [Get-SystemType] :: Setting Manufacturer   - $($SystemInfo.Manufacturer)"
					$myobj.Manufacturer = $SystemInfo.Manufacturer
					
					Write-Verbose " [Get-SystemType] :: Setting Module   - $($CSInfo.Model)"
					$myobj.Model = $CSInfo.Model
					
					Write-Verbose " [Get-SystemType] :: Setting SerialNumber   - $($SystemInfo.SerialNumber)"
					$myobj.SerialNumber = $SystemInfo.SerialNumber
					
					Write-Verbose " [Get-SystemType] :: Setting SecurityStatus - $($SystemInfo.SecurityStatus)"
					$myobj.SecurityStatus = ConvertTo-SecurityStatus $SystemInfo.SecurityStatus
					
					Write-Verbose " [Get-SystemType] :: Setting Type           - $($SystemInfo.ChassisTypes)"
					$myobj.Type = ConvertTo-ChassisType $SystemInfo.ChassisTypes
					
					Write-Verbose " [Get-SystemType] :: Creating Custom Object"
					$obj = New-Object PSCustomObject -Property $myobj
					$obj.PSTypeNames.Clear()
					$obj.PSTypeNames.Add('BSonPosh.SystemType')
					$obj
				}
				catch
				{
					Write-Verbose " [Get-SystemType] :: [$ComputerName] Failed with Error: $($Error[0])"
				}
			}
			
		}
		
	}
	
	#endregion 
	
	#region Get-USB
	
	function Get-USB
	{
		    <#
		    .Synopsis
		        Gets USB devices attached to the system
		    .Description
		        Uses WMI to get the USB Devices attached to the system
		    .Example
		        Get-USB
		    .Example
		        Get-USB | Group-Object Manufacturer  
		    .Parameter ComputerName
		        The name of the computer to get the USB devices from
		    #>
		param ($computerName = "localhost")
		Get-WmiObject Win32_USBControllerDevice -ComputerName $ComputerName `
					  -Impersonation Impersonate -Authentication PacketPrivacy |
		Foreach-Object { [Wmi]$_.Dependent }
	}
	#endregion
	
	#region Get-UserTxtBox
	function Get-UserTxtBox
	{ $global:UserName_Txt = $usertextbox.Text }
	#endregion
	
	#region Get-LocalAdmins
	function get-localadmins
	{
		[cmdletbinding()]
		Param (
			[string]$computerName
		)
		$group = get-wmiobject win32_group -ComputerName $computerName -Filter "LocalAccount=True AND SID='S-1-5-32-544'"
		$query = "GroupComponent = `"Win32_Group.Domain='$($group.domain)'`,Name='$($group.name)'`""
		$list = Get-WmiObject win32_groupuser -ComputerName $computerName -Filter $query
		$list | %{ $_.PartComponent } | % { $_.substring($_.lastindexof("Domain=") + 7).replace("`",Name=`"", "\") }
	}
	#endregion Get-LocalAdmins
	
	#region Get-ComputerStats
	function Get-ComputerStats
	{
		param (
			[Parameter(Mandatory = $true, Position = 0,
					   ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true)]
			[ValidateNotNull()]
			[string[]]$ComputerNames
		)
		
		process
		{
			$avg = Get-WmiObject win32_processor -computername $computername |
			Measure-Object -property LoadPercentage -Average |
			Foreach { $_.Average }
			$mem = Get-WmiObject win32_operatingsystem -ComputerName $computername |
			Foreach { "{0:N2}" -f ((($_.TotalVisibleMemorySize - $_.FreePhysicalMemory) * 100)/ $_.TotalVisibleMemorySize) }
			new-object psobject -prop @{
				# Work on PowerShell V2 and below
				# [pscustomobject] [ordered] @{ # Only if on PowerShell V3
				AverageCpuLoad = $avg
				MemoryUsagePercent = $mem
			}
		}
	}
	#endregion Get-ComputerStats
	
	# New Functions
	
	#region New-RegistryKey 
	
	function New-RegistryKey
	{
		
		    <#
		        .Synopsis 
		            Creates a new key in the provide by Path.
		            
		        .Description
		            Creates a new key in the provide by Path.
		                        
		        .Parameter Path 
		            Path to create the key in.
		            
		        .Parameter ComputerName 
		            Computer to the create registry key on.
		            
		        .Parameter Name 
		            Name of the Key to create
		        
		        .Example
		            New-registrykey HKLM\Software\Adobe -Name DeleteMe
		            Description
		            -----------
		            Creates a key called DeleteMe under HKLM\Software\Adobe
		            
		        .Example
		            New-registrykey HKLM\Software\Adobe -Name DeleteMe -ComputerName MyServer1
		            Description
		            -----------
		            Creates a key called DeleteMe under HKLM\Software\Adobe on MyServer1
		                    
		        .OUTPUTS
		            Microsoft.Win32.RegistryKey
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            Get-RegistryKey
		            Remove-RegistryKey
		            Test-RegistryKey
		            
		        NAME:      New-RegistryKey
		        AUTHOR:    bsonposh
		        Website:   http://www.bsonposh.com
		        Version:   1
		        #Requires -Version 2.0
		    #>
		[Cmdletbinding(SupportsShouldProcess = $true)]
		Param (
			[Parameter(mandatory = $true)]
			[string]$Path,
			[Parameter(mandatory = $true)]
			[string]$Name,
			[Alias("Server")]
			[Parameter(ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:ComputerName
		)
		Begin
		{
			
			Write-Verbose " [New-RegistryKey] :: Start Begin"
			$ReadWrite = [Microsoft.Win32.RegistryKeyPermissionCheck]::ReadWriteSubTree
			
			Write-Verbose " [New-RegistryKey] :: `$Path = $Path"
			Write-Verbose " [New-RegistryKey] :: Getting `$Hive and `$KeyPath from $Path "
			$PathParts = $Path -split "\\|/", 0, "RegexMatch"
			$Hive = $PathParts[0]
			$KeyPath = $PathParts[1..$PathParts.count] -join "\"
			Write-Verbose " [New-RegistryKey] :: `$Hive = $Hive"
			Write-Verbose " [New-RegistryKey] :: `$KeyPath = $KeyPath"
			
			Write-Verbose " [New-RegistryKey] :: End Begin"
			
		}
		Process
		{
			
			Write-Verbose " [Get-RegistryKey] :: Start Process"
			Write-Verbose " [Get-RegistryKey] :: `$ComputerName = $ComputerName"
			
			$RegHive = Get-RegistryHive $hive
			
			if ($RegHive -eq 1)
			{
				Write-Host "Invalid Path: $Path, Registry Hive [$hive] is invalid!" -ForegroundColor Red
			}
			else
			{
				Write-Verbose " [Get-RegistryKey] :: `$RegHive = $RegHive"
				$BaseKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($RegHive, $ComputerName)
				Write-Verbose " [Get-RegistryKey] :: `$BaseKey = $BaseKey"
				$Key = $BaseKey.OpenSubKey($KeyPath, $True)
				if ($PSCmdlet.ShouldProcess($ComputerName, "Creating Key [$Name] under $Path"))
				{
					$Key.CreateSubKey($Name, $ReadWrite)
				}
			}
			Write-Verbose " [Get-RegistryKey] :: End Process"
			
		}
	}
	
	#endregion 
	
	#region New-RegistryValue 
	
	function New-RegistryValue
	{
		
		    <#
		        .Synopsis 
		            Create a value under the registry key.
		            
		        .Description
		            Create a value under the registry key.
		                        
		        .Parameter Path 
		            Path to the key.
		            
		        .Parameter Name 
		            Name of the Value to create.
		            
		        .Parameter Value 
		            Value to for the new Value.
		            
		        .Parameter Type
		            Type for the new Value. Valid Types: Unknown, String (default,) ExpandString, Binary, DWord, MultiString, a
		    nd Qword
		            
		        .Parameter ComputerName 
		            Computer to create the Value on.
		            
		        .Example
		            New-RegistryValue HKLM\SOFTWARE\Adobe\MyKey -Name State -Value "Hi There"
		            Description
		            -----------
		            Creates the Value State and sets the value to "Hi There" under HKLM\SOFTWARE\Adobe\MyKey.
		            
		        .Example
		            New-RegistryValue HKLM\SOFTWARE\Adobe\MyKey -Name State -Value 0 -ComputerName MyServer1
		            Description
		            -----------
		            Creates the Value State and sets the value to "Hi There" under HKLM\SOFTWARE\Adobe\MyKey on MyServer1.
		            
		        .Example
		            New-RegistryValue HKLM\SOFTWARE\Adobe\MyKey -Name MyDWord -Value 0 -Type DWord
		            Description
		            -----------
		            Creates the DWORD Value MyDWord and sets the value to 0 under HKLM\SOFTWARE\Adobe\MyKey.
		                    
		        .OUTPUTS
		            System.Boolean
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            New-RegistryValue
		            Remove-RegistryValue
		            Get-RegistryValue
		            
		        NAME:      Test-RegistryValue
		        AUTHOR:    bsonposh
		        Website:   http://www.bsonposh.com
		        Version:   1
		        #Requires -Version 2.0
		    #>
		
		[Cmdletbinding(SupportsShouldProcess = $true)]
		Param (
			[Parameter(mandatory = $true)]
			[string]$Path,
			[Parameter(mandatory = $true)]
			[string]$Name,
			[Parameter()]
			[string]$Value,
			[Parameter()]
			[string]$Type,
			[Alias("dnsHostName")]
			[Parameter(ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:ComputerName
		)
		Begin
		{
			
			Write-Verbose " [New-RegistryValue] :: Start Begin"
			Write-Verbose " [New-RegistryValue] :: `$Path = $Path"
			Write-Verbose " [New-RegistryValue] :: `$Name = $Name"
			Write-Verbose " [New-RegistryValue] :: `$Value = $Value"
			
			Switch ($Type)
			{
				"Unknown"       { $ValueType = [Microsoft.Win32.RegistryValueKind]::Unknown; continue }
				"String"        { $ValueType = [Microsoft.Win32.RegistryValueKind]::String; continue }
				"ExpandString"  { $ValueType = [Microsoft.Win32.RegistryValueKind]::ExpandString; continue }
				"Binary"        { $ValueType = [Microsoft.Win32.RegistryValueKind]::Binary; continue }
				"DWord"         { $ValueType = [Microsoft.Win32.RegistryValueKind]::DWord; continue }
				"MultiString"   { $ValueType = [Microsoft.Win32.RegistryValueKind]::MultiString; continue }
				"QWord"         { $ValueType = [Microsoft.Win32.RegistryValueKind]::QWord; continue }
				default { $ValueType = [Microsoft.Win32.RegistryValueKind]::String; continue }
			}
			Write-Verbose " [New-RegistryValue] :: `$Type = $Type"
			Write-Verbose " [New-RegistryValue] :: End Begin"
			
		}
		
		Process
		{
			
			if (Test-RegistryValue -Path $path -Name $Name -ComputerName $ComputerName)
			{
				"Registry value already exist"
			}
			else
			{
				Write-Verbose " [New-RegistryValue] :: Start Process"
				Write-Verbose " [New-RegistryValue] :: Calling Get-RegistryKey -Path $path -ComputerName $ComputerName"
				$Key = Get-RegistryKey -Path $path -ComputerName $ComputerName -ReadWrite
				Write-Verbose " [New-RegistryValue] :: Get-RegistryKey returned $Key"
				Write-Verbose " [New-RegistryValue] :: Setting Value for [$Name]"
				if ($PSCmdlet.ShouldProcess($ComputerName, "Creating Value [$Name] under $Path with value [$Value]"))
				{
					if ($Value)
					{
						$Key.SetValue($Name, $Value, $ValueType)
					}
					else
					{
						$Key.SetValue($Name, $ValueType)
					}
					Write-Verbose " [New-RegistryValue] :: Returning New Key: Get-RegistryValue -Path $path -Name $Name -ComputerName $ComputerName"
					Get-RegistryValue -Path $path -Name $Name -ComputerName $ComputerName
				}
			}
			Write-Verbose " [New-RegistryValue] :: End Process"
			
		}
	}
	
	#endregion 
	
	# Load Functions
	
	#region Load-ComboBox
	function Load-ComboBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
	
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
	
		.PARAMETER  ComboBox
			The ComboBox control you want to add items to.
	
		.PARAMETER  Items
			The object or objects you wish to load into the ComboBox's Items collection.
	
		.PARAMETER  DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER  Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Load-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Load-ComboBox $combobox1 "Red" -Append
			Load-ComboBox $combobox1 "White" -Append
			Load-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Load-ComboBox $combobox1 (Get-Process) "ProcessName"
	#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.ComboBox]$ComboBox,
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]$DisplayMember,
			[switch]$Append
		)
		
		if (-not $Append)
		{
			$ComboBox.Items.Clear()
		}
		
		if ($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [Array])
		{
			$ComboBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ComboBox.Items.Add($obj)
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)
		}
		
		$ComboBox.DisplayMember = $DisplayMember
	}
	#endregion Load-Combobox
	
	#region Load-Chart
	function Load-Chart
	{
	<#
		.SYNOPSIS
			This functions helps you plot points on a chart
	
		.DESCRIPTION
			Use the function to plot points on a chart or add more charts to a chart control
	
		.PARAMETER  ChartControl
			The Chart Control you when to add points to
	
		.PARAMETER  XPoints
			Set the X Axis Points. These can be strings or numerical values.
	
		.PARAMETER  YPoints
			Set the Y Axis Points. These can be strings or numerical values.
		
		.PARAMETER  XTitle
			Set the Title for the X Axis.
	
		.PARAMETER  YTitle
			Set the Title for the Y Axis.
		
		.PARAMETER  Title
			Set the Title for the chart.
		
		.PARAMETER  ChartType
			Set the Style of the chart. See System.Windows.Forms.DataVisualization.Charting.SeriesChartType Enum
	
		.PARAMETER SeriesIndex
			Set the settings of a particular Series and corresponding ChartArea
	
		.PARAMETER TitleIndex
			Set the settings of a particular Title
		
		.PARAMETER SeriesName
			Set the settings of a particular Series using its name and corresponding ChartArea. 
			The Series will be created if not found.
			If SeriesIndex is set, it will replace the Series' name if the Series does not exist
		
		.PARAMETER Enable3D
			The chart will be rendered in 3D.
		
		.PARAMETER Disable3D
			The chart will be rendered in 2D.	
		
		.PARAMETER Append
			When this switch is used, a new ChartArea is added to Chart Control.
	
		.LINK
			http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
		
	#>
		Param (#$XPoints, $YPoints, $XTitle, $YTitle, $Title, $ChartStyle)
			[ValidateNotNull()]
			[Parameter(Position = 1, Mandatory = $true)]
			[System.Windows.Forms.DataVisualization.Charting.Chart]
			$ChartControl
			,
			[ValidateNotNull()]
			[Parameter(Position = 2, Mandatory = $true)]
			$XPoints
			,
			[Parameter(Position = 3, Mandatory = $true)]
			$YPoints
			,
			[Parameter(Position = 4, Mandatory = $false)]
			[string]$XTitle
			,
			[Parameter(Position = 5, Mandatory = $false)]
			[string]$YTitle
			,
			[Parameter(Position = 6, Mandatory = $false)]
			[string]$Title
			,
			[Parameter(Position = 7, Mandatory = $false)]
			[System.Windows.Forms.DataVisualization.Charting.SeriesChartType]
			$ChartType
			,
			[Parameter(Position = 8, Mandatory = $false)]
			$SeriesIndex = -1
			,
			[Parameter(Position = 9, Mandatory = $false)]
			$TitleIndex = 0,
			[Parameter(Mandatory = $false)]
			[string]$SeriesName = $null,
			[switch]$Enable3D,
			[switch]$Disable3D,
			[switch]$Append)
		
		$ChartAreaIndex = 0
		if ($Append)
		{
			$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
			$ChartArea = $ChartControl.ChartAreas.Add($name)
			$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
			
			$name = "Series " + ($ChartControl.Series.Count + 1).ToString();
			$Series = $ChartControl.Series.Add($name)
			$SeriesIndex = $ChartControl.Series.Count - 1
			
			$Series.ChartArea = $ChartArea.Name
			
			if ($Title)
			{
				$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
				$TitleObj = $ChartControl.Titles.Add($Title)
				$TitleIndex = $ChartControl.Titles.Count - 1
				$TitleObj.DockedToChartArea = $ChartArea.Name
				$TitleObj.IsDockedInsideChartArea = $false
			}
		}
		else
		{
			if ($ChartControl.ChartAreas.Count -eq 0)
			{
				$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
				[void]$ChartControl.ChartAreas.Add($name)
				$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
			}
			
			if ($ChartControl.Series.Count -eq 0)
			{
				if (-not $SeriesName)
				{
					$SeriesName = "Series " + ($ChartControl.Series.Count + 1).ToString();
				}
				
				$Series = $ChartControl.Series.Add($SeriesName)
				$SeriesIndex = $ChartControl.Series.Count - 1
				$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
			}
			elseif ($SeriesName)
			{
				$Series = $ChartControl.Series.FindByName($SeriesName)
				
				if ($Series -eq $null)
				{
					if (($SeriesIndex -gt -1) -and ($SeriesIndex -lt $ChartControl.Series.Count))
					{
						$Series = $ChartControl.Series[$SeriesIndex]
						$Series.Name = $SeriesName
					}
					else
					{
						$Series = $ChartControl.Series.Add($SeriesName)
						$SeriesIndex = $ChartControl.Series.Count - 1
					}
					
					$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
				}
				else
				{
					$SeriesIndex = $ChartControl.Series.IndexOf($Series)
					$ChartAreaIndex = $ChartControl.ChartAreas.IndexOf($Series.ChartArea)
				}
			}
		}
		
		if (($SeriesIndex -lt 0) -or ($SeriesIndex -ge $ChartControl.Series.Count))
		{
			$SeriesIndex = 0
		}
		
		$Series = $ChartControl.Series[$SeriesIndex]
		$Series.Points.Clear()
		$ChartArea = $ChartControl.ChartAreas[$Series.ChartArea]
		
		if ($Enable3D)
		{
			$ChartArea.Area3DStyle.Enable3D = $true
		}
		elseif ($Disable3D)
		{
			$ChartArea.Area3DStyle.Enable3D = $false
		}
		
		if ($Title)
		{
			if ($ChartControl.Titles.Count -eq 0)
			{
				#$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
				$TitleObj = $ChartControl.Titles.Add($Title)
				$TitleIndex = $ChartControl.Titles.Count - 1
				$TitleObj.DockedToChartArea = $ChartArea.Name
				$TitleObj.IsDockedInsideChartArea = $false
			}
			
			$ChartControl.Titles[$TitleIndex].Text = $Title
		}
		
		if ($ChartType)
		{
			$Series.ChartType = $ChartType
		}
		
		if ($XTitle)
		{
			$ChartArea.AxisX.Title = $XTitle
		}
		
		if ($YTitle)
		{
			$ChartArea.AxisY.Title = $YTitle
		}
		
		if ($XPoints -isnot [Array] -or $XPoints -isnot [System.Collections.IEnumerable])
		{
			$array = New-Object System.Collections.ArrayList
			$array.Add($XPoints)
			$XPoints = $array
		}
		
		if ($YPoints -isnot [Array] -or $YPoints -isnot [System.Collections.IEnumerable])
		{
			$array = New-Object System.Collections.ArrayList
			$array.Add($YPoints)
			$YPoints = $array
		}
		
		$Series.Points.DataBindXY($XPoints, $YPoints)
		
	}
	#endregion Load-Chart
	
	#region Load-ListBox
	function Load-ListBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ListBox or CheckedListBox.
	
		.DESCRIPTION
			Use this function to dynamically load items into the ListBox control.
	
		.PARAMETER  ListBox
			The ListBox control you want to add items to.
	
		.PARAMETER  Items
			The object or objects you wish to load into the ListBox's Items collection.
	
		.PARAMETER  DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER  Append
			Adds the item(s) to the ListBox without clearing the Items collection.
		
		.EXAMPLE
			Load-ListBox $ListBox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Load-ListBox $listBox1 "Red" -Append
			Load-ListBox $listBox1 "White" -Append
			Load-ListBox $listBox1 "Blue" -Append
		
		.EXAMPLE
			Load-ListBox $listBox1 (Get-Process) "ProcessName"
	#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.ListBox]$ListBox,
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]$DisplayMember,
			[switch]$Append
		)
		
		if (-not $Append)
		{
			$listBox.Items.Clear()
		}
		
		if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
		{
			$listBox.Items.AddRange($Items)
		}
		elseif ($Items -is [Array])
		{
			$listBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$listBox.Items.Add($obj)
			}
			$listBox.EndUpdate()
		}
		else
		{
			$listBox.Items.Add($Items)
		}
		
		$listBox.DisplayMember = $DisplayMember
	}
	#endregion Load-ListBo
	
	# Remove Functions
	
	#region Remove-RegistryKey 
	
	function Remove-RegistryKey
	{
		
		    <#
		        .Synopsis 
		            Removes a new key in the provide by Path.
		            
		        .Description
		            Removes a new key in the provide by Path.
		                        
		        .Parameter Path 
		            Path to remove the registry key from.
		            
		        .Parameter ComputerName 
		            Computer to remove the registry key from.
		            
		        .Parameter Name 
		            Name of the registry key to remove.
		            
		        .Parameter Recurse 
		            Recursively removes registry key and all children from path.
		        
		        .Example
		            Remove-registrykey HKLM\Software\Adobe -Name DeleteMe
		            Description
		            -----------
		            Removes the registry key called DeleteMe under HKLM\Software\Adobe
		            
		        .Example
		            Remove-RegistryKey HKLM\Software\Adobe -Name DeleteMe -ComputerName MyServer1
		            Description
		            -----------
		            Removes the key called DeleteMe under HKLM\Software\Adobe on MyServer1
		            
		        .Example
		            Remove-RegistryKey HKLM\Software\Adobe -Name DeleteMe -ComputerName MyServer1 -Recurse
		            Description
		            -----------
		            Removes the key called DeleteMe under HKLM\Software\Adobe on MyServer1 and all child keys.
		                    
		        .OUTPUTS
		            $null
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            Get-RegistryKey
		            New-RegistryKey
		            Test-RegistryKey
		            
		        .Notes
		        NAME:      Remove-RegistryKey
		        AUTHOR:    bsonposh
		        Website:   http://www.bsonposh.com
		        Version:   1
		        #Requires -Version 2.0
		    #>
		
		[Cmdletbinding(SupportsShouldProcess = $true)]
		Param (
			
			[Parameter(mandatory = $true)]
			[string]$Path,
			[Parameter(mandatory = $true)]
			[string]$Name,
			[Alias("Server")]
			[Parameter(ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:ComputerName,
			[Parameter()]
			[switch]$Recurse
		)
		Begin
		{
			
			Write-Verbose " [Remove-RegistryKey] :: Start Begin"
			
			Write-Verbose " [Remove-RegistryKey] :: `$Path = $Path"
			Write-Verbose " [Remove-RegistryKey] :: Getting `$Hive and `$KeyPath from $Path "
			$PathParts = $Path -split "\\|/", 0, "RegexMatch"
			$Hive = $PathParts[0]
			$KeyPath = $PathParts[1..$PathParts.count] -join "\"
			Write-Verbose " [Remove-RegistryKey] :: `$Hive = $Hive"
			Write-Verbose " [Remove-RegistryKey] :: `$KeyPath = $KeyPath"
			
			Write-Verbose " [Remove-RegistryKey] :: End Begin"
			
		}
		
		Process
		{
			
			Write-Verbose " [Remove-RegistryKey] :: Start Process"
			Write-Verbose " [Remove-RegistryKey] :: `$ComputerName = $ComputerName"
			
			if (Test-RegistryKey -Path $path\$name -ComputerName $ComputerName)
			{
				$RegHive = Get-RegistryHive $hive
				
				if ($RegHive -eq 1)
				{
					Write-Host "Invalid Path: $Path, Registry Hive [$hive] is invalid!" -ForegroundColor Red
				}
				else
				{
					Write-Verbose " [Remove-RegistryKey] :: `$RegHive = $RegHive"
					$BaseKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($RegHive, $ComputerName)
					Write-Verbose " [Remove-RegistryKey] :: `$BaseKey = $BaseKey"
					
					$Key = $BaseKey.OpenSubKey($KeyPath, $True)
					
					if ($PSCmdlet.ShouldProcess($ComputerName, "Deleteing Key [$Name]"))
					{
						if ($Recurse)
						{
							Write-Verbose " [Remove-RegistryKey] :: Calling DeleteSubKeyTree($Name)"
							$Key.DeleteSubKeyTree($Name)
						}
						else
						{
							Write-Verbose " [Remove-RegistryKey] :: Calling DeleteSubKey($Name)"
							$Key.DeleteSubKey($Name)
						}
					}
				}
			}
			else
			{
				"Key [$path\$name] does not exist"
			}
			Write-Verbose " [Remove-RegistryKey] :: End Process"
			
		}
	}
	
	#endregion 
	
	#region Remove-RegistryValue 
	
	function Remove-RegistryValue
	{
		
		    <#
		        .Synopsis 
		            Removes the value.
		            
		        .Description
		            Removes the value.
		                        
		        .Parameter Path 
		            Path to the key that contains the value.
		            
		        .Parameter Name 
		            Name of the Value to Remove.
		    
		        .Parameter ComputerName 
		            Computer to remove value from.
		            
		        .Example
		            Remove-RegistryValue HKLM\SOFTWARE\Adobe\MyKey -Name State
		            Description
		            -----------
		            Removes the value STATE under HKLM\SOFTWARE\Adobe\MyKey.
		            
		        .Example
		            Remove-RegistryValue HKLM\Software\Adobe\MyKey -Name State -ComputerName MyServer1
		            Description
		            -----------
		            Removes the value STATE under HKLM\SOFTWARE\Adobe\MyKey on MyServer1.
		                    
		        .OUTPUTS
		            $null
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            New-RegistryValue
		            Test-RegistryValue
		            Get-RegistryValue
		            Set-RegistryValue
		            
		        NAME:      Remove-RegistryValue
		        AUTHOR:    bsonposh
		        Website:   http://www.bsonposh.com
		        Version:   1
		        #Requires -Version 2.0
		    #>
		
		[Cmdletbinding(SupportsShouldProcess = $true)]
		Param (
			[Parameter(mandatory = $true)]
			[string]$Path,
			[Parameter(mandatory = $true)]
			[string]$Name,
			[Alias("dnsHostName")]
			[Parameter(ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:ComputerName
		)
		Begin
		{
			
			Write-Verbose " [Remove-RegistryValue] :: Start Begin"
			
			Write-Verbose " [Remove-RegistryValue] :: `$Path = $Path"
			Write-Verbose " [Remove-RegistryValue] :: `$Name = $Name"
			
			Write-Verbose " [Remove-RegistryValue] :: End Begin"
			
		}
		
		Process
		{
			
			if (Test-RegistryValue -Path $path -Name $Name -ComputerName $ComputerName)
			{
				Write-Verbose " [Remove-RegistryValue] :: Start Process"
				Write-Verbose " [Remove-RegistryValue] :: Calling Get-RegistryKey -Path $path -ComputerName $ComputerName"
				$Key = Get-RegistryKey -Path $path -ComputerName $ComputerName -ReadWrite
				Write-Verbose " [Remove-RegistryValue] :: Get-RegistryKey returned $Key"
				Write-Verbose " [Remove-RegistryValue] :: Setting Value for [$Name]"
				if ($PSCmdlet.ShouldProcess($ComputerName, "Deleting Value [$Name] under $Path"))
				{
					$Key.DeleteValue($Name)
				}
			}
			else
			{
				"Registry Value is already gone"
			}
			
			Write-Verbose " [Remove-RegistryValue] :: End Process"
			
		}
	}
	
	#endregion 
	
	# Runner Functions
	
	#region Run-RemoteCMD
	#http://gallery.technet.microsoft.com/scriptcenter/56962f03-0243-4c83-8cdd-88c37898ccc4
	function Run-RemoteCMD
	{
		param (
			[Parameter(Mandatory = $true, valuefrompipeline = $true)]
			[string]$ComputerName,
			[string]$Command)
		begin
		{
			
			[string]$cmd = "CMD.EXE /C " + $command
		}
		process
		{
			$newproc = Invoke-WmiMethod -class Win32_process -name Create -ArgumentList ($cmd) -ComputerName $ComputerName
			if ($newproc.ReturnValue -eq 0)
			{ Add-RichTextBoxOK "Command $($command) invoked Sucessfully on $($ComputerName)" }
			# if command is sucessfully invoked it doesn't mean that it did what its supposed to do 
			#it means that the command only sucessfully ran on the cmd.exe of the server 
			#syntax errors can occur due to user input  
		}
		End { Write-Output "Script ...END" }
	}
	#endregion
	
	# Searcher Functions
	
	#region Search-Registry 
	
	function Search-Registry
	{
		
		    <#
		        .Synopsis 
		            Searchs the Registry.
		            
		        .Description
		            Searchs the Registry.
		                        
		        .Parameter Filter 
		            The RegEx filter you want to search for.
		            
		        .Parameter Name 
		            Name of the Key or Value you want to search for.
		        
		        .Parameter Value
		            Value to search for (Registry Values only.)
		            
		        .Parameter Path
		            Base of the Search. Should be in this format: "Software\Microsoft\..." See the Examples for specific exampl
		    es.
		            
		        .Parameter Hive
		            The Base Hive to search in (Default to LocalMachine.)
		            
		        .Parameter ComputerName 
		            Computer to search.
		            
		        .Parameter KeyOnly
		            Only returns Registry Keys. Not valid with -value parameter.
		            
		        .Example
		            Search-Registry -Hive HKLM -Filter "Powershell" -Path "SOFTWARE\Clients"
		            Description
		            -----------
		            Searchs the Registry for Keys or Values that match 'Powershell" in path "SOFTWARE\Clients"
		            
		        .Example
		            Search-Registry -Hive HKLM -Filter "Powershell" -Path "SOFTWARE\Clients" -computername MyServer1
		            Description
		            -----------
		            Searchs the Registry for Keys or Values that match 'Powershell" in path "SOFTWARE\Clients" on MyServer1
		            
		        .Example
		            Search-Registry -Hive HKLM -Name "Powershell" -Path "SOFTWARE\Clients"
		            Description
		            -----------
		            Searchs the Registry keys and values with name 'Powershell' in "SOFTWARE\Clients"
		            
		        .Example
		            Search-Registry -Hive HKLM -Name "Powershell" -Path "SOFTWARE\Clients" -KeyOnly
		            Description
		            -----------
		            Searchs the Registry keys with name 'Powershell' in "SOFTWARE\Clients"
		        
		        .Example
		            Search-Registry -Hive HKLM -Value "Powershell" -Path "SOFTWARE\Clients"
		            Description
		            -----------
		            Searchs the Registry Values with Value of 'Powershell' in "SOFTWARE\Clients"
		            
		        .OUTPUTS
		            Microsoft.Win32.RegistryKey
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            Get-RegistryKey
		            Get-RegistryValue
		            Test-RegistryKey
		        
		        .Notes
		            NAME:      Search-Registry
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding(DefaultParameterSetName = "ByFilter")]
		Param (
			[Parameter(ParameterSetName = "ByFilter", Position = 0)]
			[string]$Filter = ".*",
			[Parameter(ParameterSetName = "ByName", Position = 0)]
			[string]$Name,
			[Parameter(ParameterSetName = "ByValue", Position = 0)]
			[string]$Value,
			[Parameter()]
			[string]$Path,
			[Parameter()]
			[string]$Hive = "LocalMachine",
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME,
			[Parameter()]
			[switch]$KeyOnly
		)
		Begin
		{
			
			Write-Verbose " [Search-Registry] :: Start Begin"
			
			Write-Verbose " [Search-Registry] :: Active Parameter Set $($PSCmdlet.ParameterSetName)"
			switch ($PSCmdlet.ParameterSetName)
			{
				"ByFilter"    { Write-Verbose " [Search-Registry] :: `$Filter = $Filter" }
				"ByName"    { Write-Verbose " [Search-Registry] :: `$Name = $Name" }
				"ByValue"    { Write-Verbose " [Search-Registry] :: `$Value = $Value" }
			}
			$RegHive = Get-RegistryHive $Hive
			Write-Verbose " [Search-Registry] :: `$Hive = $RegHive"
			Write-Verbose " [Search-Registry] :: `$KeyOnly = $KeyOnly"
			
			Write-Verbose " [Search-Registry] :: End Begin"
			
		}
		
		Process
		{
			
			Write-Verbose " [Search-Registry] :: Start Process"
			
			Write-Verbose " [Search-Registry] :: `$ComputerName = $ComputerName"
			switch ($PSCmdlet.ParameterSetName)
			{
				"ByFilter"    {
					if ($KeyOnly)
					{
						if ($Path -and (Test-RegistryKey "$RegHive\$Path"))
						{
							Get-RegistryKey -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{ $_.Name -match "$Filter" }
						}
						else
						{
							$BaseKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($RegHive, $ComputerName)
							foreach ($SubKeyName in $BaseKey.GetSubKeyNames())
							{
								try
								{
									$SubKey = $BaseKey.OpenSubKey($SubKeyName, $true)
									Get-RegistryKey -Path $SubKey.Name -ComputerName $ComputerName -Recurse | ?{ $_.Name -match "$Filter" }
								}
								catch
								{
									Write-Host "Access Error on Key [$SubKeyName]... skipping."
								}
							}
						}
					}
					else
					{
						if ($Path -and (Test-RegistryKey "$RegHive\$Path"))
						{
							Get-RegistryKey -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{ $_.Name -match "$Filter" }
							Get-RegistryValue -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{ $_.Name -match "$Filter" }
						}
						else
						{
							$BaseKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($RegHive, $ComputerName)
							foreach ($SubKeyName in $BaseKey.GetSubKeyNames())
							{
								try
								{
									$SubKey = $BaseKey.OpenSubKey($SubKeyName, $true)
									Get-RegistryKey -Path $SubKey.Name -ComputerName $ComputerName -Recurse | ?{ $_.Name -match "$Filter" }
									Get-RegistryValue -Path $SubKey.Name -ComputerName $ComputerName -Recurse | ?{ $_.Name -match "$Filter" }
								}
								catch
								{
									Write-Host "Access Error on Key [$SubKeyName]... skipping."
								}
							}
						}
					}
				}
				"ByName"    {
					if ($KeyOnly)
					{
						if ($Path -and (Test-RegistryKey "$RegHive\$Path"))
						{
							$NameFilter = "^.*\\{0}$" -f $Name
							Get-RegistryKey -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{ $_.Name -match $NameFilter }
						}
						else
						{
							$BaseKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($RegHive, $ComputerName)
							foreach ($SubKeyName in $BaseKey.GetSubKeyNames())
							{
								try
								{
									$SubKey = $BaseKey.OpenSubKey($SubKeyName, $true)
									$NameFilter = "^.*\\{0}$" -f $Name
									Get-RegistryKey -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{ $_.Name -match $NameFilter }
								}
								catch
								{
									Write-Host "Access Error on Key [$SubKeyName]... skipping."
								}
							}
						}
					}
					else
					{
						if ($Path -and (Test-RegistryKey "$RegHive\$Path"))
						{
							$NameFilter = "^.*\\{0}$" -f $Name
							Get-RegistryKey -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{ $_.Name -match $NameFilter }
							Get-RegistryValue -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{ $_.Name -eq $Name }
						}
						else
						{
							$BaseKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($RegHive, $ComputerName)
							foreach ($SubKeyName in $BaseKey.GetSubKeyNames())
							{
								try
								{
									$SubKey = $BaseKey.OpenSubKey($SubKeyName, $true)
									$NameFilter = "^.*\\{0}$" -f $Name
									Get-RegistryKey -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{ $_.Name -match $NameFilter }
									Get-RegistryValue -Path $SubKey.Name -ComputerName $ComputerName -Recurse | ?{ $_.Name -eq $Name }
								}
								catch
								{
									Write-Host "Access Error on Key [$SubKeyName]... skipping."
								}
							}
						}
					}
				}
				"ByValue"    {
					if ($Path -and (Test-RegistryKey "$RegHive\$Path"))
					{
						Get-RegistryValue -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{ $_.Value -eq $Value }
					}
					else
					{
						$BaseKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($RegHive, $ComputerName)
						foreach ($SubKeyName in $BaseKey.GetSubKeyNames())
						{
							try
							{
								$SubKey = $BaseKey.OpenSubKey($SubKeyName, $true)
								Get-RegistryValue -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{ $_.Value -eq $Value }
							}
							catch
							{
								Write-Host "Access Error on Key [$SubKeyName]... skipping."
							}
						}
					}
				}
			}
			
			Write-Verbose " [Search-Registry] :: End Process"
			
		}
	}
	
	#endregion 
	
	# Sender Functions
	
	#region Send-WOL
	function Send-WOL
	{
	<#  
	  .SYNOPSIS   
	    Send a WOL packet to a broadcast address 
	  .PARAMETER mac 
	   The MAC address of the device that need to wake up 
	  .PARAMETER ip 
	   The IP address where the WOL packet will be sent to 
	  .EXAMPLE  
	   Send-WOL -mac 00:11:32:21:2D:11 -ip 192.168.8.255  
	#>	
		
		param (
			[string]$mac,
			[string]$ip,
			[int]$port = 9
		)
		$broadcast = [Net.IPAddress]::Parse($ip)
		
		$mac = (($mac.replace(":", "")).replace("-", "")).replace(".", "")
		$target = 0, 2, 4, 6, 8, 10 | % { [convert]::ToByte($mac.substring($_, 2), 16) }
		$packet = (, [byte]255 * 6) + ($target * 16)
		
		$UDPclient = new-Object System.Net.Sockets.UdpClient
		$UDPclient.Connect($broadcast, $port)
		[void]$UDPclient.Send($packet, 102)
		
	}
	#endregion Send-WOL
	
	# Setter Functions
	
	#region Set-RegistryValue 
	
	function Set-RegistryValue
	{
		
		    <#
		        .Synopsis 
		            Sets a value under the registry key.
		            
		        .Description
		            Sets a value under the registry key.
		                        
		        .Parameter Path 
		            Path to the key.
		            
		        .Parameter Name 
		            Name of the Value to Set.
		            
		        .Parameter Value 
		            New Value.
		            
		        .Parameter Type
		            Type for the Value. Valid Types: Unknown, String (default,) ExpandString, Binary, DWord, MultiString, and Q
		    word
		            
		        .Parameter ComputerName 
		            Computer to set the Value on.
		            
		        .Example
		            Set-RegistryValue HKLM\SOFTWARE\Adobe\MyKey -Name State -Value "Hi There"
		            Description
		            -----------
		            Sets the Value State and sets the value to "Hi There" under HKLM\SOFTWARE\Adobe\MyKey.
		            
		        .Example
		            Set-RegistryValue HKLM\SOFTWARE\Adobe\MyKey -Name State -Value 0 -ComputerName MyServer1
		            Description
		            -----------
		            Sets the Value State and sets the value to "Hi There" under HKLM\SOFTWARE\Adobe\MyKey on MyServer1.
		            
		        .Example
		            Set-RegistryValue HKLM\SOFTWARE\Adobe\MyKey -Name MyDWord -Value 0 -Type DWord
		            Description
		            -----------
		            Sets the DWORD Value MyDWord and sets the value to 0 under HKLM\SOFTWARE\Adobe\MyKey.
		            
		        .OUTPUTS
		            PSCustomObject
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            New-RegistryValue
		            Remove-RegistryValue
		            Get-RegistryValue
		            Test-RegistryValue
		        
		        .Notes
		            NAME:      Set-RegistryValue
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding(SupportsShouldProcess = $true)]
		Param (
			[Parameter(mandatory = $true)]
			[string]$Path,
			[Parameter(mandatory = $true)]
			[string]$Name,
			[Parameter()]
			[string]$Value,
			[Parameter()]
			[string]$Type,
			[Alias("dnsHostName")]
			[Parameter(ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:ComputerName
		)
		
		Begin
		{
			
			Write-Verbose " [Set-RegistryValue] :: Start Begin"
			
			Write-Verbose " [Set-RegistryValue] :: `$Path = $Path"
			Write-Verbose " [Set-RegistryValue] :: `$Name = $Name"
			Write-Verbose " [Set-RegistryValue] :: `$Value = $Value"
			
			Switch ($Type)
			{
				"Unknown"       { $ValueType = [Microsoft.Win32.RegistryValueKind]::Unknown; continue }
				"String"        { $ValueType = [Microsoft.Win32.RegistryValueKind]::String; continue }
				"ExpandString"  { $ValueType = [Microsoft.Win32.RegistryValueKind]::ExpandString; continue }
				"Binary"        { $ValueType = [Microsoft.Win32.RegistryValueKind]::Binary; continue }
				"DWord"         { $ValueType = [Microsoft.Win32.RegistryValueKind]::DWord; continue }
				"MultiString"   { $ValueType = [Microsoft.Win32.RegistryValueKind]::MultiString; continue }
				"QWord"         { $ValueType = [Microsoft.Win32.RegistryValueKind]::QWord; continue }
				default { $ValueType = [Microsoft.Win32.RegistryValueKind]::String; continue }
			}
			Write-Verbose " [Set-RegistryValue] :: `$Type = $Type"
			
			Write-Verbose " [Set-RegistryValue] :: End Begin"
			
		}
		
		Process
		{
			
			Write-Verbose " [Set-RegistryValue] :: Start Process"
			
			Write-Verbose " [Set-RegistryValue] :: Calling Get-RegistryKey -Path $path -ComputerName $ComputerName"
			$Key = Get-RegistryKey -Path $path -ComputerName $ComputerName -ReadWrite
			Write-Verbose " [Set-RegistryValue] :: Get-RegistryKey returned $Key"
			Write-Verbose " [Set-RegistryValue] :: Setting Value for [$Name]"
			if ($PSCmdlet.ShouldProcess($ComputerName, "Creating Value [$Name] under $Path with value [$Value]"))
			{
				if ($Value)
				{
					$Key.SetValue($Name, $Value, $ValueType)
				}
				else
				{
					$Key.SetValue($Name, $ValueType)
				}
				Write-Verbose " [Set-RegistryValue] :: Returning New Key: Get-RegistryValue -Path $path -Name $Name -ComputerName $ComputerName"
				Get-RegistryValue -Path $path -Name $Name -ComputerName $ComputerName
			}
			Write-Verbose " [Set-RegistryValue] :: End Process"
			
		}
	}
	
	#endregion 
	
	# Show Functions
	
	#region Show-MsgBox
		<# 
		            .SYNOPSIS  
		            Shows a graphical message box, with various prompt types available. 
		 
		            .DESCRIPTION 
		            Emulates the Visual Basic MsgBox function.  It takes four parameters, of which only the prompt is mandatory 
		 
		            .INPUTS 
		            The parameters are:- 
		             
		            Prompt (mandatory):  
		                Text string that you wish to display 
		                 
		            Title (optional): 
		                The title that appears on the message box 
		                 
		            Icon (optional).  Available options are: 
		                Information, Question, Critical, Exclamation (not case sensitive) 
		                
		            BoxType (optional). Available options are: 
		                OKOnly, OkCancel, AbortRetryIgnore, YesNoCancel, YesNo, RetryCancel (not case sensitive) 
		                 
		            DefaultButton (optional). Available options are: 
		                1, 2, 3 
		 
		            .OUTPUTS 
		            Microsoft.VisualBasic.MsgBoxResult 
		 
		            .EXAMPLE 
		            C:\PS> Show-MsgBox Hello 
		            Shows a popup message with the text "Hello", and the default box, icon and defaultbutton settings. 
		 
		            .EXAMPLE 
		            C:\PS> Show-MsgBox -Prompt "This is the prompt" -Title "This Is The Title" -Icon Critical -BoxType YesNo -DefaultButton 2 
		            Shows a popup with the parameter as supplied. 
		 
		            .LINK 
		            http://msdn.microsoft.com/en-us/library/microsoft.visualbasic.msgboxresult.aspx 
		 
		            .LINK 
		            http://msdn.microsoft.com/en-us/library/microsoft.visualbasic.msgboxstyle.aspx 
		            #>
	# By BigTeddy August 24, 2011 
	# http://social.technet.microsoft.com/profile/bigteddy/. 
	
	function Show-MsgBox
	{
		
		[CmdletBinding()]
		param (
			[Parameter(Position = 0, Mandatory = $true)]
			[string]$Prompt,
			[Parameter(Position = 1, Mandatory = $false)]
			[string]$Title = "",
			[Parameter(Position = 2, Mandatory = $false)]
			[ValidateSet("Information", "Question", "Critical", "Exclamation")]
			[string]$Icon = "Information",
			[Parameter(Position = 3, Mandatory = $false)]
			[ValidateSet("OKOnly", "OKCancel", "AbortRetryIgnore", "YesNoCancel", "YesNo", "RetryCancel")]
			[string]$BoxType = "OkOnly",
			[Parameter(Position = 4, Mandatory = $false)]
			[ValidateSet(1, 2, 3)]
			[int]$DefaultButton = 1
		)
		[System.Reflection.Assembly]::LoadWithPartialName("Microsoft.VisualBasic") | Out-Null
		switch ($Icon)
		{
			"Question" { $vb_icon = [microsoft.visualbasic.msgboxstyle]::Question }
			"Critical" { $vb_icon = [microsoft.visualbasic.msgboxstyle]::Critical }
			"Exclamation" { $vb_icon = [microsoft.visualbasic.msgboxstyle]::Exclamation }
			"Information" { $vb_icon = [microsoft.visualbasic.msgboxstyle]::Information }
		}
		switch ($BoxType)
		{
			"OKOnly" { $vb_box = [microsoft.visualbasic.msgboxstyle]::OKOnly }
			"OKCancel" { $vb_box = [microsoft.visualbasic.msgboxstyle]::OkCancel }
			"AbortRetryIgnore" { $vb_box = [microsoft.visualbasic.msgboxstyle]::AbortRetryIgnore }
			"YesNoCancel" { $vb_box = [microsoft.visualbasic.msgboxstyle]::YesNoCancel }
			"YesNo" { $vb_box = [microsoft.visualbasic.msgboxstyle]::YesNo }
			"RetryCancel" { $vb_box = [microsoft.visualbasic.msgboxstyle]::RetryCancel }
		}
		switch ($Defaultbutton)
		{
			1 { $vb_defaultbutton = [microsoft.visualbasic.msgboxstyle]::DefaultButton1 }
			2 { $vb_defaultbutton = [microsoft.visualbasic.msgboxstyle]::DefaultButton2 }
			3 { $vb_defaultbutton = [microsoft.visualbasic.msgboxstyle]::DefaultButton3 }
		}
		$popuptype = $vb_icon -bor $vb_box -bor $vb_defaultbutton
		$ans = [Microsoft.VisualBasic.Interaction]::MsgBox($prompt, $popuptype, $title)
		return $ans
	} #end
	#endregion
	
	#region Show-InputBox
	#http://www.sapien.com/forums/scriptinganswers/forum_posts.asp?TID=2890
	#$c=Show-Inputbox -message "Enter a computername" -title "Computername" -default $env:Computername
	#
	#if ($c.Trim()) {
	#  Get-WmiObject win32_computersystem -computer $c
	#  }
	Function Show-InputBox
	{
		Param ([string]$message = $(Throw "You must enter a prompt message"),
			[string]$title = "Input",
			[string]$default
		)
		
		[reflection.assembly]::loadwithpartialname("microsoft.visualbasic") | Out-Null
		[microsoft.visualbasic.interaction]::InputBox($message, $title, $default)
		
	}
	#endregion
	
	# Sort Functions
	
	#region Sort-ListViewColumn
	function Sort-ListViewColumn
	{
		<#
		.SYNOPSIS
			Sort the ListView's item using the specified column.
	
		.DESCRIPTION
			Sort the ListView's item using the specified column.
			This function uses Add-Type to define a class that sort the items.
			The ListView's Tag property is used to keep track of the sorting.
	
		.PARAMETER ListView
			The ListView control to sort.
	
		.PARAMETER ColumnIndex
			The index of the column to use for sorting.
			
		.PARAMETER  SortOrder
			The direction to sort the items. If not specified or set to None, it will toggle.
		
		.EXAMPLE
			Sort-ListViewColumn -ListView $listview1 -ColumnIndex 0
	#>
		param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.ListView]$ListView,
			[Parameter(Mandatory = $true)]
			[int]$ColumnIndex,
			[System.Windows.Forms.SortOrder]$SortOrder = 'None')
		
		if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
		{
			return;
		}
		
		#region Define ListViewItemComparer
		try
		{
			$local:type = [ListViewItemComparer]
		}
		catch
		{
			Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
		}
		#endregion
		
		if ($ListView.Tag -is [ListViewItemComparer])
		{
			#Toggle the Sort Order
			if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
				{
					$ListView.Tag.sortOrder = 'Descending'
				}
				else
				{
					$ListView.Tag.sortOrder = 'Ascending'
				}
			}
			else
			{
				$ListView.Tag.sortOrder = $SortOrder
			}
			
			$ListView.Tag.column = $ColumnIndex
			$ListView.Sort() #Sort the items
		}
		else
		{
			if ($Sort -eq [System.Windows.Forms.SortOrder]::None)
			{
				$Sort = [System.Windows.Forms.SortOrder]::Ascending
			}
			
			#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
			$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
			$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
		}
	}
	#endregion
	
	# Tester Functions
	
	#region Test-Host 
	
	function Test-Host
	{
		
		    <#
		        .Synopsis 
		            Test a host for connectivity using either WMI ping or TCP port
		            
		        .Description
		            Allows you to test a host for connectivity before further processing
		            
		        .Parameter Server
		            Name of the Server to Process.
		            
		        .Parameter TCPPort
		            TCP Port to connect to. (default 135)
		            
		        .Parameter Timeout
		            Timeout for the TCP connection (default 1 sec)
		            
		        .Parameter Property
		            Name of the Property that contains the value to test.
		            
		        .Example
		            cat ServerFile.txt | Test-Host | Invoke-DoSomething
		            Description
		            -----------
		            To test a list of hosts.
		            
		        .Example
		            cat ServerFile.txt | Test-Host -tcp 80 | Invoke-DoSomething
		            Description
		            -----------
		            To test a list of hosts against port 80.
		            
		        .Example
		            Get-ADComputer | Test-Host -property dnsHostname | Invoke-DoSomething
		            Description
		            -----------
		            To test the output of Get-ADComputer using the dnshostname property
		            
		            
		        .OUTPUTS
		            System.Object
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            Test-Port
		            
		        NAME:      Test-Host
		        AUTHOR:    YetiCentral\bshell
		        Website:   www.bsonposh.com
		        LASTEDIT:  02/04/2009 18:25:15
		        #Requires -Version 2.0
		    #>
		
		[CmdletBinding()]
		Param (
			
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true, Mandatory = $True)]
			[string]$ComputerName,
			[Parameter()]
			[int]$TCPPort = 80,
			[Parameter()]
			[int]$timeout = 3000,
			[Parameter()]
			[string]$property
			
		)
		Begin
		{
			
			function PingServer
			{
				Param ($MyHost)
				$ErrorActionPreference = "SilentlyContinue"
				Write-Verbose " [PingServer] :: Pinging [$MyHost]"
				try
				{
					$pingresult = Get-WmiObject win32_pingstatus -f "address='$MyHost'"
					$ResultCode = $pingresult.statuscode
					Write-Verbose " [PingServer] :: Ping returned $ResultCode"
					if ($ResultCode -eq 0) { $true }
					else { $false }
				}
				catch
				{
					Write-Verbose " [PingServer] :: Ping Failed with Error: ${error[0]}"
					$false
				}
			}
			
		}
		
		Process
		{
			
			Write-Verbose " [Test-Host] :: Begin Process"
			if ($ComputerName -match "(.*)(\$)$")
			{
				$ComputerName = $ComputerName -replace "(.*)(\$)$", '$1'
			}
			Write-Verbose " [Test-Host] :: ComputerName   : $ComputerName"
			if ($TCPPort)
			{
				Write-Verbose " [Test-Host] :: Timeout  : $timeout"
				Write-Verbose " [Test-Host] :: Port     : $TCPPort"
				if ($property)
				{
					Write-Verbose " [Test-Host] :: Property : $Property"
					$Result = Test-Port $_.$property -tcp $TCPPort -timeout $timeout
					if ($Result)
					{
						if ($_) { $_ }
						else { $ComputerName }
					}
				}
				else
				{
					Write-Verbose " [Test-Host] :: Running - 'Test-Port $ComputerName -tcp $TCPPort -timeout $timeout'"
					$Result = Test-Port $ComputerName -tcp $TCPPort -timeout $timeout
					if ($Result)
					{
						if ($_) { $_ }
						else { $ComputerName }
					}
				}
			}
			else
			{
				if ($property)
				{
					Write-Verbose " [Test-Host] :: Property : $Property"
					try
					{
						if (PingServer $_.$property)
						{
							if ($_) { $_ }
							else { $ComputerName }
						}
					}
					catch
					{
						Write-Verbose " [Test-Host] :: $($_.$property) Failed Ping"
					}
				}
				else
				{
					Write-Verbose " [Test-Host] :: Simple Ping"
					try
					{
						if (PingServer $ComputerName) { $ComputerName }
					}
					catch
					{
						Write-Verbose " [Test-Host] :: $ComputerName Failed Ping"
					}
				}
			}
			Write-Verbose " [Test-Host] :: End Process"
			
		}
		
	}
	
	#endregion 
	
	#region Test-Port 
	
	function Test-Port
	{
		
		    <#
		        .Synopsis 
		            Test a host to see if the specified port is open.
		            
		        .Description
		            Test a host to see if the specified port is open.
		                        
		        .Parameter TCPPort 
		            Port to test (Default 135.)
		            
		        .Parameter Timeout 
		            How long to wait (in milliseconds) for the TCP connection (Default 3000.)
		            
		        .Parameter ComputerName 
		            Computer to test the port against (Default in localhost.)
		            
		        .Example
		            Test-Port -tcp 3389
		            Description
		            -----------
		            Returns $True if the localhost is listening on 3389
		            
		        .Example
		            Test-Port -tcp 3389 -ComputerName MyServer1
		            Description
		            -----------
		            Returns $True if MyServer1 is listening on 3389
		                    
		        .OUTPUTS
		            System.Boolean
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            Test-Host
		            Wait-Port
		            
		        .Notes
		            NAME:      Test-Port
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[Parameter()]
			[int]$TCPport = 135,
			[Parameter()]
			[int]$TimeOut = 3000,
			[Alias("dnsHostName")]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[String]$ComputerName = $env:COMPUTERNAME
		)
		Begin
		{
			Write-Verbose " [Test-Port] :: Start Script"
			Write-Verbose " [Test-Port] :: Setting Error state = 0"
		}
		
		Process
		{
			
			Write-Verbose " [Test-Port] :: Creating [system.Net.Sockets.TcpClient] instance"
			$tcpclient = New-Object system.Net.Sockets.TcpClient
			
			Write-Verbose " [Test-Port] :: Calling BeginConnect($ComputerName,$TCPport,$null,$null)"
			try
			{
				$iar = $tcpclient.BeginConnect($ComputerName, $TCPport, $null, $null)
				Write-Verbose " [Test-Port] :: Waiting for timeout [$timeout]"
				$wait = $iar.AsyncWaitHandle.WaitOne($TimeOut, $false)
			}
			catch [System.Net.Sockets.SocketException]
			{
				Write-Verbose " [Test-Port] :: Exception: $($_.exception.message)"
				Write-Verbose " [Test-Port] :: End"
				return $false
			}
			catch
			{
				Write-Verbose " [Test-Port] :: General Exception"
				Write-Verbose " [Test-Port] :: End"
				return $false
			}
			
			if (!$wait)
			{
				$tcpclient.Close()
				Write-Verbose " [Test-Port] :: Connection Timeout"
				Write-Verbose " [Test-Port] :: End"
				return $false
			}
			else
			{
				Write-Verbose " [Test-Port] :: Closing TCP Socket"
				try
				{
					$tcpclient.EndConnect($iar) | out-Null
					$tcpclient.Close()
				}
				catch
				{
					Write-Verbose " [Test-Port] :: Unable to Close TCP Socket"
				}
				$true
			}
		}
		End
		{
			Write-Verbose " [Test-Port] :: End Script"
		}
	}
	#endregion 
	
	#region Test-PSRemoting
	
	function Test-PSRemoting
	{
		Param (
			[alias('dnsHostName')]
			[Parameter(Mandatory = $true, ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName
		)
		Process
		{
			Write-Verbose " [Test-PSRemoting] :: Start Process"
			if ($ComputerName -match "(.*)(\$)$")
			{
				$ComputerName = $ComputerName -replace "(.*)(\$)$", '$1'
			}
			
			try
			{
				
				$result = Invoke-Command -ComputerName $computername { 1 } -ErrorAction SilentlyContinue
				
				if ($result -eq 1)
				{
					return $True
				}
				else
				{
					return $False
				}
			}
			catch
			{
				return $False
			}
		}
	}
	
	#endregion
	
	#region Test-RegistryKey 
	
	function Test-RegistryKey
	{
		
		    <#
		        .Synopsis 
		            Test for given the registry key.
		            
		        .Description
		            Test for given the registry key.
		                        
		        .Parameter Path 
		            Path to the key.
		            
		        .Parameter ComputerName 
		            Computer to test the registry key on.
		            
		        .Example
		            Test-registrykey HKLM\Software\Adobe
		            Description
		            -----------
		            Returns $True if the Registry key for HKLM\Software\Adobe
		            
		        .Example
		            Test-registrykey HKLM\Software\Adobe -ComputerName MyServer1
		            Description
		            -----------
		            Returns $True if the Registry key for HKLM\Software\Adobe on MyServer1
		                    
		        .OUTPUTS
		            System.Boolean
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            New-RegistryKey
		            Remove-RegistryKey
		            Get-RegistryKey
		        
		        .Notes
		            NAME:      Test-RegistryKey
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding(SupportsShouldProcess = $true)]
		Param (
			
			[Parameter(ValueFromPipelineByPropertyName = $True, mandatory = $true)]
			[string]$Path,
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
			
		)
		
		Begin
		{
			
			Write-Verbose " [Test-RegistryKey] :: Start Begin"
			
			Write-Verbose " [Test-RegistryKey] :: `$Path = $Path"
			Write-Verbose " [Test-RegistryKey] :: Getting `$Hive and `$KeyPath from $Path "
			$PathParts = $Path -split "\\|/", 0, "RegexMatch"
			$Hive = $PathParts[0]
			$KeyPath = $PathParts[1..$PathParts.count] -join "\"
			Write-Verbose " [Test-RegistryKey] :: `$Hive = $Hive"
			Write-Verbose " [Test-RegistryKey] :: `$KeyPath = $KeyPath"
			
			Write-Verbose " [Test-RegistryKey] :: End Begin"
			
		}
		
		Process
		{
			
			Write-Verbose " [Test-RegistryKey] :: Start Process"
			
			Write-Verbose " [Test-RegistryKey] :: `$ComputerName = $ComputerName"
			
			$RegHive = Get-RegistryHive $hive
			
			if ($RegHive -eq 1)
			{
				Write-Host "Invalid Path: $Path, Registry Hive [$hive] is invalid!" -ForegroundColor Red
			}
			else
			{
				Write-Verbose " [Test-RegistryKey] :: `$RegHive = $RegHive"
				
				$BaseKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($RegHive, $ComputerName)
				Write-Verbose " [Test-RegistryKey] :: `$BaseKey = $BaseKey"
				
				Try
				{
					$Key = $BaseKey.OpenSubKey($KeyPath)
					if ($Key)
					{
						$true
					}
					else
					{
						$false
					}
				}
				catch
				{
					$false
				}
			}
			Write-Verbose " [Test-RegistryKey] :: End Process"
			
		}
	}
	
	#endregion 
	
	#region Test-RegistryValue 
	
	function Test-RegistryValue
	{
		
		    <#
		        .Synopsis 
		            Test the value for given the registry value.
		            
		        .Description
		            Test the value for given the registry value.
		                        
		        .Parameter Path 
		            Path to the key that contains the value.
		            
		        .Parameter Name 
		            Name of the Value to check.
		            
		        .Parameter Value 
		            Value to check for.
		            
		        .Parameter ComputerName 
		            Computer to test.
		            
		        .Example
		            Test-RegistryValue HKLM\SOFTWARE\Adobe\SwInstall -Name State -Value 0
		            Description
		            -----------
		            Returns $True if the value of State under HKLM\SOFTWARE\Adobe\SwInstall is 0
		            
		        .Example
		            Test-RegistryValue HKLM\Software\Adobe -ComputerName MyServer1
		            Description
		            -----------
		            Returns $True if the value of State under HKLM\SOFTWARE\Adobe\SwInstall is 0 on MyServer1
		                    
		        .OUTPUTS
		            System.Boolean
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            New-RegistryValue
		            Remove-RegistryValue
		            Get-RegistryValue
		        
		        .Notes    
		            NAME:      Test-RegistryValue
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			
			[Parameter(mandatory = $true)]
			[string]$Path,
			[Parameter(mandatory = $true)]
			[string]$Name,
			[Parameter()]
			[string]$Value,
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
			
		)
		
		Process
		{
			
			Write-Verbose " [Test-RegistryValue] :: Begin Process"
			Write-Verbose " [Test-RegistryValue] :: Calling Get-RegistryKey -Path $path -ComputerName $ComputerName"
			$Key = Get-RegistryKey -Path $path -ComputerName $ComputerName
			Write-Verbose " [Test-RegistryValue] :: Get-RegistryKey returned $Key"
			if ($Value)
			{
				try
				{
					$CurrentValue = $Key.GetValue($Name)
					$Value -eq $CurrentValue
				}
				catch
				{
					$false
				}
			}
			else
			{
				try
				{
					$CurrentValue = $Key.GetValue($Name)
					if ($CurrentValue) { $True }
					else { $false }
				}
				catch
				{
					$false
				}
			}
			Write-Verbose " [Test-RegistryValue] :: End Process"
			
		}
	}
	
	#endregion 
	
	#region Test-TcpPort
	function Test-TcpPort ($ComputerName, [int]$port = 80)
	{
		$socket = new-object Net.Sockets.TcpClient
		$socket.Connect($ComputerName, $port)
		if ($socket.Connected)
		{
			$status = "Open"
			$socket.Close()
		}
		else
		{
			$status = "Closed / Filtered"
		}
		$socket = $null
		Add-RichTextBox "ComputerName:$ComputerName`nPort:$port`nStatus:$status"
	}
	#endregion
	
	# Taskmanager Functions
	#region initialize-stuff
	function initialize-stuff
	{
		### Basically just an initialization routine for the hashes and the drawing objects.
		$server = $things["machine"];
		update-Status-Label "Initializing server information...";
		$label3.update();
		$available = load-os-info $server;
		update-Status-Label "Initializing processes...";
		
		$ysize = 0;
		$procs = return-win32_perfrawdata_perfproc_process $server;
		foreach ($proc in $procs)
		{
			if ($proc.IDProcess -eq 0)
			{
				$beforeprocs[0] = $proc.percentprocessortime;
			}
			else
			{
				$beforeprocs.Add($proc.IDProcess, $proc.percentprocessortime);
			}
		}
		
		update-Status-Label "Initializing CPU...";
		$t1 = return-win32_PerfRawData_PerfOS_processor $server;
		$ch = new-object system.drawing.drawing2d.HatchBrush([system.drawing.drawing2d.hatchstyle]::LargeGrid, $things["colors"][1], $things["colors"][2]);
		
		update-Status-Label "Initializing graphics...";
		$orderarray = New-Object -TypeName System.Collections.ArrayList;
		foreach ($cpu in $t1) { $orderarray.add($cpu.name); }
		$y = 100;
		$x = -550;
		$counter = 0;
		for ($j = 0; $j -lt $orderarray.count; $j++)
		{
			$t = "";
			$key = $orderarray[$j];
			foreach ($bob in $t1) { if ($bob.Name -eq $key) { $t = $bob; } }
			if (($counter % 8) -eq 0)
			{
				$y = 100;
				$x += 600;
				$xstrpt = $x - 50;
			}
			$keyhash.Add($key, @($t.percentprocessortime, $t.timestamp_sys100ns));
			$pointhash.Add($key, @());
			$ysize += 105;
			$rect = new-object system.drawing.rectangle(($x + 1), ($y - 100), 500, 99);
			$point = new-object system.drawing.pointf(($x - 50), ($y - 15));
			$point2 = new-object system.drawing.pointf(($x - 50), ($y - 50));
			$parms.Add($key, @($x, $y, 0.0, $rect, $ch, $point, $point2));
			$points = @(new-object system.drawing.point($x, $y));
			$hash.Add($key, @());
			$y = $y + 100;
			$counter++;
		}
		$keyhash.Add("Memory", @(0.0, 0.0));
		$pointhash.Add("Memory", @());
		$hash.Add("Memory", @());
		$xsize = [int32]((($counter/8) + 1) * 575);
		if ($ysize -gt 500) { $ysize = 500; }
		
		#### Memory
		if ((($counter % 8) -eq 0) -OR (($y + 300) -gt 900))
		{
			$y = 100;
			$x += 600;
			$xstrpt = $x - 50;
		}
		else { $ysize += 300; }
		$rect = new-object system.drawing.rectangle(($x + 1), $y, 500, 199);
		$y += 200;
		$ystrpt = $y - 15;
		$point = new-object system.drawing.pointf(($x - 50), ($y - 15));
		$xstrpt = $x - 50;
		$ystrpt = $y - 50;
		$point2 = new-object system.drawing.pointf(($x - 50), ($y - 50));
		$point3 = new-object system.drawing.pointf(($x - 50), ($y - 70));
		$parms.Add("Memory", @($x, $y, 0.0, $rect, $ch, $point, $point2, 0.0, $point3));
		
		update-Status-Label "Updating CPU...";
		
		get-allCPU;
		$parms.Add("Bitmap", @($xsize, $ysize));
		#$picturebox1.AutoScrollMargin = new-object System.Drawing.Size($xsize, $ysize);
		update-Status-Label "";
	}
	#endregion initialize-stuff
	
	#region update-serverdatetime
	function update-serverdatetime
	{
		param ($server);
	}
	#endregion update-serverdatetime
	
	#region load-os-info
	function load-os-info
	{
		param ($server);
		### This was an afterthought sort of like the services tab. It occurred to me that it might be nice to know some of the details
		### about the machine and the OS running on it. All this does is create a bunch of labels on $Tab4 and fill in the information.
		### The only one that's different is the label that shows the localdatetime. That is created in BuildTheForm() so it can be
		### updated every time we refresh the processes.
		while ($Tab4.Controls.count -gt 1) { foreach ($item in $Tab4.Controls) { if ($item.name -ne "ServerTime_Label") { $item.dispose(); } } }
		$tm = 0;
		$cs = CIM-Stuff win32_computersystem;
		$prcsrs = CIM-Stuff win32_processor;
		$srv = CIM-Stuff Win32_OperatingSystem;
		$mem = CIM-Stuff CIM_PhysicalMemory;
		$mem | % { $tm += $_.capacity; }
		$caption = $srv.caption;
		$y = 20;
		$x = 20;
		
		
		$arch = "32-bit";
		if (($srv.OSArchitecture).length -gt 0) { $arch = $srv.OSArchitecture; }
		elseif ($srv.caption -match "x64") { $arch = "64-bit"; }
		foreach ($m in $mem)
		{
			$l = $m.tag + " (" + $m.devicelocator.trimend() + ") | " + (dsize $m.capacity);
			if ($m.speed -gt $null) { $l += " | Speed = " + $m.speed.tostring() + " ns"; }
			$st = "OK";
			if ($m.status -gt $null) { $st = $m.status; }
			$l += " | Status = " + $st;
		}
		
		foreach ($p in $prcsrs)
		{
			$noc = "";
			if ($p.numberofcores -ne $null) { $noc = " -- " + $p.numberofcores + " Cores"; }
		}
		
		
		### If this is an older OS, we need to use Win32_LogicalDisk to get the list of disks. If it's running a later OS, we can use
		### Win32_Volume which will also list the mount points (if any).
		$vlen = 20;
		if ($caption -match "2000")
		{
			$hds = CIM-Stuff Win32_LogicalDisk "DriveType=3" |
			select-object -property @{ expression = { $_.deviceid }; name = "VolumeName" }, @{ expression = { $_.size }; name = "Capacity" },
						  FreeSpace, @{ expression = { $_.volumename }; name = "Label" };
		}
		else
		{
			$hds = CIM-Stuff Win32_Volume "DriveType=3" |
			select-object -property @{ expression = { $_.name }; name = "VolumeName" }, Capacity, FreeSpace, Label;
		}
		
		$hds = $hds | sort-object -property VolumeName;
		foreach ($d in $hds) { if ($d.VolumeName.length -gt $vlen) { $vlen = $d.VolumeName.length; } }
		
		$x = ($vlen * 9);
		$cs.totalphysicalmemory;
	}
	#endregion load-os-info
	
	#region display-myMessageBox
	function display-myMessageBox
	{
		param ($msg);
		$myMessageBox = new-object System.Windows.Forms.Form;
		$myMB_TextBox = new-object System.Windows.Forms.TextBox;
		$myMessageBox.cancelbutton = $Cancel_Button;
		$myMB_TextBox.Anchor = "Left, Top, Right, Bottom";
		$myMB_TextBox.Location = new-object system.drawing.point(0, 0);
		$myMB_TextBox.font = $fonts["cn8"];
		$myMB_TextBox.Name = "myMB_TextBox";
		$myMB_TextBox.multiline = $true;
		$myMB_TextBox.Text = "";
		$myMessageBox.Controls.Add($myMB_TextBox);
		$array = $msg.split("`n");
		$count = $array.count;
		$w = 0;
		foreach ($line in $array) { if ($line.length -gt $w) { $w = $line.length; } }
		$height = $count * 14.0;
		$width = $w * 8.25;
		$myMessageBox.ClientSize = new-object System.Drawing.Size($width, $height);
		$myMB_TextBox.ClientSize = new-object System.Drawing.Size($width, $height);
		$myMB_TextBox.text = $msg;
		$IFWS = new-object System.Windows.Forms.FormWindowState;
		$IFWS = $myMessageBox.WindowState;
		$myMessageBox.TopMost = $true;
		$myMessageBox.Refresh();
		$myMessageBox.BringToFront();
		$myMessageBox.add_Load($OnLoadForm_StateCorrection);
		$myMessageBox.Show() | Out-Null;
	}
	#endregion display-myMessageBox
	
	#region get-services
	function get-services
	{
		### Simply loads the services on the Services tab ($Tab3).
		$server = $things["machine"];
		$listview2.Items.Clear();
		foreach ($s in (return-win32_Service $server))
		{
			$lvi = new-object system.windows.forms.ListViewItem($s.displayname);
			if ($s.description -eq $null) { $s.description = ""; }
			foreach ($c in (1..($listview2.columns.count - 1)))
			{
				$name = $listview2.columns[$c].name;
				$lvi.subitems.add($s.$name);
			}
			
			$listview2.Items.Add($lvi);
		}
		
		$error.clear;
	}
	#endregion get-services
	
	#region get-processes
	function get-processes
	{
		param ($update);
		### Loads and updates the $listview1 listview on $Tab1.
		$server = $things["machine"];
		$procs = return-win32_perfrawdata_perfproc_process $server;
		$idle = $cpu = $totalcpu = $totalcpuUsed = 0;
		$procs | % { if ($_.name -eq "_Total") { $totalcpu = [long]$_.percentprocessortime - [long]$beforeprocs[$_.IDProcess]; } };
		if ($update -eq $false)
		{
			$listview1.items.clear();
			$users = @{ };
			foreach ($proc in (CIM-Stuff win32_process))
			{
				$users.add($proc.ProcessID, ($proc |
				Invoke-CimMethod -CimSession $things["session"] -MethodName GetOwner).user);
			}
		}
		
		drop-dead-procs $procs;
		foreach ($proc in $procs)
		{
			$idproc = $proc.IDProcess;
			if ($proc.Name -eq "Idle")
			{
				$idle = kbytes $proc.WorkingSet;
				if ($update -eq $false) { make-listviewitem $proc $null; }
			}
			elseif ($proc.Name -ne "_Total")
			{
				if ($update -eq $false)
				{
					$cpu = pcnt-cpu $proc.percentprocessortime $beforeprocs[$idproc] $totalcpu;
					$totalcpuUsed += $cpu;
					make-listviewitem $proc $users[$idproc];
				}
				elseif ($beforeprocs[$idproc] -eq $null)
				{
					### If this is a new process, create a ListViewItem for it.
					$beforeprocs.Add($idproc, $proc.percentprocessortime);
					$cpu = 0;
					make-listviewitem $proc (CIM-Method win32_process ("ProcessID='" + $idproc + "'") GetOwner).user;
				}
				else
				{
					### Otherwise, just calculate the CPU for it.
					$cpu = pcnt-cpu $proc.percentprocessortime $beforeprocs[$idproc] $totalcpu;
					$totalcpuUsed += $cpu;
				}
				
				### Update the memory and CPU for the process in its ListView entry
				$lvi = $listview1.FindItemWithText($idproc)
				if ($lvi.SubItems[3].Text -ne [int32]($cpu)) { $lvi.SubItems[3].Text = [int32]($cpu); }
				if ($lvi.SubItems[4].Text -ne (kbytes $proc.WorkingSet)) { $lvi.SubItems[4].Text = kbytes $proc.WorkingSet; }
			}
			
			$beforeprocs[$idproc] = $proc.percentprocessortime;
		}
		
		$indx = $listview1.FindItemWithText("Idle").index;
		$cpu = [int32](100 - $totalcpuUsed);
		$listview1.Items[$indx].SubItems[3].Text = [int32]($cpu);
		$listview1.Items[$indx].SubItems[4].Text = $idle;
		$listview1.refresh();
		$things["procs"] = ($procs.count - 1);
		$things["cpu"] = [int32]$totalcpuUsed;
		update-Procs-Label;
		update-serverdatetime $server;
		if ($things["LVCols"] -ne $null)
		{
			if (($things["LVCols"] -eq 0) -OR ($things["LVCols"] -eq 2))
			{
				$listview1.ListViewItemSorter = new-object ListViewItemComparer($things["LVCols"], $listview1.Sorting);
			}
			else
			{
				$listview1.ListViewItemSorter = new-object ListViewItemIntComparer($things["LVCols"], $listview1.Sorting);
			}
		}
		
	}
	#endregion get-processes
	
	#region make-listviewitem
	function make-listviewitem
	{
		param ($proc,
			$user);
		$idproc = $proc.IDProcess;
		$lvi = new-object system.windows.forms.ListViewItem($proc.Name);
		$lvi.SubItems.Add($idproc);
		if ($user -eq $null) { $user = "SYSTEM"; }
		$lvi.SubItems.Add($user);
		$lvi.SubItems.Add(0);
		$mem = kbytes $proc.WorkingSet;
		$lvi.SubItems.Add($mem);
		$listview1.Items.Add($lvi);
	}
	#endregion make-listviewitem
	
	#region drop-dead-procs
	function drop-dead-procs
	{
		param ($procs);
		$temp = @{ };
		$currp = @();
		foreach ($proc in $procs) { $currp += $proc.IDProcess; }
		foreach ($idproc in $beforeprocs.Keys) { if ($currp -notcontains $idproc) { $temp.Add($idproc, 0); } }
		foreach ($procid in $temp.Keys)
		{
			$indx = $listview1.FindItemWithText($procid).index;
			$listview1.Items[$indx].Remove();
			$beforeprocs.Remove($procid);
		}
		
		$temp.clear()
	}
	#endregion drop-dead-procs
	
	#region set-context-menu
	function set-context-menu
	{
		foreach ($si in $listview2.SelectedItems)
		{
			if ($si.subitems[($listview2.columns["state"].index)].text -eq "Running")
			{
				$start_svc.enabled = $false;
				$stop_svc.enabled = $true;
				$cycle_svc.enabled = $true;
			}
			elseif ($si.subitems[($listview2.columns["state"].index)].text -eq "Stopped")
			{
				$start_svc.enabled = $true;
				$stop_svc.enabled = $false;
				$cycle_svc.enabled = $false;
			}
		}
	}
	#endregion set-context-menu
	
	#region stop-related-services
	function stop-related-services
	{
		param ($sname,
			$dependencies);
		if ($dependencies.count -gt 0)
		{
			foreach ($d in $dependencies) { stop-start-service $d.name "Stop"; }
		}
		
		stop-start-service $sname "Stop";
	}
	#endregion stop-related-services
	
	#region start-related-services
	function start-related-services
	{
		param ($sname,
			$dependencies);
		stop-start-service $sname "Start";
		if ($dependencies.count -gt 0)
		{
			foreach ($d in $dependencies) { stop-start-service $d.name "Start"; }
		}
	}
	#endregion start-related-services
	
	#region stop-start-service
	function stop-start-service
	{
		param ($sname,
			$whattodo);
		$vars = @{
			"Stop" = @("Stopped", "Stopping", "1", { $svc.Stop() }, { $svc.StopService() });
			"Start" = @("Running", "Starting", "4", { $svc.Start() }, { $svc.StartService() });
		};
		
		$svc = CIM-Stuff win32_service ("name = '" + $sname + "'");
		if (($svc.state -eq $vars[$whattodo][0]) -OR ($svc.state -eq $null)) { return; }
		if ($svc.StartMode -eq "Disabled")
		{
			[system.windows.forms.messagebox]::Show("Cannot start or stop a disabled service, and I'm not enabling it just for you.");
			return;
		}
		
		if ($things["adsi"])
		{
			$cmd = "[ADSI](""WinNT://" + $things["machine"] + "/" + $sname + ",service"")";
			$svc = invoke-expression $cmd;
			if ($svc.status -ne $vars[$whattodo][2]) { &$vars[$whattodo][3]; }
		}
		else
		{
			$svc = CIM-Stuff win32_Service "Name='$sname'";
			if ($svc.state -ne $vars[$whattodo][0])
			{
				$r = &$vars[$whattodo][4];
				if ($r.returnvalue -ne 0)
				{
					[system.windows.forms.messagebox]::Show("Unable to $whattodo the $sname service.");
					return;
				}
			}
		}
		
		if ((GetStatus $sname $vars[$whattodo][0]) -eq 1)
		{
			### Update the status of the service
			($listview2.items[($listview2.FindItemWithText($sname).index)]).subitems[($listview2.columns["state"].index)].text = $vars[$whattodo][0];
			set-context-menu;
		}
	}
	#endregion stop-start-service
	
	#region reset-iis
	function reset-iis
	{
		$server = $things["machine"];
		$test = iisreset $server;
		$outcome = "Failed";
		if ($test -match "successfully restarted") { $outcome = "Succeeded"; }
	}
	#endregion reset-iis
	
	#region pcnt-cpu
	### CPU percentage calculation. I picked this up from an article on SQL server long ago. It seems to be the
	### same one used for the OS.
	function pcnt-cpu
	{
		(([long]$args[0] - [long]$args[1]) / [system.double]$args[2]) * 100;
	}
	#endregion pcnt-cpu
	
	#region kbytes
	function kbytes
	{
		param ($dsize);
		[Math]::round($dsize / 1kb, 2);
	}
	#endregion  
	
	#region dsize
	function dsize
	{
		param ($dsize);
		$size = "";
		if ($dsize -ge 1gb) { $size = [Math]::round($dsize / 1gb, 2).tostring() + " GB"; }
		elseif ($dsize -ge 1mb) { $size = [Math]::round($dsize / 1mb, 2).tostring() + " MB"; }
		elseif ($dsize -ge 1kb) { $size = [Math]::round($dsize / 1kb, 2).tostring() + " KB"; }
		else { $size = $dsize.tostring() + " B"; }
		$size;
	}
	#endregion
	
	#region return-Win32_PerfFormattedDAte_PerfProc_Process
	### These two functions get their data depending on how new the OS is. In the most recent version of Task Manager,
	### it uses WorkingSetPrivate (that's the default) for the memory, but that isn't a property on older versions.
	### Whether it's available or not is determined during initialization.
	function return-Win32_PerfFormattedData_PerfProc_Process
	{
		param ($server);
		if ($things["wsp"])
		{
			(CIM-Stuff Win32_PerfFormattedData_PerfProc_Process) |
			select-object -property idprocess, name, @{ expression = { $_.workingsetprivate }; name = "workingset" }, percentprocessortime;
		}
		else
		{
			(CIM-Stuff Win32_PerfFormattedData_PerfProc_Process) | select-object -property idprocess, name, workingset, percentprocessortime;
		}
	}
	#endregion
	
	#region return-win32_perfrawdata_perfproc_process
	function return-win32_perfrawdata_perfproc_process
	{
		param ($server);
		if ($things["wsp"])
		{
			(CIM-Stuff win32_perfrawdata_perfproc_process) |
			select-object -property idprocess, name, @{ expression = { $_.workingsetprivate }; name = "workingset" }, percentprocessortime;
		}
		else
		{
			(CIM-Stuff win32_perfrawdata_perfproc_process) | select-object -property idprocess, name, workingset, percentprocessortime;
		}
	}
	#endregion
	
	#region return-win32_service
	function return-win32_Service
	{
		CIM-Stuff win32_Service | select-object -property name, displayname, processid, description, state, startmode, startname | Sort-Object -property displayname;
	}
	
	#endregion
	
	#region return-win32_PerfRawData_PerfOS_processor
	function return-win32_PerfRawData_PerfOS_processor
	{
		CIM-Stuff win32_PerfRawData_PerfOS_processor | select-object -property name, percentprocessortime, timestamp_sys100ns;
	}
	#endregion
	
	#region CIM-Stuff
	function CIM-Stuff
	{
		param ($class,
			$filter);
		if ($filter -eq $null)
		{
			Get-CimInstance -class $class -CimSession $things["session"];
		}
		else
		{
			Get-CimInstance -class $class -filter $filter -CimSession $things["session"];
		}
	}
	#endregion
	
	#region CIM-Method
	function CIM-Method
	{
		param ($class,
			$filter,
			$method);
		CIM-Stuff $class $filter | Invoke-CimMethod -CimSession $things["session"] -MethodName $method;
	}
	#endregion
	
	#region get-allCPU
	function get-allCPU
	{
		### This calculates the CPU for the individual processors and adds them into $hash.
		$server = $things["machine"];
		$p2 = return-win32_PerfRawData_PerfOS_processor $server;
		for ($i = 0; $i -lt $p2.length; $i++)
		{
			$key = $p2[$i].Name;
			$cpu = 100.0 - (pcnt-cpu $p2[$i].percentprocessortime $keyhash[$key][0] ([system.double]$p2[$i].timestamp_sys100ns - [system.double]$keyhash[$key][1]));
			$count = $hash[$key].count;
			if ($cpu -lt 0.0) { $cpu = 0.0; }
			$x = ($count * 5) + $parms[$key][0];
			$y = $parms[$key][1] - $cpu;
			$parms[$key][2] = $cpu;
			$point = new-object system.drawing.point($x, $y);
			$pointhash[$key] += $y;
			$hash[$key] += $point;
			$keyhash[$key] = @([system.double]$p2[$i].percentprocessortime, [system.double]$p2[$i].timestamp_sys100ns);
		}
		
		##### Memory
		$tpm = (CIM-Stuff win32_computersystem).totalphysicalmemory;
		$avb = (CIM-Stuff Win32_PerfRawData_PerfOS_Memory).availablebytes;
		$newy = (1 - ([system.double]$avb / [system.double]$tpm)) * 200;
		$count = $hash["Memory"].count;
		$x = ($count * 5) + $parms["Memory"][0];
		$y = $parms["Memory"][1] - $newy;
		$parms["Memory"][2] = $newy / 2;
		$parms["Memory"][7] = [system.double]$tpm - [system.double]$avb;
		$point = new-object system.drawing.point($x, $y);
		$pointhash["Memory"] += $y;
		$hash["Memory"] += $point;
	}
	#endregion
	
	#region Plot
	function Plot
	{
		### Draw the pretty pictures of CPU and Memory usage
		param ($old_btmp);
		if ($old_btmp -ne $null) { $old_btmp.Dispose(); }
		$btmp = new-object system.drawing.bitmap($parms["Bitmap"][0], $parms["Bitmap"][1]);
		$grfx = [system.drawing.graphics]::fromimage($btmp);
		
		### Coordinates drawing the graphs for the CPU and memory.
		$orderarray = build-order;
		build-axes $grfx;
		for ($i = 0; $i -lt $orderarray.count; $i++)
		{
			$key = $orderarray[$i];
			$ptarray = $hash[$key];
			for ($j = 1; $j -lt $ptarray.count; $j++)
			{
				$grfx.DrawLine($things["plotpens"][$j - 1], $ptarray[$j - 1], $ptarray[$j]);
			}
		}
		
		$Picturebox1.image = $btmp;
		$grfx.Dispose();
		$pointhash = shift-arrays $pointhash;
		reload-points;
		$error.clear();
		$btmp;
	}
	#endregion
	
	#region reload-points
	function reload-points
	{
		### This may seem like a lot of trouble for nothing, but if you go ahead and turn everything into drawing points and
		### store them in an array to pass into DrawLines, it works much more smoothly than passing the coordinates into
		### DrawLine one at a time and having it do the conversion. Take my word for it, watching it draw a bunch of line
		### segments one at a time is entertaining as hell, but this gives better performance.
		$pts = @{ };
		foreach ($key in $keyhash.Keys) { $points = @(new-object system.drawing.point($parms[$key][0], $pointhash[$key][0])); $pts.Add($key, $points); }
		for ($i = 1; $i -lt $pointhash["_Total"].count; $i++)
		{
			$x = ($i * 5);
			foreach ($key in $keyhash.Keys)
			{
				$pts[$key] += new-object system.drawing.point(($x + $parms[$key][0]), $pointhash[$key][$i]);
			}
		}
		
		foreach ($key in $keyhash.Keys) { $hash[$key] = $pts[$key]; }
		$pts = $null;
	}
	#endregion
	
	#region shift-arrays
	### We only maintain 100 sets of data for each CPU and the memory. When the array gets to 100, we
	### pop off the top one and the new one gets added to the end.
	function shift-arrays ($myhash)
	{
		if ($myhash["_Total"].length -ge 100)
		{
			$null, $things["plotpens"] = $things["plotpens"];
			foreach ($key in $keyhash.Keys)
			{
				$null, $myhash[$key] = $myhash[$key];
			}
		}
		
		$myhash;
	}
	#endregion
	
	#region build-order
	### Probably not needed, but I want to make sure that the CPUs are ordered numerically. It just makes things neater.
	function build-order
	{
		$count = $keyhash.count;
		$count = $count - 1;
		$orderarray = @(0..$count);
		for ($i = 0; $i -lt $count - 1; $i++) { $orderarray[$i] = [system.string]$i; }
		$orderarray[$count - 1] = "_Total";
		$orderarray[$count] = "Memory";
		$orderarray;
	}
	#endregion
	
	#region build-axes
	function build-axes
	{
		param ($grfx);
		### The various drawing surfaces for each processor and memory are stored in the $parms hash. That
		### way we don't have to keep recalculating them for each refresh.
		$orderarray = build-order;
		$mypen = $pens["white"];
		$mypen.Width = 2;
		$font = $fonts["verdana8"];
		$brush = $brushes["red"];
		$y = $add = 100;
		$x = -550;
		$xstrpt = $x - 50;
		for ($i = 0; $i -lt $orderarray.count; $i++)
		{
			$key = $orderarray[$i];
			$x = $parms[$key][0];
			$y = $parms[$key][1];
			if ($key -eq "Memory") { $add = 200; }
			$grfx.FillRectangle($parms[$key][4], $parms[$key][3]);
			$grfx.Drawline($mypen, $x, $y, $x, $y - $add);
			$grfx.Drawline($mypen, $x, $y, $x + 500, $y);
			$grfx.DrawString($key, $font, $brush, $parms[$key][5]);
			$pct = "{0:#.##}%" -f $parms[$key][2];
			$grfx.DrawString($pct, $font, $brush, $parms[$key][6]);
		}
		
		$newgb = "{0:#.##}GB" -f ($parms["Memory"][7] / 1gb);
		$grfx.DrawString($newgb, $font, $brush, $parms["Memory"][8]);
		
	}
	#endregion
	
	#region update-procs-label
	function update-Procs-Label
	{
		$label2.Text = "Updating every " + $things["timer"].interval.ToString() + " ms -- Processes: " +
		($things["procs"]).ToString() + "  |  CPU Usage: " + ($things["cpu"]).ToString() + "%";
	}
	#endregion
	
	#region update-status-label
	function update-Status-Label
	{
		$label3.Text = $args[0];
		$label3.update();
	}
	#endregion
	
	#region restart-timer
	### Called when the "Pause"/"Restart" button is pushed.
	function Restart-timer
	{
		$button2.Text = "Pause";
		$button2.add_click({ Stop-timer; });
		$things["timer"].Enabled = $true;
		$things["timer"].Start();
	}
	#endregion
	
	#region stop-timer
	function Stop-timer
	{
		$things["timer"].Enabled = $false;
		$things["timer"].Stop();
		$button2.Text = "Restart";
		$button2.add_click({ Restart-timer; });
	}
	#endregion
	
	#region Stop-stuff
	### Try to shut down in an orderly fashion. Called when the "Quit" button is pressed.
	function Stop-stuff
	{
		Stop-timer;
		$things["timer"].Dispose();
		if ($things["session"] -ne $null) { remove-cimsession -cimsession $things["session"] }
		$things["session"].Close();
		$things["session"].Dispose();
	}
	#endregion
	
	#region getStatus
	function GetStatus
	{
		param ($service,
			$check_status)
		### This is supposed to sit and wait until a service has been stopped or started. It tests the
		### service status until it matches what we want it to be. If it hasn't done what we requested
		### after 30 seconds, we flag an error and go on.
		$server = $things["machine"];
		$counter = 0;
		$results = 1;
		$test_status = (CIM-Stuff win32_service ("name='" + $service + "'")).State;
		### The thinking behind this is that if it can't kill the service withing 30 seconds, it isn't going to die. So
		### we won't leave ourself hanging out in here. We'll just flag an error and go on with this tedium we call life.
		while (($check_status -ne $test_status) -AND ($counter -lt 60))
		{
			start-sleep -m 500;
			$test_status = (CIM-Stuff win32_service ("name='" + $service + "'")).State;
			$counter++;
			waitingtodie $counter "-";
			if ($counter -eq 60) { $results = 0; };
		}
		
		$results;
	}
	#endregion
	
	#region initialize-the-hashes
	function initialize-the-hashes
	{
		$things["timer"].Dispose();
		if ($things["session"] -ne $null)
		{
			remove-cimsession -cimsession $things["session"];
			$things["session"].Close();
			$things["session"].Dispose();
		}
		
		$keyhash.clear();
		$hash.clear();
		$pointhash.clear();
		$parms.clear();
		$beforeprocs.clear();
		$things.clear();
		initialize-things;
	}
	#endregion
	
	#region initialize-things
	function initialize-things
	{
		$things.add("wsp", $false);
		$things.add("adsi", $true);
		$things.add("LVCols", $null);
		$things.add("SDGCols", $null);
		$things.add("colors", (.{$args} red darkgreen black lightgreen white blue));
		$things.add("timer", (new-object System.Windows.Forms.timer));
		$things.add("machine", $textbox1.text);
		$things.add("plotpens", @((new-object system.drawing.pen("lightgreen")), (new-object system.drawing.pen("lightgreen"))));
		$things.add("procs", 0);
		$things.add("cpu", 0);
		$things.add("session", $null);
		$things.add("response", $null);
		if ($things["machine"] -gt "")
		{
			$things["session"] = New-CimSession -ComputerName $things["machine"] -SessionOption (New-CimSessionOption -Protocol Dcom);
		}
	}
	#endregion
	
	#region test-interval
	function test-interval
	{
		param ($span)
		if ($span -gt $things["timer"].interval) { $things["plotpens"] += $pens["red"]; }
		else { $things["plotpens"] += $pens["lightgreen"] };
	}
	#endregion
	
	#region do-it-to-it
	function do-it-to-it
	{
		### Test the status of the telephony service on the remote machine. We don't really care what the status
		### is, we just want to know that we can get to it. Through playing around with some of this stuff, I've
		### found that this is a way to test that a server is available without generating a bunch of errors.
		$server = $textbox1.text;
		#   if ((new-object system.serviceprocess.servicecontroller("telephony", $server)).status -eq $null) {
		#     $rtrn = [system.windows.forms.messagebox]::Show("Cannot find the $server machine. Make sure it exists and you have permissions to it.");
		#    $main.Cursor = [System.Windows.Forms.Cursors]::Default;
		#   return;
		#}
		
		initialize-the-hashes;
		
		try
		{
			$props = CIM-Stuff win32_perfrawdata_perfproc_process;
			if ($props[0].__property_count -gt 36) { $things["wsp"] = $true; }
		}
		catch
		{
			$rtrn = [system.windows.forms.messagebox]::Show("It looks as though the $server machine does not allow remote WMI calls. We won't be able to monitor it.");
			return;
		}
		
		### Start initializing things.
		initialize-stuff;
		get-services;
		get-allCPU;
		$btmp = new-object system.drawing.bitmap($parms["Bitmap"][0], $parms["Bitmap"][1]);
		get-processes $false;
		$btmp = Plot $btmp;
		
		### The $handler is a list of what to do when the timer fires off.
		### Notice that timer is stopped until the remote machine responds and is then restarted. This prevents
		### putting more stress on a remote box that's already overloaded.
		$handler = {
			$things["timer"].Stop();
			$tmthen = get-date;
			get-allCPU;
			get-processes $true;
			$tmspn = [math]::round((new-timespan -start $tmthen).totalmilliseconds, 0);
			test-interval $tmspn;
			$btmp = Plot $btmp;
			$things["timer"].Start();
		}
		
		
		### This is how I've implemented the update interval. The regular TaskManager refreshes about once a
		### second, but this can run into problems if you try that, particularly if you're going for a machine that
		### is pretty busy. If things are pegged on a machine, it may not have the resources to get back to you every
		### second, so after we've initialized everything, we take a reading of how long it takes to run through the
		### three things it's going to have to do each time the timer fires off. It may take a long time to
		### get through with the initial stuff, but seems to work pretty well after that. To be honest, I haven't run
		### into many cases where the machine resources have slowed things down. It seems mostly limited by
		### the network. You can probably hardcode this to run once a second and it will do great 99 times out of
		### a 100, but that one time when you really need it will be the one that messes up.
		$et = [System.Diagnostics.Stopwatch]::StartNew();
		invoke-command -scriptblock $handler;
		$et.Stop();
		$intrvl = [Math]::round($et.Elapsed.TotalMilliseconds, 0);
		if ($intrvl -lt 1000) { $intrvl = 1000; }
		$things["timer"].interval = $intrvl;
		$trackbar1.value = $intrvl;
		$things["timer"].add_tick($handler);
		$things["timer"].Start();
	}
	#endregion#endregion Source: Globals.ps1

#region Source: About.psf
function Call-About_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
ZBwAAB+LCAAAAAAABADVWV2P2joQfa/U/2BFVZ8oECAL7IVIQLvS1XLvroCWvlWOM4CLE0e2WaC/
/joEClvoxQkfKkJCJJnx8cw5HuxJoweEv4BYfsQKI/1DUh42rZLlvn2DUONJ0DENMXugDP7FAbgt
j89UPpKjRmHvWeLhfQeikFpG0LT6S6kgyA9p6PO5zD9wESTfOXToUQ59WU+gki/GnxzqzJiaCWiG
MFMCsxx6nnmMkkdYDvgUwqZXrWKHOHd2vVyBYq1uoVBPpWmN9Hi2hciEMl9oO6vDQyU4k0lgeqLP
gkcg1HLt0CIEItWeKcXDjY226sEItD+BtZm3Mnh6tFBhM1BhM9JvRu4wCqHq0x9guWW7lkPlu+pR
pzgfbS58EH21ZNrzgS7A/0gx4+Ojzv/gBQ00XpsvtCNmEo670DCtS8y55a4SfdS2r7BQz1xSReP0
dnRCdGREAIRHfQewUFYivH3bTy96qLVhl2N/PaFv8e9GYfV0Y3pcmT1KJjGaTsLFBSo0ltJYHl/8
r07389HlBCdptMs5ZJdLe1n5HVe7mAZOPcD+U8iWljsQs309HGB5pfFSPZ5WvWLgMMDe36EPizgU
E/NYCWgRsHsZYaJvRAIkiBcNOpjgcCqR4vdvHgQOCeXyw1f8QkGgDlbow/ux+gvN5/M8wz+Wc122
/ICGecKDfUkVEqGYy6ZLw2kXe8AuLhqmkViMVMosGacYFyBjyWwRjfm3nbscKhnxuaXfZHht3lc8
MpZjUjjetWZqwsWnAFN2yOlVBdHR6nJNpuDvhv5t5/4vReUWxJK9vsRiqZnXly3iZcViMvxJYhkO
h9mkYp9VKteRSYxSzSyRSl0X+6JjrpEVnLk+qun1UUtBdxTpHK1i6WKpPkc+Vgd2Pn8ydbXM1JUy
MGeS2zVzxWJq5kx0kTAXs4VukS47O1/ldMU4QbsoXybiSfgagqc3/zfGlXPSH6dTT8eVSTKzF0WT
Ld9+UVzn87ZouztlhaVlzSSv11hgN8lU5RSm0pxiVmAXZcr4/OrGcWJyoJfxJzN12oHT6HS/Q1WK
w2aGUmh01tw9DsS3bouuE1tKKTcZF11YRoe9pEW4Iuv+DEwlbeCLU7VtJqchqxUSHabltrn2DnKo
R8eT/Wqy75c0j3sg9Wwt9+nRwGWri1LZ1hU3Ra9xE5uxNqpOamkUjaVhNI/PEr5QOcNs1XJvYzLt
cBZn+mAL4ZWqXl+0pIRAKwDkxnZ9Z+kGknDBqHcGFTUKP0f9FSXR7TUwzr42jiPGb6quAyTwnIbj
LFjF8sgZVUe27TtFXMbHsb4G7CoxdbiA8wP9vEwk3yjsvlV0/wOb7QSrZBwAAA==#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$form1 = New-Object 'System.Windows.Forms.Form'
	$richtextbox1 = New-Object 'System.Windows.Forms.RichTextBox'
	$linklabel2 = New-Object 'System.Windows.Forms.LinkLabel'
	$linklabel1 = New-Object 'System.Windows.Forms.LinkLabel'
	$label7 = New-Object 'System.Windows.Forms.Label'
	$label8 = New-Object 'System.Windows.Forms.Label'
	$label18 = New-Object 'System.Windows.Forms.Label'
	$label5 = New-Object 'System.Windows.Forms.Label'
	$label6 = New-Object 'System.Windows.Forms.Label'
	$label4 = New-Object 'System.Windows.Forms.Label'
	$label2 = New-Object 'System.Windows.Forms.Label'
	$label1 = New-Object 'System.Windows.Forms.Label'
	$buttonOK = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	$form1_Load={
		if(Test-Path "C:\Program Files (x86)\Sysinternals" -ErrorAction 'SilentlyContinue') {
			$label13.Text = "Installed"
			$label13.ForeColor = "Green"
		}
		else {
			$label13.Text = "Not Installed"
			$label13.ForeColor = "Red"
		}	
		
		if(Test-Path "C:\Program Files\Nirsoft\NirLauncher.exe" -ErrorAction 'SilentlyContinue') {
			$label16.Text = "Installed"
			$label16.ForeColor = "Green"
		}
		else {
			$label16.Text = "Not Installed"
			$label16.ForeColor = "Red"			
		}
	}
	
	$linklabel1_LinkClicked=[System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	[System.Diagnostics.Process]::Start("$AuthorWWW")
		
	}
	
	$linklabel2_LinkClicked=[System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	[System.Diagnostics.Process]::Start("mailto:$authoremail?subject=$AuthorEmail")
		
	}
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$form1.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:About_richtextbox1 = $richtextbox1.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$linklabel2.remove_LinkClicked($linklabel2_LinkClicked)
			$linklabel1.remove_LinkClicked($linklabel1_LinkClicked)
			$form1.remove_Load($form1_Load)
			$form1.remove_Load($Form_StateCorrection_Load)
			$form1.remove_Closing($Form_StoreValues_Closing)
			$form1.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$form1.SuspendLayout()
	#
	# form1
	#
	$form1.Controls.Add($richtextbox1)
	$form1.Controls.Add($linklabel2)
	$form1.Controls.Add($linklabel1)
	$form1.Controls.Add($label7)
	$form1.Controls.Add($label8)
	$form1.Controls.Add($label18)
	$form1.Controls.Add($label5)
	$form1.Controls.Add($label6)
	$form1.Controls.Add($label4)
	$form1.Controls.Add($label2)
	$form1.Controls.Add($label1)
	$form1.Controls.Add($buttonOK)
	$form1.AcceptButton = $buttonOK
	$form1.ClientSize = '318, 367'
	$form1.FormBorderStyle = 'FixedDialog'
	$form1.MaximizeBox = $False
	$form1.MinimizeBox = $False
	$form1.Name = 'form1'
	$form1.StartPosition = 'CenterScreen'
	$form1.Text = 'About'
	$form1.add_Load($form1_Load)
	#
	# richtextbox1
	#
	$richtextbox1.Location = '13, 132'
	$richtextbox1.Name = 'richtextbox1'
	$richtextbox1.ReadOnly = $True
	$richtextbox1.Size = '293, 194'
	$richtextbox1.TabIndex = 13
	$richtextbox1.Text = 'Thanks to:
Francios-Xavier Cat -> www.lazywinadmin.com'
	#
	# linklabel2
	#
	$linklabel2.Location = '150, 36'
	$linklabel2.Name = 'linklabel2'
	$linklabel2.Size = '156, 23'
	$linklabel2.TabIndex = 12
	$linklabel2.TabStop = $True
	$linklabel2.Text = "$AuthorEmail"
	$linklabel2.add_LinkClicked($linklabel2_LinkClicked)
	#
	# linklabel1
	#
	$linklabel1.Location = '150, 82'
	$linklabel1.Name = 'linklabel1'
	$linklabel1.Size = '156, 23'
	$linklabel1.TabIndex = 11
	$linklabel1.TabStop = $True
	$linklabel1.Text = "$AuthorWWW"
	$linklabel1.add_LinkClicked($linklabel1_LinkClicked)
	#
	# label7
	#
	$label7.Location = '149, 105'
	$label7.Name = 'label7'
	$label7.Size = '176, 23'
	$label7.TabIndex = 8
	$label7.Text = "$ApplicationLastUpdate"
	#
	# label8
	#
	$label8.Location = '12, 105'
	$label8.Name = 'label8'
	$label8.Size = '100, 23'
	$label8.TabIndex = 7
	$label8.Text = 'Last Update'
	#
	# label18
	#
	$label18.Location = '13, 82'
	$label18.Name = 'label18'
	$label18.Size = '100, 23'
	$label18.TabIndex = 5
	$label18.Text = 'Website'
	#
	# label5
	#
	$label5.Location = '150, 59'
	$label5.Name = 'label5'
	$label5.Size = '176, 23'
	$label5.TabIndex = 6
	$label5.Text = "$ApplicationVersion"
	#
	# label6
	#
	$label6.Location = '13, 59'
	$label6.Name = 'label6'
	$label6.Size = '100, 23'
	$label6.TabIndex = 5
	$label6.Text = 'Version'
	#
	# label4
	#
	$label4.Location = '13, 36'
	$label4.Name = 'label4'
	$label4.Size = '100, 23'
	$label4.TabIndex = 3
	$label4.Text = 'Contact'
	#
	# label2
	#
	$label2.Location = '150, 13'
	$label2.Name = 'label2'
	$label2.Size = '176, 23'
	$label2.TabIndex = 2
	$label2.Text = "$Authorname"
	#
	# label1
	#
	$label1.Location = '13, 13'
	$label1.Name = 'label1'
	$label1.Size = '100, 23'
	$label1.TabIndex = 1
	$label1.Text = 'Author:'
	#
	# buttonOK
	#
	$buttonOK.Anchor = 'Bottom, Right'
	$buttonOK.DialogResult = 'OK'
	$buttonOK.Location = '231, 332'
	$buttonOK.Name = 'buttonOK'
	$buttonOK.Size = '75, 23'
	$buttonOK.TabIndex = 0
	$buttonOK.Text = 'OK'
	$buttonOK.UseVisualStyleBackColor = $True
	$form1.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $form1.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$form1.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$form1.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$form1.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $form1.ShowDialog()

}
#endregion Source: About.psf

#region Source: Options.psf
function Call-Options_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
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#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$form_options = New-Object 'System.Windows.Forms.Form'
	$groupbox3 = New-Object 'System.Windows.Forms.GroupBox'
	$button2 = New-Object 'System.Windows.Forms.Button'
	$button1 = New-Object 'System.Windows.Forms.Button'
	$textbox8 = New-Object 'System.Windows.Forms.TextBox'
	$textbox9 = New-Object 'System.Windows.Forms.TextBox'
	$label_nirlauncher = New-Object 'System.Windows.Forms.Label'
	$label_sysinternals = New-Object 'System.Windows.Forms.Label'
	$button_OK = New-Object 'System.Windows.Forms.Button'
	$button_Export = New-Object 'System.Windows.Forms.Button'
	$button_import = New-Object 'System.Windows.Forms.Button'
	$button_save = New-Object 'System.Windows.Forms.Button'
	$groupbox2 = New-Object 'System.Windows.Forms.GroupBox'
	$button3 = New-Object 'System.Windows.Forms.Button'
	$textbox10 = New-Object 'System.Windows.Forms.TextBox'
	$label_cmrcviewer = New-Object 'System.Windows.Forms.Label'
	$textbox6 = New-Object 'System.Windows.Forms.TextBox'
	$label_sccmnamespace = New-Object 'System.Windows.Forms.Label'
	$checkbox1 = New-Object 'System.Windows.Forms.CheckBox'
	$textbox4 = New-Object 'System.Windows.Forms.TextBox'
	$textbox5 = New-Object 'System.Windows.Forms.TextBox'
	$label_site = New-Object 'System.Windows.Forms.Label'
	$label_sccm = New-Object 'System.Windows.Forms.Label'
	$label_sccmserver = New-Object 'System.Windows.Forms.Label'
	$groupbox1 = New-Object 'System.Windows.Forms.GroupBox'
	$button6 = New-Object 'System.Windows.Forms.Button'
	$button5 = New-Object 'System.Windows.Forms.Button'
	$button4 = New-Object 'System.Windows.Forms.Button'
	$textbox0 = New-Object 'System.Windows.Forms.TextBox'
	$label_configpath = New-Object 'System.Windows.Forms.Label'
	$textbox3 = New-Object 'System.Windows.Forms.TextBox'
	$label_logpath = New-Object 'System.Windows.Forms.Label'
	$textbox2 = New-Object 'System.Windows.Forms.TextBox'
	$label_homepath = New-Object 'System.Windows.Forms.Label'
	$textbox1 = New-Object 'System.Windows.Forms.TextBox'
	$label_profilepath = New-Object 'System.Windows.Forms.Label'
	$button_abort = New-Object 'System.Windows.Forms.Button'
	$folderbrowserdialog1 = New-Object 'System.Windows.Forms.FolderBrowserDialog'
	$openfiledialog1 = New-Object 'System.Windows.Forms.OpenFileDialog'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$FormEvent_Load = {
		# Change the text of some buttons / menus / groupboxes to the used language		
		$groupbox1.Text = $lang.General
		$button_save.Text = $lang.Save
		$button_abort.Text = $lang.Cancel
		
		#Load Variables into textboxes
		$textbox0.Text = $global:Confpath
		$textbox1.Text = $global:Profilefolder
		$textbox2.Text = $global:Homefolder
		$textbox3.Text = $global:Outfile
		if ($global:SCCMEnabled -eq $true)
		{
			$checkbox1.Checked = $global:SCCMEnabled
			$textbox4.Text = $global:SiteName
			$textbox5.Text = $global:SCCMServer
			$textbox6.Text = $global:SCCMNameSpace
			$textbox10.Text = $global:CmRCViewer
		}
		else
		{
			$checkbox1.Checked = $false
			$textbox4.enabled = $false
			$textbox5.enabled = $false
			$textbox6.enabled = $false
			$textbox10.enabled = $false
		}
		$textbox8.Text = $global:Nirlauncher
		$textbox9.Text = $global:Sysinternals
	}
	############################################################################################
	$checkbox1_CheckedChanged = {
		if ($checkbox1.Checked -eq $true)
		{
			$textbox4.Text = $global:SiteName
			$textbox5.Text = $global:SCCMServer
			$textbox6.Text = $global:SCCMNameSpace
			$textbox10.Text = $global:CmRCViewer
			$textbox4.enabled = $true
			$textbox5.enabled = $true
			$textbox6.enabled = $true
			$textbox10.enabled = $true
		}
		else
		{
			$textbox4.enabled = $false
			$textbox5.enabled = $false
			$textbox6.enabled = $false
			$textbox10.enabled = $false
		}
	}
	
	############################################################################################
	$button_save_Click = {
		if ($textbox1.Text.Length -ne 0)
		{
			if ($textbox2.Text.Length -ne 0)
			{
				if ($textbox3.Text.Length -ne 0)
				{
					if ($checkbox1.Checked -eq $true)
					{
						if ($textbox4.Text.Length -ne 0)
						{
							if ($textbox5.Text.Length -ne 0)
							{
								if ($textbox6.Text.Length -ne 0)
								{
									Save-Config
								}
								else
								{
									Show-MsgBox -BoxType OKOnly -Prompt "You need to configure all options"
								}
							}
							else
							{
								Show-MsgBox -BoxType OKOnly -Prompt "You need to configure all options"
							}
						}
						else
						{
							Show-MsgBox -BoxType OKOnly -Prompt "You need to configure all options"
						}
					}
					else
					{
						Save-Config
					}
				}
				else
				{
					Show-MsgBox -BoxType OKOnly -Prompt "You need to configure all options"
				}
			}
			else
			{
				Show-MsgBox -BoxType OKOnly -Prompt "You need to configure all options"
			}
		}
		else
		{
			Show-MsgBox -BoxType OKOnly -Prompt "You need to configure all options"
		}
	}
	############################################################################################
	$button_OK_Click = {
		if ($textbox1.Text.Length -ne 0)
		{
			if ($textbox2.Text.Length -ne 0)
			{
				if ($textbox3.Text.Length -ne 0)
				{
					if ($checkbox1.Checked -eq $true)
					{
						if ($textbox4.Text.Length -ne 0)
						{
							if ($textbox5.Text.Length -ne 0)
							{
								if ($textbox6.Text.Length -ne 0)
								{
									Save-Config
									$form_options.DialogResult = 'OK'
								}
								else
								{
									Show-MsgBox -BoxType OKOnly -Prompt "You need to configure all options"
								}
							}
							else
							{
								Show-MsgBox -BoxType OKOnly -Prompt "You need to configure all options"
							}
						}
						else
						{
							Show-MsgBox -BoxType OKOnly -Prompt "You need to configure all options"
						}
					}
					else
					{
						Save-Config
						$form_options.DialogResult = 'OK'
					}
				}
				else
				{
					Show-MsgBox -BoxType OKOnly -Prompt "You need to configure all options"
				}
			}
			else
			{
				Show-MsgBox -BoxType OKOnly -Prompt "You need to configure all options"
			}
		}
		else
		{
			Show-MsgBox -BoxType OKOnly -Prompt "You need to configure all options"
		}
	}
	############################################################################################
	$button_Export_Click = {
		$folderbrowserdialog1.ShowDialog()
		$save = $folderbrowserdialog1.SelectedPath += "/config.csv"
		New-Object -TypeName PSCustomObject -Property @{
			"global:Profilefolder" = $Profilefolder
			"global:Homefolder" = $Homefolder
			"global:Outfile" = $Outfile
			"global:SiteName" = $SiteName
			"global:SCCMServer" = $SCCMServer
			"global:SCCMNameSpace" = $SCCMNameSpace
			"global:SCCMEnabled" = $SCCMEnabled
			"global:Nirlauncher" = $Nirlauncher
			"global:Sysinternals" = $Sysinternals
			"global:CmRCViewer" = $CmRCViewer
		} | Export-Csv -Path $save -NoTypeInformation -Force
	}
	############################################################################################
	$button_abort_Click = { $Options.Close() }
	############################################################################################
	$button_import_Click = {
		$openfiledialog1.ShowDialog()
		$load = $openfiledialog1.FileNames
		$Import = Import-Csv -Path $load
		Add-RichTextBox -text $Import
		foreach ($Line in $Import)
		{
			$global:Profilefolder = $($Line."global:Profilefolder")
			$global:Homefolder = $($Line."global:Homefolder")
			$global:Outfile = $($Line."global:Outfile")
			$global:SiteName = $($Line."global:SiteName")
			$global:SCCMServer = $($Line."global:SCCMServer")
			$global:SCCMNameSpace = $($Line."global:SCCMNameSpace")
			$global:SCCMEnabled = $($Line."global:SCCMEnabled")
			$global:Nirlauncher = $($Line."global:Nirlauncher")
			$global:Sysinternals = $($Line."global:Sysinternals")
			$global:CmRCViewer = $($Line."global:CmRCViewer")
		}
		# Saving the imported Config
		Save-Config
	}
	############################################################################################
	
	$button1_Click = {
		$folderbrowserdialog1.ShowDialog()
		$textbox8.Text = $folderbrowserdialog1.SelectedPath
		$global:Nirlauncher = $textbox8.Text
	}
	
	$button2_Click = {
		$folderbrowserdialog1.ShowDialog()
		$textbox9.Text = $folderbrowserdialog1.SelectedPath
		$global:Sysinternals = $textbox9.Text
	}
	
	$button3_Click = {
		$folderbrowserdialog1.ShowDialog()
		$textbox10.Text = $folderbrowserdialog1.SelectedPath
		$global:CmRCViewer = $textbox9.Text
	}
	
	$button4_Click = {
		$folderbrowserdialog1.ShowDialog()
		$textbox3.Text = $folderbrowserdialog1.SelectedPath
		$global:logpath = $textbox3.Text
	}
	
	$button5_Click = {
		$folderbrowserdialog1.ShowDialog()
		$textbox1.Text = $folderbrowserdialog1.SelectedPath
		$global:profilepath = $textbox1.Text
	}
	
	$button6_Click = {
		$folderbrowserdialog1.ShowDialog()
		$textbox2.Text = $folderbrowserdialog1.SelectedPath
		$global:outfile = $textbox2.Text
	}
	
	$form_options_FormClosed = [System.Windows.Forms.FormClosedEventHandler]{
		$Options.Close()
	}
	############################################################################################
	#region Save-Config
	function Save-Config
	{
		$global:Profilefolder = $textbox1.Text
		$global:Homefolder = $textbox2.Text
		$global:Outfile = $textbox3.Text
		$global:SiteName = $textbox4.Text
		$global:SCCMServer = $textbox5.Text
		$global:SCCMNameSpace = $textbox6.Text
		$global:SCCMEnabled = [bool]$checkbox1.Checked
		$global:Nirlauncher = $textbox8.Text
		$global:Sysinternals = $textbox9.Text
		$global:CmRCViewer = $textbox10.Text
		$Exportpath = $Confpath + "/Config.csv"
		New-Object -TypeName PSCustomObject -Property @{
			"global:Profilefolder" = $Profilefolder
			"global:Homefolder" = $Homefolder
			"global:Outfile" = $Outfile
			"global:SiteName" = $SiteName
			"global:SCCMServer" = $SCCMServer
			"global:SCCMNameSpace" = $SCCMNameSpace
			"global:SCCMEnabled" = $SCCMEnabled
			"global:Nirlauncher" = $Nirlauncher
			"global:Sysinternals" = $Sysinternals
			"global:CmRCViewer" = $CmRCViewer
		} | Export-Csv -Path $Exportpath -NoTypeInformation
	}
	#endregion 
	############################################################################################
	
	
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$form_options.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:Options_textbox8 = $textbox8.Text
		$script:Options_textbox9 = $textbox9.Text
		$script:Options_textbox10 = $textbox10.Text
		$script:Options_textbox6 = $textbox6.Text
		$script:Options_checkbox1 = $checkbox1.Checked
		$script:Options_textbox4 = $textbox4.Text
		$script:Options_textbox5 = $textbox5.Text
		$script:Options_textbox0 = $textbox0.Text
		$script:Options_textbox3 = $textbox3.Text
		$script:Options_textbox2 = $textbox2.Text
		$script:Options_textbox1 = $textbox1.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$button2.remove_Click($button2_Click)
			$button1.remove_Click($button1_Click)
			$button_OK.remove_Click($button_OK_Click)
			$button_Export.remove_Click($button_Export_Click)
			$button_import.remove_Click($button_import_Click)
			$button_save.remove_Click($button_save_Click)
			$button3.remove_Click($button3_Click)
			$checkbox1.remove_CheckedChanged($checkbox1_CheckedChanged)
			$button6.remove_Click($button6_Click)
			$button5.remove_Click($button5_Click)
			$button4.remove_Click($button4_Click)
			$button_abort.remove_Click($button_abort_Click)
			$form_options.remove_FormClosed($form_options_FormClosed)
			$form_options.remove_Load($FormEvent_Load)
			$form_options.remove_Load($Form_StateCorrection_Load)
			$form_options.remove_Closing($Form_StoreValues_Closing)
			$form_options.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$form_options.SuspendLayout()
	$groupbox3.SuspendLayout()
	$groupbox2.SuspendLayout()
	$groupbox1.SuspendLayout()
	#
	# form_options
	#
	$form_options.Controls.Add($groupbox3)
	$form_options.Controls.Add($button_OK)
	$form_options.Controls.Add($button_Export)
	$form_options.Controls.Add($button_import)
	$form_options.Controls.Add($button_save)
	$form_options.Controls.Add($groupbox2)
	$form_options.Controls.Add($groupbox1)
	$form_options.Controls.Add($button_abort)
	$form_options.AcceptButton = $button_OK
	$form_options.CancelButton = $button_abort
	$form_options.ClientSize = '484, 489'
	$form_options.FormBorderStyle = 'FixedDialog'
	$form_options.MaximizeBox = $False
	$form_options.MinimizeBox = $False
	$form_options.Name = 'form_options'
	$form_options.StartPosition = 'CenterScreen'
	$form_options.Text = 'Options'
	$form_options.add_FormClosed($form_options_FormClosed)
	$form_options.add_Load($FormEvent_Load)
	#
	# groupbox3
	#
	$groupbox3.Controls.Add($button2)
	$groupbox3.Controls.Add($button1)
	$groupbox3.Controls.Add($textbox8)
	$groupbox3.Controls.Add($textbox9)
	$groupbox3.Controls.Add($label_nirlauncher)
	$groupbox3.Controls.Add($label_sysinternals)
	$groupbox3.Location = '12, 357'
	$groupbox3.Name = 'groupbox3'
	$groupbox3.Size = '460, 87'
	$groupbox3.TabIndex = 24
	$groupbox3.TabStop = $False
	$groupbox3.Text = 'External Tools (optional)'
	#
	# button2
	#
	$button2.BackColor = 'Transparent'
	#region Binary Data
	$button2.BackgroundImage = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAIWSURBVDhPpdPLTxNBHAfw/Qv8V8QgLx8t
aKsn482Toh5EoBBUQE3ExBC4aEWFgoD0gAcOEhMPHMAHelKjpWzpu8XahNiATQy0tLS7rV+/M6sU
iRwaN/lkJ7OZ32NmVgHwX/45WQ5lafT4C9VxFIuDhyQx9jxuWOI8v1n+NmZRvMK4lU5IiliAwjKw
FTJoUSwMVMH9qG47aMlhmYDBg9sBxCS2/Mh7LiCnXkQxOQNkw0AuYshHGZQJBJ0QhzpsgnfMWlkK
kP2EvL+F2sgmxxrpwVZovmZsfGhESvh4DrmVGVnF+wfmlt8BjgDpd9AjV6FHu1CIdhuWr0OLdMI3
YcFnew1Vw2Wvguv+Qbgf1v5pJckA3IPNOS7uRMplQ3qhDWm30M7FJ7H28ozRSjZIAfLLlpmFQUzg
JpqA9WkEnCJTdcm9GnyfPws93AEt0Mq2mpH3XaYmFGK9yMaf4XV/7ZyiDtcjE7yL0KQFKH7hZjEb
TwJajG10cSha6SaOhfA1YHUSibc9mOioaFQ8I8ewOm9D4k07kHqFYoz9x27QTRS+3qLbO/SgGL/D
ip/D6zzFW6TsExcJ4anTyEQGgB9P8fNbL/UZEv279AHJEWRCdpZfNysulrhd3Awzz3iap/EE2Bik
ob3lprAyewnOKwfOy2P0jFpTogrVUc+bZoJbMu9pcYhvR8O6KF8G4FNBlWXaT8az++8qD5RfWaTH
hoc2ThMAAAAASUVORK5CYII=')
	#endregion
	$button2.BackgroundImageLayout = 'Center'
	$button2.FlatStyle = 'Flat'
	$button2.ForeColor = 'Control'
	$button2.Location = '419, 42'
	$button2.Name = 'button2'
	$button2.Size = '30, 26'
	$button2.TabIndex = 16
	$button2.UseVisualStyleBackColor = $False
	$button2.add_Click($button2_Click)
	#
	# button1
	#
	$button1.BackColor = 'Transparent'
	#region Binary Data
	$button1.BackgroundImage = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAIWSURBVDhPpdPLTxNBHAfw/Qv8V8QgLx8t
aKsn482Toh5EoBBUQE3ExBC4aEWFgoD0gAcOEhMPHMAHelKjpWzpu8XahNiATQy0tLS7rV+/M6sU
iRwaN/lkJ7OZ32NmVgHwX/45WQ5lafT4C9VxFIuDhyQx9jxuWOI8v1n+NmZRvMK4lU5IiliAwjKw
FTJoUSwMVMH9qG47aMlhmYDBg9sBxCS2/Mh7LiCnXkQxOQNkw0AuYshHGZQJBJ0QhzpsgnfMWlkK
kP2EvL+F2sgmxxrpwVZovmZsfGhESvh4DrmVGVnF+wfmlt8BjgDpd9AjV6FHu1CIdhuWr0OLdMI3
YcFnew1Vw2Wvguv+Qbgf1v5pJckA3IPNOS7uRMplQ3qhDWm30M7FJ7H28ozRSjZIAfLLlpmFQUzg
JpqA9WkEnCJTdcm9GnyfPws93AEt0Mq2mpH3XaYmFGK9yMaf4XV/7ZyiDtcjE7yL0KQFKH7hZjEb
TwJajG10cSha6SaOhfA1YHUSibc9mOioaFQ8I8ewOm9D4k07kHqFYoz9x27QTRS+3qLbO/SgGL/D
ip/D6zzFW6TsExcJ4anTyEQGgB9P8fNbL/UZEv279AHJEWRCdpZfNysulrhd3Awzz3iap/EE2Bik
ob3lprAyewnOKwfOy2P0jFpTogrVUc+bZoJbMu9pcYhvR8O6KF8G4FNBlWXaT8az++8qD5RfWaTH
hoc2ThMAAAAASUVORK5CYII=')
	#endregion
	$button1.BackgroundImageLayout = 'Center'
	$button1.FlatStyle = 'Flat'
	$button1.ForeColor = 'Control'
	$button1.Location = '419, 15'
	$button1.Name = 'button1'
	$button1.Size = '30, 26'
	$button1.TabIndex = 14
	$button1.UseVisualStyleBackColor = $False
	$button1.add_Click($button1_Click)
	#
	# textbox8
	#
	$textbox8.Location = '76, 19'
	$textbox8.Name = 'textbox8'
	$textbox8.Size = '337, 20'
	$textbox8.TabIndex = 13
	#
	# textbox9
	#
	$textbox9.Location = '76, 46'
	$textbox9.Name = 'textbox9'
	$textbox9.Size = '337, 20'
	$textbox9.TabIndex = 15
	#
	# label_nirlauncher
	#
	$label_nirlauncher.Location = '7, 21'
	$label_nirlauncher.Name = 'label_nirlauncher'
	$label_nirlauncher.Size = '100, 23'
	$label_nirlauncher.TabIndex = 2
	$label_nirlauncher.Text = 'Nirlauncher:'
	#
	# label_sysinternals
	#
	$label_sysinternals.Location = '7, 48'
	$label_sysinternals.Name = 'label_sysinternals'
	$label_sysinternals.Size = '100, 23'
	$label_sysinternals.TabIndex = 4
	$label_sysinternals.Text = 'Sysinternals:'
	#
	# button_OK
	#
	$button_OK.Anchor = 'Bottom, Right'
	$button_OK.Location = '73, 454'
	$button_OK.Name = 'button_OK'
	$button_OK.Size = '75, 23'
	$button_OK.TabIndex = 17
	$button_OK.Text = 'OK'
	$button_OK.UseVisualStyleBackColor = $True
	$button_OK.add_Click($button_OK_Click)
	#
	# button_Export
	#
	$button_Export.Anchor = 'Bottom, Right'
	$button_Export.Location = '154, 454'
	$button_Export.Name = 'button_Export'
	$button_Export.Size = '75, 23'
	$button_Export.TabIndex = 18
	$button_Export.Text = 'Export'
	$button_Export.UseVisualStyleBackColor = $True
	$button_Export.add_Click($button_Export_Click)
	#
	# button_import
	#
	$button_import.Anchor = 'Bottom, Right'
	$button_import.DialogResult = 'OK'
	$button_import.Location = '235, 454'
	$button_import.Name = 'button_import'
	$button_import.Size = '75, 23'
	$button_import.TabIndex = 19
	$button_import.Text = 'Import'
	$button_import.UseVisualStyleBackColor = $True
	$button_import.add_Click($button_import_Click)
	#
	# button_save
	#
	$button_save.Anchor = 'Bottom, Right'
	$button_save.Location = '316, 454'
	$button_save.Name = 'button_save'
	$button_save.Size = '75, 23'
	$button_save.TabIndex = 20
	$button_save.Text = 'Save'
	$button_save.UseVisualStyleBackColor = $True
	$button_save.add_Click($button_save_Click)
	#
	# groupbox2
	#
	$groupbox2.Controls.Add($button3)
	$groupbox2.Controls.Add($textbox10)
	$groupbox2.Controls.Add($label_cmrcviewer)
	$groupbox2.Controls.Add($textbox6)
	$groupbox2.Controls.Add($label_sccmnamespace)
	$groupbox2.Controls.Add($checkbox1)
	$groupbox2.Controls.Add($textbox4)
	$groupbox2.Controls.Add($textbox5)
	$groupbox2.Controls.Add($label_site)
	$groupbox2.Controls.Add($label_sccm)
	$groupbox2.Controls.Add($label_sccmserver)
	$groupbox2.Location = '13, 183'
	$groupbox2.Name = 'groupbox2'
	$groupbox2.Size = '459, 168'
	$groupbox2.TabIndex = 23
	$groupbox2.TabStop = $False
	$groupbox2.Text = 'SCCM'
	#
	# button3
	#
	$button3.BackColor = 'Transparent'
	#region Binary Data
	$button3.BackgroundImage = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAIWSURBVDhPpdPLTxNBHAfw/Qv8V8QgLx8t
aKsn482Toh5EoBBUQE3ExBC4aEWFgoD0gAcOEhMPHMAHelKjpWzpu8XahNiATQy0tLS7rV+/M6sU
iRwaN/lkJ7OZ32NmVgHwX/45WQ5lafT4C9VxFIuDhyQx9jxuWOI8v1n+NmZRvMK4lU5IiliAwjKw
FTJoUSwMVMH9qG47aMlhmYDBg9sBxCS2/Mh7LiCnXkQxOQNkw0AuYshHGZQJBJ0QhzpsgnfMWlkK
kP2EvL+F2sgmxxrpwVZovmZsfGhESvh4DrmVGVnF+wfmlt8BjgDpd9AjV6FHu1CIdhuWr0OLdMI3
YcFnew1Vw2Wvguv+Qbgf1v5pJckA3IPNOS7uRMplQ3qhDWm30M7FJ7H28ozRSjZIAfLLlpmFQUzg
JpqA9WkEnCJTdcm9GnyfPws93AEt0Mq2mpH3XaYmFGK9yMaf4XV/7ZyiDtcjE7yL0KQFKH7hZjEb
TwJajG10cSha6SaOhfA1YHUSibc9mOioaFQ8I8ewOm9D4k07kHqFYoz9x27QTRS+3qLbO/SgGL/D
ip/D6zzFW6TsExcJ4anTyEQGgB9P8fNbL/UZEv279AHJEWRCdpZfNysulrhd3Awzz3iap/EE2Bik
ob3lprAyewnOKwfOy2P0jFpTogrVUc+bZoJbMu9pcYhvR8O6KF8G4FNBlWXaT8az++8qD5RfWaTH
hoc2ThMAAAAASUVORK5CYII=')
	#endregion
	$button3.BackgroundImageLayout = 'Center'
	$button3.FlatStyle = 'Flat'
	$button3.ForeColor = 'Control'
	$button3.Location = '418, 123'
	$button3.Name = 'button3'
	$button3.Size = '30, 26'
	$button3.TabIndex = 12
	$button3.UseVisualStyleBackColor = $False
	$button3.add_Click($button3_Click)
	#
	# textbox10
	#
	$textbox10.Location = '76, 126'
	$textbox10.Name = 'textbox10'
	$textbox10.Size = '337, 20'
	$textbox10.TabIndex = 11
	#
	# label_cmrcviewer
	#
	$label_cmrcviewer.Location = '6, 128'
	$label_cmrcviewer.Name = 'label_cmrcviewer'
	$label_cmrcviewer.Size = '100, 23'
	$label_cmrcviewer.TabIndex = 9
	$label_cmrcviewer.Text = 'CmRCViewer:'
	#
	# textbox6
	#
	$textbox6.Location = '76, 100'
	$textbox6.Name = 'textbox6'
	$textbox6.Size = '337, 20'
	$textbox6.TabIndex = 10
	#
	# label_sccmnamespace
	#
	$label_sccmnamespace.Location = '6, 102'
	$label_sccmnamespace.Name = 'label_sccmnamespace'
	$label_sccmnamespace.Size = '100, 23'
	$label_sccmnamespace.TabIndex = 7
	$label_sccmnamespace.Text = 'Namespace:'
	#
	# checkbox1
	#
	$checkbox1.Checked = $True
	$checkbox1.CheckState = 'Checked'
	$checkbox1.Location = '76, 19'
	$checkbox1.Name = 'checkbox1'
	$checkbox1.Size = '15, 24'
	$checkbox1.TabIndex = 7
	$checkbox1.UseVisualStyleBackColor = $True
	$checkbox1.add_CheckedChanged($checkbox1_CheckedChanged)
	#
	# textbox4
	#
	$textbox4.Location = '76, 47'
	$textbox4.Name = 'textbox4'
	$textbox4.Size = '337, 20'
	$textbox4.TabIndex = 8
	#
	# textbox5
	#
	$textbox5.Location = '76, 74'
	$textbox5.Name = 'textbox5'
	$textbox5.Size = '337, 20'
	$textbox5.TabIndex = 9
	#
	# label_site
	#
	$label_site.Location = '7, 49'
	$label_site.Name = 'label_site'
	$label_site.Size = '100, 23'
	$label_site.TabIndex = 2
	$label_site.Text = 'Site:'
	#
	# label_sccm
	#
	$label_sccm.Location = '6, 22'
	$label_sccm.Name = 'label_sccm'
	$label_sccm.Size = '100, 23'
	$label_sccm.TabIndex = 0
	$label_sccm.Text = 'SCCM:'
	#
	# label_sccmserver
	#
	$label_sccmserver.Location = '7, 76'
	$label_sccmserver.Name = 'label_sccmserver'
	$label_sccmserver.Size = '100, 23'
	$label_sccmserver.TabIndex = 4
	$label_sccmserver.Text = 'Server:'
	#
	# groupbox1
	#
	$groupbox1.Controls.Add($button6)
	$groupbox1.Controls.Add($button5)
	$groupbox1.Controls.Add($button4)
	$groupbox1.Controls.Add($textbox0)
	$groupbox1.Controls.Add($label_configpath)
	$groupbox1.Controls.Add($textbox3)
	$groupbox1.Controls.Add($label_logpath)
	$groupbox1.Controls.Add($textbox2)
	$groupbox1.Controls.Add($label_homepath)
	$groupbox1.Controls.Add($textbox1)
	$groupbox1.Controls.Add($label_profilepath)
	$groupbox1.Location = '13, 13'
	$groupbox1.Name = 'groupbox1'
	$groupbox1.Size = '459, 164'
	$groupbox1.TabIndex = 22
	$groupbox1.TabStop = $False
	$groupbox1.Text = 'General'
	#
	# button6
	#
	$button6.BackColor = 'Transparent'
	#region Binary Data
	$button6.BackgroundImage = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAIWSURBVDhPpdPLTxNBHAfw/Qv8V8QgLx8t
aKsn482Toh5EoBBUQE3ExBC4aEWFgoD0gAcOEhMPHMAHelKjpWzpu8XahNiATQy0tLS7rV+/M6sU
iRwaN/lkJ7OZ32NmVgHwX/45WQ5lafT4C9VxFIuDhyQx9jxuWOI8v1n+NmZRvMK4lU5IiliAwjKw
FTJoUSwMVMH9qG47aMlhmYDBg9sBxCS2/Mh7LiCnXkQxOQNkw0AuYshHGZQJBJ0QhzpsgnfMWlkK
kP2EvL+F2sgmxxrpwVZovmZsfGhESvh4DrmVGVnF+wfmlt8BjgDpd9AjV6FHu1CIdhuWr0OLdMI3
YcFnew1Vw2Wvguv+Qbgf1v5pJckA3IPNOS7uRMplQ3qhDWm30M7FJ7H28ozRSjZIAfLLlpmFQUzg
JpqA9WkEnCJTdcm9GnyfPws93AEt0Mq2mpH3XaYmFGK9yMaf4XV/7ZyiDtcjE7yL0KQFKH7hZjEb
TwJajG10cSha6SaOhfA1YHUSibc9mOioaFQ8I8ewOm9D4k07kHqFYoz9x27QTRS+3qLbO/SgGL/D
ip/D6zzFW6TsExcJ4anTyEQGgB9P8fNbL/UZEv279AHJEWRCdpZfNysulrhd3Awzz3iap/EE2Bik
ob3lprAyewnOKwfOy2P0jFpTogrVUc+bZoJbMu9pcYhvR8O6KF8G4FNBlWXaT8az++8qD5RfWaTH
hoc2ThMAAAAASUVORK5CYII=')
	#endregion
	$button6.BackgroundImageLayout = 'Center'
	$button6.FlatStyle = 'Flat'
	$button6.ForeColor = 'Control'
	$button6.Location = '418, 66'
	$button6.Name = 'button6'
	$button6.Size = '30, 26'
	$button6.TabIndex = 4
	$button6.UseVisualStyleBackColor = $False
	$button6.add_Click($button6_Click)
	#
	# button5
	#
	$button5.BackColor = 'Transparent'
	#region Binary Data
	$button5.BackgroundImage = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAIWSURBVDhPpdPLTxNBHAfw/Qv8V8QgLx8t
aKsn482Toh5EoBBUQE3ExBC4aEWFgoD0gAcOEhMPHMAHelKjpWzpu8XahNiATQy0tLS7rV+/M6sU
iRwaN/lkJ7OZ32NmVgHwX/45WQ5lafT4C9VxFIuDhyQx9jxuWOI8v1n+NmZRvMK4lU5IiliAwjKw
FTJoUSwMVMH9qG47aMlhmYDBg9sBxCS2/Mh7LiCnXkQxOQNkw0AuYshHGZQJBJ0QhzpsgnfMWlkK
kP2EvL+F2sgmxxrpwVZovmZsfGhESvh4DrmVGVnF+wfmlt8BjgDpd9AjV6FHu1CIdhuWr0OLdMI3
YcFnew1Vw2Wvguv+Qbgf1v5pJckA3IPNOS7uRMplQ3qhDWm30M7FJ7H28ozRSjZIAfLLlpmFQUzg
JpqA9WkEnCJTdcm9GnyfPws93AEt0Mq2mpH3XaYmFGK9yMaf4XV/7ZyiDtcjE7yL0KQFKH7hZjEb
TwJajG10cSha6SaOhfA1YHUSibc9mOioaFQ8I8ewOm9D4k07kHqFYoz9x27QTRS+3qLbO/SgGL/D
ip/D6zzFW6TsExcJ4anTyEQGgB9P8fNbL/UZEv279AHJEWRCdpZfNysulrhd3Awzz3iap/EE2Bik
ob3lprAyewnOKwfOy2P0jFpTogrVUc+bZoJbMu9pcYhvR8O6KF8G4FNBlWXaT8az++8qD5RfWaTH
hoc2ThMAAAAASUVORK5CYII=')
	#endregion
	$button5.BackgroundImageLayout = 'Center'
	$button5.FlatStyle = 'Flat'
	$button5.ForeColor = 'Control'
	$button5.Location = '418, 41'
	$button5.Name = 'button5'
	$button5.Size = '30, 26'
	$button5.TabIndex = 2
	$button5.UseVisualStyleBackColor = $False
	$button5.add_Click($button5_Click)
	#
	# button4
	#
	$button4.BackColor = 'Transparent'
	#region Binary Data
	$button4.BackgroundImage = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAIWSURBVDhPpdPLTxNBHAfw/Qv8V8QgLx8t
aKsn482Toh5EoBBUQE3ExBC4aEWFgoD0gAcOEhMPHMAHelKjpWzpu8XahNiATQy0tLS7rV+/M6sU
iRwaN/lkJ7OZ32NmVgHwX/45WQ5lafT4C9VxFIuDhyQx9jxuWOI8v1n+NmZRvMK4lU5IiliAwjKw
FTJoUSwMVMH9qG47aMlhmYDBg9sBxCS2/Mh7LiCnXkQxOQNkw0AuYshHGZQJBJ0QhzpsgnfMWlkK
kP2EvL+F2sgmxxrpwVZovmZsfGhESvh4DrmVGVnF+wfmlt8BjgDpd9AjV6FHu1CIdhuWr0OLdMI3
YcFnew1Vw2Wvguv+Qbgf1v5pJckA3IPNOS7uRMplQ3qhDWm30M7FJ7H28ozRSjZIAfLLlpmFQUzg
JpqA9WkEnCJTdcm9GnyfPws93AEt0Mq2mpH3XaYmFGK9yMaf4XV/7ZyiDtcjE7yL0KQFKH7hZjEb
TwJajG10cSha6SaOhfA1YHUSibc9mOioaFQ8I8ewOm9D4k07kHqFYoz9x27QTRS+3qLbO/SgGL/D
ip/D6zzFW6TsExcJ4anTyEQGgB9P8fNbL/UZEv279AHJEWRCdpZfNysulrhd3Awzz3iap/EE2Bik
ob3lprAyewnOKwfOy2P0jFpTogrVUc+bZoJbMu9pcYhvR8O6KF8G4FNBlWXaT8az++8qD5RfWaTH
hoc2ThMAAAAASUVORK5CYII=')
	#endregion
	$button4.BackgroundImageLayout = 'Center'
	$button4.FlatStyle = 'Flat'
	$button4.ForeColor = 'Control'
	$button4.Location = '418, 93'
	$button4.Name = 'button4'
	$button4.Size = '30, 26'
	$button4.TabIndex = 6
	$button4.UseVisualStyleBackColor = $False
	$button4.add_Click($button4_Click)
	#
	# textbox0
	#
	$textbox0.Location = '76, 18'
	$textbox0.Name = 'textbox0'
	$textbox0.ReadOnly = $True
	$textbox0.Size = '337, 20'
	$textbox0.TabIndex = 0
	#
	# label_configpath
	#
	$label_configpath.Location = '8, 20'
	$label_configpath.Name = 'label_configpath'
	$label_configpath.Size = '100, 23'
	$label_configpath.TabIndex = 8
	$label_configpath.Text = 'Configpath:'
	#
	# textbox3
	#
	$textbox3.Location = '76, 98'
	$textbox3.Name = 'textbox3'
	$textbox3.Size = '337, 20'
	$textbox3.TabIndex = 5
	#
	# label_logpath
	#
	$label_logpath.Location = '7, 100'
	$label_logpath.Name = 'label_logpath'
	$label_logpath.Size = '100, 23'
	$label_logpath.TabIndex = 4
	$label_logpath.Text = 'Logpath:'
	#
	# textbox2
	#
	$textbox2.Location = '76, 70'
	$textbox2.Name = 'textbox2'
	$textbox2.Size = '337, 20'
	$textbox2.TabIndex = 3
	#
	# label_homepath
	#
	$label_homepath.Location = '7, 72'
	$label_homepath.Name = 'label_homepath'
	$label_homepath.Size = '100, 23'
	$label_homepath.TabIndex = 2
	$label_homepath.Text = 'Homepath:'
	#
	# textbox1
	#
	$textbox1.Location = '76, 44'
	$textbox1.Name = 'textbox1'
	$textbox1.Size = '337, 20'
	$textbox1.TabIndex = 1
	#
	# label_profilepath
	#
	$label_profilepath.Location = '7, 46'
	$label_profilepath.Name = 'label_profilepath'
	$label_profilepath.Size = '100, 23'
	$label_profilepath.TabIndex = 0
	$label_profilepath.Text = 'Profilepath:'
	#
	# button_abort
	#
	$button_abort.Anchor = 'Bottom, Right'
	$button_abort.DialogResult = 'Cancel'
	$button_abort.Location = '397, 454'
	$button_abort.Name = 'button_abort'
	$button_abort.Size = '75, 23'
	$button_abort.TabIndex = 21
	$button_abort.Text = 'Cancel'
	$button_abort.UseVisualStyleBackColor = $True
	$button_abort.add_Click($button_abort_Click)
	#
	# folderbrowserdialog1
	#
	#
	# openfiledialog1
	#
	$openfiledialog1.FileName = 'openfiledialog1'
	$openfiledialog1.Filter = 'CSV-Dateien|*.csv'
	$groupbox1.ResumeLayout()
	$groupbox2.ResumeLayout()
	$groupbox3.ResumeLayout()
	$form_options.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $form_options.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$form_options.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$form_options.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$form_options.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $form_options.ShowDialog()

}
#endregion Source: Options.psf

#region Source: Taskmanager.psf
function Call-Taskmanager_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
VVAAAB+LCAAAAAAABADtXFlT4kwXvrfK/0BxqzXs21dKVUIAQfawKDdWkzQhkKRjJxDCr/86gIqQ
QIcRRn2ZsWYkc05On6Wfs3SPdy0ooBnENgdMECDfGDLS7oPRYPb6KhC4q2NZkjWgFGQF1oAKs21g
TFSgAQniP7oxvAvtUKz4BmMomAHT1uF9kLcNE6p/erImIsv4U0BYXf15G3D7p9tAd72M+J+w8/s2
kJsq5hTDew1OTQyU20BjOlBk4RHabTSB2v0glQIJIZGMZGJxGE5nggGNLOU+OCTviwQDwkhWREzo
gjmkmRgpxko9stAGRjrEpr1myCky1ExeXsBgNh2O3AbS0eRd6I3Ig6kqa7I6VddckdRtIJVOH+Ry
jBXMLld4kNZ5dRHLOm/aCmHiR8g6yNOGczOYdSy6S5qfES3XdA5FTkGGrEnr5bxsPLoLLWndGCsI
iG8czvdbpIdDoA0Ga3+cPBBMMBBWovaGw64VOSRMiBVlRdmx4i5xBQnAJOsNZslSY7tu9QqCjdVR
8PBQIYaFYkkT4ZyIomH5COhUnEYGcc369bvhT+vbBgGJczhWJ3IOeHWfq+K3gWjURck9zlpKpGJp
AFFcbqwYCYjVFxXfymGpDGFIRRJULB8uc4sIL3wgDwVoGNCg4ukYsCsbU6AsgYgFwiSHFISD2Tae
Qvc3HA6VimyYXRlaJ48VhQiaEUEHg2VXcUZRkEV0napaCyIswn06u6SVJeeWDEJWIuruM82K7wEC
IvB05tlaFVlXCw4hsY4A1+svqSTiX5bxHwhtKxFytPipmjVK3G9TiWxS/Ct9lWt0fptKVagibL90
DLK/qHSjBJy9ZYsbQ2GqKC1krWoLX9j2kUk9s5tLyUxMKb8JKwDFoJW2ysHvSE7JtU6naac0D2co
mQ4lVNf0mEOqTswxUCBvAhMugZOFIzCTnTTpR1MnJQazHDSBrLhn5616fBXTpINxXP9uoZeNx58r
9FU4rfLzR2m38+Db1XpRv7XeRp2yJqcqdv66RKRj+SclIl31ui4RIXaaPEBQ629KPBbNz1LhDdD8
iALPWQkwTeKIvAbI7hWPx8Bk0q1n2g9mzqJ9YVmEWCnuG8g83L6956l82pAFx0fncKu+EnWcZzd2
PweNiYn0U+XQozLhKgY2NPxeKY1w8MRk+1LXT8whsbPPC+hA/Z8kAzptVsmAh3gmC/+pccHBeuPn
ld+fq2h3//9XquhD8LX9kQLLECIRj2X99GhGJBmOJJ9T7Y2zhAdZFKFGMRJ2WtHPEHmoyX63QwUM
4Aln/J8DYLvFfreR4qwi8rnL3umw6ZVy8PCkxc8BtYj4VUH0RfqwU9NE2r9SZ7CU/nXa8FAHGJjo
XNMd77Az3lbyu1wV/c2u+jrlvoOrYr/ZVV+n3HdwVXyvNn6PoGmOhtdNynshQcHy3qSQVmj95e8M
mupofGNqQaPHqj3Zo4f/Oq4BtFOWLW/DDUfKUbcSWERCZvd2x4GgSKXc6n2PscRybf6cm6AJhg3n
ur6eog08bU351gOua8ZjhwWpsNOV0R3Ir5uypUQ/TX/yNhClmxIc2FJemwpDBQExYOgQitRsjCJL
xABV0l4oMAc1E2I3Rx8zKsJAmLDghDnoLdk4ggYA+/b/kQcOuSk2VmPKISBLpjukAFiCuRHQpOVQ
mM6tW/FJN/+pgrlzy83Z5ZRi1qnlzYo+Yzrud4y1e+XOlV4WJgUMX6ck99pLk9Ep0wXKFO6j3zyK
WxKvvCJuWOBl8/n2YdwxW+GMIPgXE1NnXuQXAf2MPWOZzBEQ6DbA+uY+8H3y+ckH/tMQHTD8jRPc
4mLf/O3zh8POOc89j91bUm9rd82nS7qAQ3fwEm9PFs1RMBvd8d23NoRzqWqvBQjBT9Ln40bVXq0c
Mp9u3d4v39oMzv2rvQYgBD9Jn0+Xr/YqtqIMLClpnRvZ6Wz8GuNc83OPQbmHelsDA49+xT1JZJzD
09005BFNSNWnpG1wnv3vq0x58qn99njeQ8UCyd7OaaqEYKBTug1kdPM2YDhHMvcsUnbbLA8vrKVQ
mj8aDrvk6KNteeqB2dbRgIdqnGyQILTXx1mOfw9aY5mAN6YrrKwBbGflLltvWeHHooQY8qvGd0b5
jkS+Y52PTDPHPDt/D9OhzGj55KnGt8IlBhtxIdl0HrS0ZidCqHPz66uxNUs/NzvO47KQH/UFi2E4
o0o+pjhGEGevRYelxPGdFtvlRg29X8F8ojYqVgexcZzvjcKo1ezm51xcQtdX2oTTpfio+Pw4LyZ7
LJIm1f6j1Kjl8t1ygS2KxXw7P5Msu57hyvmEYfetWKOkNPL5jC6xuUo/8TQTq2w6b6Wlp+urgZKI
a9NhMiaKmXC9yGtWDozmg0ar1mAaVSvzpEvJvlqIJyf9fnjOPy7KjRIe6VzP6Go6OypOHucxjXlK
N2apxfVVZCGl6+g5JJTaohYfWoNhKBeePDO1WBWErJjUG/Yricmi/cjOxz37McoNTauUMe3qc67/
+DSoPQAuExlUnsuYI2sznge4N+w8WmXcyGeq0WqkLnQX9br+UEqVcSyVfJAzSHp4LZSYWj0cqqqq
OlB5Vc2A9ALelOJVXOsx4thEZal3fSXMbxr8Qookk3a/n55X00+zJ06eZ4T4uPRaeGbGCMtsN8OM
8o1ZRH0IGUhD0giEwXDQr1b7ixsbw3bRHulT4+H6yjJrtZzBJDqRBR9nK/NFuTSUopnMaz0WLeFU
p2z2h0PTZtqvsH2TRlEuXebHTcyUBwrWhOdKql+O3gyGoKDlQsRufKQ2rsREuQXM1Cuup6xKqxF7
GPcMNGadM3AujxJqbTy1YKE4G/ekaJ4d5Qb6pJdKj0z+4cFq2TVRlZjConF9lYcwKhcmC2Db0Xrl
adGOSzjZETua8oSnimLM582byTwspdk2EwN9hezeMd+2x3XuNdQTmkIvxIbKMF5vjiqz66vHJqct
ahFVD2vaZMaMWunutLqoYV0lz8bSBHUtNjRLc22JazI8E6l2dWthOcHOlludRB5PypIk3d/fhdab
662Yp9mabQw0QwekzTHXY5QqeaqZgBIW14hBiYpJP0mpCM2AcydhunuZ4PNl3NU13PVKXnau3/4M
0I1eQPcCuhfQvYAuNejujozcQTce9QG6DTB1ufDljbfRn4q3sQveXvD2grcXvKXG292Bu8d43k+R
25zKLvjiCbexnwq38QvcXuD2ArcXuKWG2927TR6D7oQPuG3BIYbGKOD5f2u8oTf+hdB7hsude+5G
0502fDDQDne+cuD9Ly3kOYrxshBtJ/ZrLOTZPHlZiLZ2OmwhxjCgSpYNjbcXrZ/YWdUQEFbkwReo
fhd6f+u2lJWxzyHjyx16WKLzo+nOIwgDS9akY2SFY8PEMDWMRMREGMTAYVlPqnIWnXIIw68X9P5x
FfJ3oc0fI5j9P8qzCbdVUAAA#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$form1 = New-Object 'System.Windows.Forms.Form'
	$tabcontrol1 = New-Object 'System.Windows.Forms.TabControl'
	$tabpage1 = New-Object 'System.Windows.Forms.TabPage'
	$listview1 = New-Object 'System.Windows.Forms.ListView'
	$tabpage2 = New-Object 'System.Windows.Forms.TabPage'
	$listbox1 = New-Object 'System.Windows.Forms.ListBox'
	$picturebox1 = New-Object 'System.Windows.Forms.PictureBox'
	$tabpage3 = New-Object 'System.Windows.Forms.TabPage'
	$listview2 = New-Object 'System.Windows.Forms.ListView'
	$toolstrip1 = New-Object 'System.Windows.Forms.ToolStrip'
	$panel1 = New-Object 'System.Windows.Forms.Panel'
	$label1 = New-Object 'System.Windows.Forms.Label'
	$trackbar1 = New-Object 'System.Windows.Forms.TrackBar'
	$label3 = New-Object 'System.Windows.Forms.Label'
	$label2 = New-Object 'System.Windows.Forms.Label'
	$Image_Name = New-Object 'System.Windows.Forms.ColumnHeader'
	$PID = New-Object 'System.Windows.Forms.ColumnHeader'
	$User_Name = New-Object 'System.Windows.Forms.ColumnHeader'
	$CPU = New-Object 'System.Windows.Forms.ColumnHeader'
	$Memory_Usage = New-Object 'System.Windows.Forms.ColumnHeader'
	$toolstriplabel1 = New-Object 'System.Windows.Forms.ToolStripLabel'
	$textbox1 = New-Object 'System.Windows.Forms.ToolStripTextBox'
	$button1 = New-Object 'System.Windows.Forms.ToolStripButton'
	$button2 = New-Object 'System.Windows.Forms.ToolStripButton'
	$button3 = New-Object 'System.Windows.Forms.ToolStripButton'
	$button4 = New-Object 'System.Windows.Forms.ToolStripButton'
	$toolstripseparator1 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$toolstripseparator2 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$toolstripseparator3 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	$form1_Load={
		Get-ComputerTxtBox
		$textbox1.Text = $ComputerName
	}
	
	   ### This sets up the context menu for a selected item on the services page.
	   $row_click = { set-context-menu };
	
	   ### $listview2(the listview that shows the services)
	   $listview2.AllowColumnReorder = "True";
	   $listview2.Dock = "Fill";
	   $listview2.Name = "SDGCols";
	   $listview2.FullRowSelect = "True";
	   $listview2.View = "Details";
	   $listview2.MultiSelect = $false;
	   $listview2.Columns.Add("displayname", "Display Name", 100).tag = [System.String];
	   $listview2.Columns.Add("name", "Service Name", 100).tag = [System.String];
	   $listview2.Columns.Add("processid", "PID", 50).tag = [System.Int32];
	   $listview2.Columns.Add("description", "Description", 80).tag = [System.String];
	   $listview2.Columns.Add("state", "Status", 60).tag = [System.String];
	   $listview2.Columns.Add("startmode", "Startup Type", 80).tag = [System.String];
	   $listview2.Columns.Add("startname", "Log On As", 100).tag = [System.String];
	   $listview2.Parent = $Tab3;
	   $listview2.FullRowSelect = $true;
	   $listview2.Add_ColumnClick($columnClick);
	   $listview2.Add_ItemSelectionChanged($row_click);
	
	   ### Build the context menu for the processes tab
	   $svcs_CM = new-object System.Windows.Forms.ContextMenuStrip;
	   ### The menu options
	   $start_svc = new-object System.Windows.Forms.ToolStripMenuItem -ArgumentList "Start";
	   $stop_svc = new-object System.Windows.Forms.ToolStripMenuItem -ArgumentList "Stop";
	   $cycle_svc = new-object System.Windows.Forms.ToolStripMenuItem -ArgumentList "Recycle";
	   $svc_props = new-object System.Windows.Forms.ToolStripMenuItem -ArgumentList "Properties";
	
	   $svcs_CM.Items.Add($start_svc) | out-null; # Add options to the context menu 
	   $svcs_CM.Items.Add($stop_svc) | out-null;
	   $svcs_CM.Items.Add($cycle_svc) | out-null;
	   $svcs_CM.Items.Add($svc_props) | out-null;
	
	   ### This sets up sorting for a clicked column. The first IF determines if this is the  
	   ### same column that was clicked last time. If not, it sets the order to descending so  
	   ### that the next IF will reset it to ascending (the default for a new column click).  
	   ### The last IF determines if we're sorting strings or numbers.    
		$columnClick = {  
	      $cn = $_.Column;  
	      $obj = $args[0];   ### Which listview  
	      $typ = $obj.Columns[$cn].tag.tostring()  
	         if ($things[$obj.name] -ne $cn) {  
	         $things[$obj.name] = $cn;  
	         if ($typ -eq "System.String") {  
	            $obj.Sorting = [System.Windows.Forms.SortOrder]::Descending;  
	         } else {  
	            $obj.Sorting = [System.Windows.Forms.SortOrder]::Ascending;  
	         }  
	      }  
	      if ($obj.Sorting -eq [System.Windows.Forms.SortOrder]::Descending) {  
	         $obj.Sorting = [System.Windows.Forms.SortOrder]::Ascending;  
	      } else {  
	         $obj.Sorting = [System.Windows.Forms.SortOrder]::Descending;  
	      }  
	      if ($typ -eq "System.String") {  
	         $obj.ListViewItemSorter = new-object ListViewItemComparer($cn, $obj.Sorting);  
	      } else {  
	         $obj.ListViewItemSorter = new-object ListViewItemIntComparer($cn, $obj.Sorting);  
	      }  
	   }  
	   ### Set the actions for when each of the options is selected
	   $start_svc_click = {
	      foreach ($si in $listview2.SelectedItems) {
	         $sname = $si.subitems[$listview2.columns["name"].index].text;
	         $d = (get-service $sname -computer $things["machine"]).servicesdependedon;
	         start-related-services $sname $d;
	      }
	   }
	
	   $stop_svc_click = {
	      foreach ($si in $listview2.SelectedItems) {
	         $sname = $si.subitems[$listview2.columns["name"].index].text;
	         $d = (get-service $sname -computer $things["machine"]).dependentservices;
	         $confirm = "Yes";
	         if ($d.count -gt 0) {
	            $warning = "The following services are dependent upon $sname running. Do you want to kill them, also?`n`n";
	            foreach ($dependent in $d) { $warning += $dependent.name + "`n"; }
	            $confirm = [System.Windows.Forms.MessageBox]::Show($warning, "No kidding?", "YesNo");
	         }
	
	         if ($confirm -eq "Yes") { stop-related-services $sname $d; }
	      }
	   }
	
	   $cycle_svc_click = {
	      foreach ($si in $listview2.SelectedItems) {
	         $sname = $si.subitems[$listview2.columns["name"].index].text;
	         $d = (get-service $sname -computer $things["machine"]).dependentservices;
	         $confirm = "Yes";
	         if ($d.count -gt 0) {
	            $warning = "The following services are dependent upon $sname running and will be cycled, also. Do you want to continue?`n";
	            foreach ($dependent in $d) { $warning += $dependent.name + "`n"; }
	            $confirm = [System.Windows.Forms.MessageBox]::Show($warning, "No kidding?", "YesNo");
	         }
	
	         if ($confirm -eq "Yes") {
	            stop-related-services $sname $d;
	            start-related-services $sname $d;
	         }
	      }
	   }
	
	   $svc_props_click = {
	      $ps = @{};
	      foreach ($si in $listview2.SelectedItems) {
	         $svc = CIM-Stuff win32_service ("name='" + $si.subitems[$listview2.columns["name"].index].Text + "'");
	         $svc | gm -membertype property | % { $p = $_.name; $ps.add($p, $svc.$p) };
	         $props = $ps | ft -auto | out-string;
	      }
	
	      display-myMessageBox $props;
	   }
	
	   $start_svc.Add_Click($start_svc_click);
	   $stop_svc.Add_Click($stop_svc_click);
	   $cycle_svc.Add_Click($cycle_svc_click);
	   $svc_props.Add_Click($svc_props_click);
	
	   $listview2.ContextMenuStrip = $svcs_CM;
	
	   ### Build the context menu for the processes tab
	   $procs_CM = new-object System.Windows.Forms.ContextMenuStrip;
	
	   $end_proc = new-object System.Windows.Forms.ToolStripMenuItem -ArgumentList "End Process";
	   $proc_props = new-object System.Windows.Forms.ToolStripMenuItem -ArgumentList "Properties";
	
	   $procs_CM.Items.Add($end_proc) | out-null; # Add option to context menu 
	   $procs_CM.Items.Add($proc_props) | out-null;
	   $end_proc_click = ({
	   	  $pi = $listview1.columns["PID"].index;
	   	  $in = $listview1.columns["Image_Name"].index;
	      foreach ($si in $listview1.SelectedItems) {
	         $label1.text = "Killing process " + $si.subitems[$pi].text + " (" + $si.subitems[$in].text + ") ...";
	         CIM-Method win32_process ("handle='" + $si.subitems[$pi].Text + "'") terminate;
	         $label1.text += " Stopped";
	      }
	   })
	
	   $proc_props_click = ({
	      $props = "";
	   	  $pi = $listview1.columns["PID"].index;
	      foreach ($si in $listview1.SelectedItems) {
	      	$props = Get-WmiObject win32_process -computer $ComputerName -filter ("handle='" + $si.subitems[1].Text + "'") | out-string;
	        #$props = CIM-Stuff Win32_PerfFormattedData_PerfProc_Process ("idprocess='" + $si.subitems[$pi].Text + "'") | out-string;
	        #$props = (CIM-Stuff win32_process ("handle='" + $si.subitems[$pi].Text + "'")).ciminstanceproperties | sort -property name | select-object -property name,value | ft -auto | out-string;
	        #$props = CIM-Stuff win32_process ("handle='" + $si.subitems[$pi].Text + "'") | select-object -property * | out-string;
	      }
	
	      display-myMessageBox $props;
	   })
	
	   $end_proc.Add_Click($end_proc_click);
	   $proc_props.Add_Click($proc_props_click);
	
	   $listview1.ContextMenuStrip = $procs_CM;
	
	   $pcs = {
	      if ($_.scrollorientation -eq "HorizontalScroll") {
	        $picturebox1.horizontalscroll.value = $_.newvalue;
	      } else {
	        $picturebox1.verticalscroll.value = $_.newvalue;
	      }
	   }
	
	   ### After about 15 days of screwing around, I finally figured out that in order to get this to work
	   ### correctly with the picturebox, we can't set anything on AutoScrollMargin right here. We HAVE to
	   ### wait until we figure out how big the bitmap will be and then set it. I don't really care how big it is
	   ### just as long as it's big enough to display everything, so when we do get around to setting the size,
	   ### it's actually much bigger than it needs to be. Maybe someday I'll get around to sizing it correctly,
	   ### but probably not. It works, and that's what I care about.
	#  $picturebox1.AutoScroll = $true;
	#  $picturebox1.AutoScrollPosition = new-object system.drawing.point(0, 0);
	   $picturebox1.Anchor = "Left, Top, Right, Bottom";
	   $picturebox1.BackColor = "black";
	   $picturebox1.BorderStyle = "Fixed3D";
	#  $picturebox1.add_scroll($pcs);
	   $picturebox1.Controls.Add($listbox1);
	
	   ### $listbox1
	   ### I don't remember where I found out about this. It seems that you can't get a scrollbar to just appear
	   ### on a panel device. There are only certain things that will allow a scrollbar to be added. A listbox is
	   ### one of those things. This does nothing except activate the scrollbar on $picturebox1.
	   $listbox1.Location = new-object system.drawing.point(210, 203);
	   $listbox1.Size = new-object System.Drawing.Size(0, 0);
	
	### Make a popup window to display properties for either a process or a service. I tried using a PropertyGrid, but
	### it never displayed the services satisfactorily.
	### Return a formatted datetime MM/DD/YYYY hh:mm:ss
	filter return-datetime {
	   ([datetime] ($_.substring(4,2) + "/" + $_.substring(6,2) + "/" + $_.substring(0, 4) + " " +
	       $_.substring(8,2) + ":" + $_.substring(10,2) + ":" + $_.substring(12,2))).tostring().trimend();
	}
	
	### A bit about all these hashes. I don't remember how I figured out that hashes are global, and I'm not
	### sure why they are. It may have something to do with $error being a hash and the need to have it
	### available everywhere, but that's just speculation. At any rate, I had all this data that needed to be
	### used in multiple functions, and this seemed like the easiest way at the time. I don't know what impact,
	### if any, it has on performance. It probably could have been done passing parameters as normal, but
	### this works well, it makes it very easy to re-initialize things to start over with a new machine, and
	### it hasn't brought any host machine to its knees (yet).
	$keyhash = @{};
	$hash = @{};
	$pointhash = @{};
	$parms = @{};
	$beforeprocs = @{};
	$pens = @{};
	$brushes = @{};
	$things = @{};
	$fonts = @{};
	$fonts.add("mss8",  (new-object System.Drawing.Font("Microsoft Sans Serif", 8.25, [System.Drawing.FontStyle]::Bold)));
	$fonts.add("mssnb",  (new-object System.Drawing.Font("Microsoft Sans Serif", 8.25)));
	$fonts.add("cn9", (new-object System.Drawing.Font("Courier New", 9, [System.Drawing.FontStyle]::Bold)));
	$fonts.add("cn8", (new-object System.Drawing.Font("Courier New", 8.25, [System.Drawing.FontStyle]::Bold)));
	$fonts.add("verdana6", (new-object system.Drawing.Font("Verdana", 6)));
	$fonts.add("verdana8", (new-object system.Drawing.Font("Verdana", 8.25)));
	initialize-things;
	foreach ($clr in ($things["colors"])) {
	   $pens.add($clr, (new-object system.drawing.pen($clr)));
	   $brushes.add($clr, (new-object system.drawing.solidbrush($clr)));
	};
	
	$pens["red"].width = 4;
	
	################################
	### This is a string for the custom comparer class that I copied from a MS article
	### at http://msdn.microsoft.com/en-us/library/ms996467.aspx. I had read that you
	### could do this, and you can imagine my surprise at how well it works.
	$ccs = @"
using System;
using System.Collections;
using System.Windows.Forms;

public class ListViewItemComparer : IComparer {
  private int col;
  private SortOrder order;
  public ListViewItemComparer() {
      col=0;
      order = SortOrder.Ascending;
  }
  public ListViewItemComparer(int column, SortOrder order) 
  {
      col=column;
      this.order = order;
  }
  public int Compare(object x, object y) 
  {
      int returnVal= -1;
      returnVal = String.Compare(((ListViewItem)x).SubItems[col].Text, ((ListViewItem)y).SubItems[col].Text);
      if (order == SortOrder.Descending)
          returnVal *= -1;
      return returnVal;
  }
}
"@;
	
	### A similar class to use for comparing columns of integers so they don't get compared as strings.
	$cci = @"
using System;
using System.Collections;
using System.Windows.Forms;

public class ListViewItemIntComparer : IComparer {
  private int col;
  private SortOrder order;
  public ListViewItemIntComparer() {
      col = 0;
      order = SortOrder.Ascending;
  }
  public ListViewItemIntComparer(int column, SortOrder order) 
  {
      col = column;
      this.order = order;
  }
  public int Compare(object x, object y) 
  {
      int returnVal = -1;
      int ix = int.Parse(((ListViewItem)x).SubItems[col].Text);
      int iy = int.Parse(((ListViewItem)y).SubItems[col].Text);
      returnVal = ix.CompareTo(iy);
      if (order == SortOrder.Descending)
         returnVal *= -1;
      return returnVal;
  }
}
"@;
	
	### This is the C# code to make a double-buffered listview. Atually, it's an OPTIMIZED double-buffered
	### listiview. The ControlStyles.DoubleBuffer control doesn't seem to do anything different than what we
	### see in a regular listview. At http://msdn.microsoft.com/en-us/library/system.windows.forms.controlstyles(v=vs.110).aspx,
	### it states that:
	###               If you set this property to true, you should also set the AllPaintingInWmPaint to true.
	### So I did. Of course it also states that for DoubleBuffer, you should set AllPaintingInWmPaint and UserPaint.
	### The problem is that if you set UserPaint, nothing shows up in the listview whether you use DoubleBuffer or
	### OptimizedDoubleBuffer. There may be a way to get it to work, but I quickly got bored with the whole thing.
	$dblv = @"
using System;
using System.Windows.Forms;

public class DoubleBufferedListView : System.Windows.Forms.ListView
{
    public DoubleBufferedListView()
    {
        this.SetStyle(ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
    }
}
"@;
	
	### Add the comparer class
	Add-Type $ccs -ReferencedAssemblies ('System.Windows.Forms');
	Add-Type $cci -ReferencedAssemblies ('System.Windows.Forms');
	Add-Type -WarningAction SilentlyContinue $dblv -ReferencedAssemblies ('System.Windows.Forms');
	
	$listview1_ColumnClick=[System.Windows.Forms.ColumnClickEventHandler]{
	 $cn = $_.Column;  
	      $obj = $args[0];   ### Which listview  
	      $typ = $obj.Columns[$cn].tag.tostring()  
	         if ($things[$obj.name] -ne $cn) {  
	         $things[$obj.name] = $cn;  
	         if ($typ -eq "System.String") {  
	            $obj.Sorting = [System.Windows.Forms.SortOrder]::Descending;  
	         } else {  
	            $obj.Sorting = [System.Windows.Forms.SortOrder]::Ascending;  
	         }  
	      }  
	      if ($obj.Sorting -eq [System.Windows.Forms.SortOrder]::Descending) {  
	         $obj.Sorting = [System.Windows.Forms.SortOrder]::Ascending;  
	      } else {  
	         $obj.Sorting = [System.Windows.Forms.SortOrder]::Descending;  
	      }  
	      if ($typ -eq "System.String") {  
	         $obj.ListViewItemSorter = new-object ListViewItemComparer($cn, $obj.Sorting);  
	      } else {  
	         $obj.ListViewItemSorter = new-object ListViewItemIntComparer($cn, $obj.Sorting);  
	      }  
	}
	
	$button1_Click={
		do-it-to-it
	}
	$Textbox1.Add_KeyDown({if ($_.KeyCode -eq "Enter") { do-it-to-it; }});  
	
	$trackbar1_ValueChanged={
	  Stop-timer;
	  if ($trackbar1.value -lt 500) { $trackbar1.value = 500 };   ### Don't let it fire off faster than twice a second... that would just be silly
	  $things["timer"].interval = $trackbar1.value;
	  update-Procs-Label;
	  Restart-timer;
	}
	
	$button2_Click={
		Stop-timer
	}
	
	$button3_Click={
		Stop-stuff
	}
	
	$button4_Click={
		get-services
	}
	
	$form1_FormClosing=[System.Windows.Forms.FormClosingEventHandler]{
	   Stop-timer;
	   $things["timer"].Dispose();
	   if ($things["session"] -ne $null) { remove-cimsession -cimsession $things["session"] }
	   $things["session"].Close();
	   $things["session"].Dispose();
	}
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$form1.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:Taskmanager_listview1 = $listview1.SelectedItems
		$script:Taskmanager_listbox1 = $listbox1.SelectedItems
		$script:Taskmanager_listview2 = $listview2.SelectedItems
		$script:Taskmanager_trackbar1 = $trackbar1.Value
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$listview1.remove_ColumnClick($listview1_ColumnClick)
			$trackbar1.remove_ValueChanged($trackbar1_ValueChanged)
			$form1.remove_FormClosing($form1_FormClosing)
			$form1.remove_Load($form1_Load)
			$button1.remove_Click($button1_Click)
			$button2.remove_Click($button2_Click)
			$button3.remove_Click($button3_Click)
			$button4.remove_Click($button4_Click)
			$form1.remove_Load($Form_StateCorrection_Load)
			$form1.remove_Closing($Form_StoreValues_Closing)
			$form1.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$form1.SuspendLayout()
	$tabcontrol1.SuspendLayout()
	$tabpage1.SuspendLayout()
	$tabpage2.SuspendLayout()
	$tabpage3.SuspendLayout()
	$toolstrip1.SuspendLayout()
	$panel1.SuspendLayout()
	$trackbar1.BeginInit()
	#
	# form1
	#
	$form1.Controls.Add($tabcontrol1)
	$form1.Controls.Add($toolstrip1)
	$form1.Controls.Add($panel1)
	$form1.ClientSize = '801, 826'
	$form1.MinimumSize = '817, 788'
	$form1.Name = 'form1'
	$form1.SizeGripStyle = 'Show'
	$form1.Text = 'Form'
	$form1.add_FormClosing($form1_FormClosing)
	$form1.add_Load($form1_Load)
	#
	# tabcontrol1
	#
	$tabcontrol1.Controls.Add($tabpage1)
	$tabcontrol1.Controls.Add($tabpage2)
	$tabcontrol1.Controls.Add($tabpage3)
	$tabcontrol1.Dock = 'Fill'
	$tabcontrol1.Location = '0, 31'
	$tabcontrol1.Name = 'tabcontrol1'
	$tabcontrol1.SelectedIndex = 0
	$tabcontrol1.Size = '801, 741'
	$tabcontrol1.TabIndex = 6
	#
	# tabpage1
	#
	$tabpage1.Controls.Add($listview1)
	$tabpage1.Location = '4, 22'
	$tabpage1.Name = 'tabpage1'
	$tabpage1.Padding = '3, 3, 3, 3'
	$tabpage1.Size = '793, 715'
	$tabpage1.TabIndex = 0
	$tabpage1.Text = 'Processes'
	$tabpage1.UseVisualStyleBackColor = $True
	#
	# listview1
	#
	$listview1.AllowColumnReorder = $True
	[void]$listview1.Columns.Add($Image_Name)
	[void]$listview1.Columns.Add($PID)
	[void]$listview1.Columns.Add($User_Name)
	[void]$listview1.Columns.Add($CPU)
	[void]$listview1.Columns.Add($Memory_Usage)
	$listview1.Dock = 'Fill'
	$listview1.FullRowSelect = $True
	$listview1.Location = '3, 3'
	$listview1.MultiSelect = $False
	$listview1.Name = 'listview1'
	$listview1.Size = '787, 709'
	$listview1.TabIndex = 0
	$listview1.UseCompatibleStateImageBehavior = $False
	$listview1.View = 'Details'
	$listview1.add_ColumnClick($listview1_ColumnClick)
	#
	# tabpage2
	#
	$tabpage2.Controls.Add($listbox1)
	$tabpage2.Controls.Add($picturebox1)
	$tabpage2.BackColor = 'Control'
	$tabpage2.Location = '4, 22'
	$tabpage2.Name = 'tabpage2'
	$tabpage2.Padding = '3, 3, 3, 3'
	$tabpage2.Size = '793, 715'
	$tabpage2.TabIndex = 1
	$tabpage2.Text = 'Performance'
	#
	# listbox1
	#
	$listbox1.FormattingEnabled = $True
	$listbox1.Location = '3, 666'
	$listbox1.Name = 'listbox1'
	$listbox1.Size = '10, 4'
	$listbox1.TabIndex = 1
	#
	# picturebox1
	#
	$picturebox1.BackColor = 'Desktop'
	$picturebox1.Dock = 'Fill'
	$picturebox1.Location = '3, 3'
	$picturebox1.Name = 'picturebox1'
	$picturebox1.Size = '787, 709'
	$picturebox1.TabIndex = 0
	$picturebox1.TabStop = $False
	#
	# tabpage3
	#
	$tabpage3.Controls.Add($listview2)
	$tabpage3.Location = '4, 22'
	$tabpage3.Name = 'tabpage3'
	$tabpage3.Padding = '3, 3, 3, 3'
	$tabpage3.Size = '793, 715'
	$tabpage3.TabIndex = 2
	$tabpage3.Text = 'Services'
	$tabpage3.UseVisualStyleBackColor = $True
	#
	# listview2
	#
	$listview2.Dock = 'Fill'
	$listview2.FullRowSelect = $True
	$listview2.Location = '3, 3'
	$listview2.Name = 'listview2'
	$listview2.Size = '787, 709'
	$listview2.TabIndex = 0
	$listview2.UseCompatibleStateImageBehavior = $False
	$listview2.View = 'Details'
	#
	# toolstrip1
	#
	$toolstrip1.GripStyle = 'Hidden'
	[void]$toolstrip1.Items.Add($toolstriplabel1)
	[void]$toolstrip1.Items.Add($textbox1)
	[void]$toolstrip1.Items.Add($button1)
	[void]$toolstrip1.Items.Add($toolstripseparator1)
	[void]$toolstrip1.Items.Add($button2)
	[void]$toolstrip1.Items.Add($toolstripseparator2)
	[void]$toolstrip1.Items.Add($button3)
	[void]$toolstrip1.Items.Add($toolstripseparator3)
	[void]$toolstrip1.Items.Add($button4)
	$toolstrip1.Location = '0, 0'
	$toolstrip1.Name = 'toolstrip1'
	$toolstrip1.Padding = '4, 4, 4, 4'
	$toolstrip1.Size = '801, 31'
	$toolstrip1.TabIndex = 10
	$toolstrip1.Text = 'toolstrip1'
	#
	# panel1
	#
	$panel1.Controls.Add($label1)
	$panel1.Controls.Add($trackbar1)
	$panel1.Controls.Add($label3)
	$panel1.Controls.Add($label2)
	$panel1.Dock = 'Bottom'
	$panel1.Location = '0, 772'
	$panel1.Name = 'panel1'
	$panel1.Size = '801, 54'
	$panel1.TabIndex = 11
	#
	# label1
	#
	$label1.Location = '703, 30'
	$label1.Name = 'label1'
	$label1.Size = '76, 23'
	$label1.TabIndex = 10
	$label1.Text = 'reload speed'
	$label1.TextAlign = 'MiddleCenter'
	#
	# trackbar1
	#
	$trackbar1.BackColor = 'Control'
	$trackbar1.Cursor = 'Default'
	$trackbar1.LargeChange = 100
	$trackbar1.Location = '703, 2'
	$trackbar1.Maximum = 8000
	$trackbar1.Name = 'trackbar1'
	$trackbar1.Size = '76, 45'
	$trackbar1.TabIndex = 8
	$trackbar1.TickFrequency = 1000
	$trackbar1.Value = 1000
	$trackbar1.add_ValueChanged($trackbar1_ValueChanged)
	#
	# label3
	#
	$label3.Location = '7, 7'
	$label3.Name = 'label3'
	$label3.Size = '399, 23'
	$label3.TabIndex = 9
	#
	# label2
	#
	$label2.Location = '7, 30'
	$label2.Name = 'label2'
	$label2.Size = '399, 23'
	$label2.TabIndex = 7
	#
	# Image_Name
	#
	$Image_Name.Text = 'Image Name'
	$Image_Name.Width = 230
	#
	# PID
	#
	$PID.Text = 'PID'
	#
	# User_Name
	#
	$User_Name.Text = 'User Name'
	$User_Name.Width = 233
	#
	# CPU
	#
	$CPU.Text = 'CPU'
	#
	# Memory_Usage
	#
	$Memory_Usage.Text = 'Memory Usage'
	$Memory_Usage.Width = 111
	#
	# toolstriplabel1
	#
	$toolstriplabel1.Name = 'toolstriplabel1'
	$toolstriplabel1.Size = '94, 20'
	$toolstriplabel1.Text = 'Computername:'
	#
	# textbox1
	#
	$textbox1.Font = 'Segoe UI, 9pt, style=Bold'
	$textbox1.Name = 'textbox1'
	$textbox1.Size = '200, 23'
	#
	# button1
	#
	$button1.DisplayStyle = 'Text'
	#region Binary Data
	$button1.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAIDSURBVDhPpZLrS5NhGMb3j4SWh0oRQVExD4go
nkDpg4hGYKxG6WBogkMZKgPNCEVJFBGdGETEvgwyO9DJE5syZw3PIlPEE9pgBCLZ5XvdMB8Ew8gX
bl54nuf63dd90OGSnwCahxbPRNPAPMw9Xpg6ZmF46kZZ0xSKzJPIrhpDWsVnpBhGkKx3nAX8Pv7z
1zg8OoY/cITdn4fwbf/C0kYAN3Ma/w3gWfZL5kzTKBxjWyK2DftwI9tyMYCZKXbNHaD91bLYJrDX
sYbrWfUKwJrPE9M2M1OcVzOOpHI7Jr376Hi9ogHqFIANO0/MmmmbmSmm9a8ze+I4MrNWAdjtoJgW
cx+PSzg166yZZ8xM8XvXDix9c4jIqFYAjoriBV9AhEPv1mH/sonogha0afbZMMZz+yreTGyhpusH
wtNNCsA5U1zS4BLxzJIfg299qO32Ir7UJtZfftyATqeT+8o2D8JSjQrAJblrncYL7ZJ2+bfaFnC/
1S1NjL3diRat7qrO7wLRP3HjWsojBeComDEo5mNjuweFGvjWg2EBhCbpkW78htSHHwRyNdmgAFzP
Eee2iFkzayy2OLXzT4gr6UdUnlXrullsxxQ+kx0g8BTA3aZlButjSTyjODq/WcQcW/B/Je4OQhLv
KQDnzN1mp0nnkvAhR8VuMzNrpm1mpjgkoVwB/v8DTgDQASA1MVpwzwAAAABJRU5ErkJggg==')
	#endregion
	$button1.ImageTransparentColor = 'Magenta'
	$button1.Name = 'button1'
	$button1.Size = '64, 20'
	$button1.Text = 'Get Status'
	$button1.add_Click($button1_Click)
	#
	# button2
	#
	$button2.DisplayStyle = 'Text'
	#region Binary Data
	$button2.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAIDSURBVDhPpZLrS5NhGMb3j4SWh0oRQVExD4go
nkDpg4hGYKxG6WBogkMZKgPNCEVJFBGdGETEvgwyO9DJE5syZw3PIlPEE9pgBCLZ5XvdMB8Ew8gX
bl54nuf63dd90OGSnwCahxbPRNPAPMw9Xpg6ZmF46kZZ0xSKzJPIrhpDWsVnpBhGkKx3nAX8Pv7z
1zg8OoY/cITdn4fwbf/C0kYAN3Ma/w3gWfZL5kzTKBxjWyK2DftwI9tyMYCZKXbNHaD91bLYJrDX
sYbrWfUKwJrPE9M2M1OcVzOOpHI7Jr376Hi9ogHqFIANO0/MmmmbmSmm9a8ze+I4MrNWAdjtoJgW
cx+PSzg166yZZ8xM8XvXDix9c4jIqFYAjoriBV9AhEPv1mH/sonogha0afbZMMZz+yreTGyhpusH
wtNNCsA5U1zS4BLxzJIfg299qO32Ir7UJtZfftyATqeT+8o2D8JSjQrAJblrncYL7ZJ2+bfaFnC/
1S1NjL3diRat7qrO7wLRP3HjWsojBeComDEo5mNjuweFGvjWg2EBhCbpkW78htSHHwRyNdmgAFzP
Eee2iFkzayy2OLXzT4gr6UdUnlXrullsxxQ+kx0g8BTA3aZlButjSTyjODq/WcQcW/B/Je4OQhLv
KQDnzN1mp0nnkvAhR8VuMzNrpm1mpjgkoVwB/v8DTgDQASA1MVpwzwAAAABJRU5ErkJggg==')
	#endregion
	$button2.ImageTransparentColor = 'Magenta'
	$button2.Name = 'button2'
	$button2.Size = '42, 20'
	$button2.Text = 'Pause'
	$button2.add_Click($button2_Click)
	#
	# button3
	#
	$button3.DisplayStyle = 'Text'
	#region Binary Data
	$button3.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAIDSURBVDhPpZLrS5NhGMb3j4SWh0oRQVExD4go
nkDpg4hGYKxG6WBogkMZKgPNCEVJFBGdGETEvgwyO9DJE5syZw3PIlPEE9pgBCLZ5XvdMB8Ew8gX
bl54nuf63dd90OGSnwCahxbPRNPAPMw9Xpg6ZmF46kZZ0xSKzJPIrhpDWsVnpBhGkKx3nAX8Pv7z
1zg8OoY/cITdn4fwbf/C0kYAN3Ma/w3gWfZL5kzTKBxjWyK2DftwI9tyMYCZKXbNHaD91bLYJrDX
sYbrWfUKwJrPE9M2M1OcVzOOpHI7Jr376Hi9ogHqFIANO0/MmmmbmSmm9a8ze+I4MrNWAdjtoJgW
cx+PSzg166yZZ8xM8XvXDix9c4jIqFYAjoriBV9AhEPv1mH/sonogha0afbZMMZz+yreTGyhpusH
wtNNCsA5U1zS4BLxzJIfg299qO32Ir7UJtZfftyATqeT+8o2D8JSjQrAJblrncYL7ZJ2+bfaFnC/
1S1NjL3diRat7qrO7wLRP3HjWsojBeComDEo5mNjuweFGvjWg2EBhCbpkW78htSHHwRyNdmgAFzP
Eee2iFkzayy2OLXzT4gr6UdUnlXrullsxxQ+kx0g8BTA3aZlButjSTyjODq/WcQcW/B/Je4OQhLv
KQDnzN1mp0nnkvAhR8VuMzNrpm1mpjgkoVwB/v8DTgDQASA1MVpwzwAAAABJRU5ErkJggg==')
	#endregion
	$button3.ImageTransparentColor = 'Magenta'
	$button3.Name = 'button3'
	$button3.Size = '34, 20'
	$button3.Text = 'Quit'
	$button3.add_Click($button3_Click)
	#
	# button4
	#
	$button4.DisplayStyle = 'Text'
	#region Binary Data
	$button4.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAIDSURBVDhPpZLrS5NhGMb3j4SWh0oRQVExD4go
nkDpg4hGYKxG6WBogkMZKgPNCEVJFBGdGETEvgwyO9DJE5syZw3PIlPEE9pgBCLZ5XvdMB8Ew8gX
bl54nuf63dd90OGSnwCahxbPRNPAPMw9Xpg6ZmF46kZZ0xSKzJPIrhpDWsVnpBhGkKx3nAX8Pv7z
1zg8OoY/cITdn4fwbf/C0kYAN3Ma/w3gWfZL5kzTKBxjWyK2DftwI9tyMYCZKXbNHaD91bLYJrDX
sYbrWfUKwJrPE9M2M1OcVzOOpHI7Jr376Hi9ogHqFIANO0/MmmmbmSmm9a8ze+I4MrNWAdjtoJgW
cx+PSzg166yZZ8xM8XvXDix9c4jIqFYAjoriBV9AhEPv1mH/sonogha0afbZMMZz+yreTGyhpusH
wtNNCsA5U1zS4BLxzJIfg299qO32Ir7UJtZfftyATqeT+8o2D8JSjQrAJblrncYL7ZJ2+bfaFnC/
1S1NjL3diRat7qrO7wLRP3HjWsojBeComDEo5mNjuweFGvjWg2EBhCbpkW78htSHHwRyNdmgAFzP
Eee2iFkzayy2OLXzT4gr6UdUnlXrullsxxQ+kx0g8BTA3aZlButjSTyjODq/WcQcW/B/Je4OQhLv
KQDnzN1mp0nnkvAhR8VuMzNrpm1mpjgkoVwB/v8DTgDQASA1MVpwzwAAAABJRU5ErkJggg==')
	#endregion
	$button4.ImageTransparentColor = 'Magenta'
	$button4.Name = 'button4'
	$button4.Size = '95, 20'
	$button4.Text = 'Refresh Services'
	$button4.add_Click($button4_Click)
	#
	# toolstripseparator1
	#
	$toolstripseparator1.Name = 'toolstripseparator1'
	$toolstripseparator1.Size = '6, 23'
	#
	# toolstripseparator2
	#
	$toolstripseparator2.Name = 'toolstripseparator2'
	$toolstripseparator2.Size = '6, 23'
	#
	# toolstripseparator3
	#
	$toolstripseparator3.Name = 'toolstripseparator3'
	$toolstripseparator3.Size = '6, 23'
	$trackbar1.EndInit()
	$panel1.ResumeLayout()
	$toolstrip1.ResumeLayout()
	$tabpage3.ResumeLayout()
	$tabpage2.ResumeLayout()
	$tabpage1.ResumeLayout()
	$tabcontrol1.ResumeLayout()
	$form1.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $form1.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$form1.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$form1.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$form1.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $form1.ShowDialog()

}
#endregion Source: Taskmanager.psf

#Start the application
Main ($CommandLine)
