#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: cfba2739-092a-48d5-9ae9-9fc3160d1664
# Source File: LAFIT.pfproj
#------------------------------------------------------------------------
#region Project Recovery Data (DO NOT MODIFY)
<#RecoveryData:
sAYAAB+LCAAAAAAABACVVduO2jAQfa/Uf4jyThIupUWCSCwsK6TuLiKoT5GQcSbg4tipY7fl7+tc
yQWqRXmxz8ycGXvOONMtYP4bxGWJJHI/fzKM6Ubwn4BlttHbHyASwpnbn9rlsrCsCIX10sXhAQ2+
Dic9ZzJAvdG34EtvgmDSm4R42B87QX88Hk3twrkILXLsLjG4ztSub2vkSbEptsYWQhDAMLyhCGam
aTwpQoOZ6ZiuJ5GQKrbiMMlz/T90gSjtvSLCVlxE+zgM61wlrsnCD5O9UH5AdB8n/RqVseBRhFjw
/FcCS69uZu6EAtPNvRNLu384w/zAlWzXmoEPFboCJJWA/RZ+KUg6hC3zQ9SLE2JHoPzYJq0MD9G9
x1JfWdImK+AOVb7JNVNJqpA0wmd0BFF6vgADgei1hsIhTe5u+B+t8xNQauw4p2ciNVvN3g5aYz0S
vn+WlhIWPumFf+IR+Po4SHLrgDA+ET/gWEXAZOJ78836+c3P0nhZGk+qgHBj4PQHfnYGf0Nw2oXE
VwmI3sixCOZVFVnCqopXxEioO7UQunPFoHawynuhEsmj0n7F7XuGDUUy1MPgDnX+cl1Zt4p5u3k6
wsXqGlcdr3w1UoIOWLau2ZGpB1gJIi+G3X6GGrIpwYHlpF+ugI6nlkKgsOw4t/C2/30x1OxV0BIS
LEjcvG37JqofhRixi5sLJNeHFo590AOiG1FYa+7xRZDjSbrbLMB4yiJSz9JQ+a6ZBMEQbdZm34bf
dTDRaHpprYD7pvRF0zKuK6eBNP8SlWbz0eum/D5frXd6lGM9rjfTamXV/1D/AEnxphuwBgAA#>
#endregion
#========================================================================
# Code Generated By: SAPIEN Technologies, Inc., PowerShell Studio 2012 v3.1.26
# Generated On: 04.01.2015 07:39
# Generated By: renato.bacchi
#========================================================================


#region Source: Startup.pfs
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
CwcAAB+LCAAAAAAABAC9Vdtu2zAMfR+wf/AHZJY9x0kLqAYCBx2KYVtQF9teFYVOhcqSoUsD//2U
zNfY6YY+BH4xDy+HokQSPwKVr6CqNTEk+fjB8/APxfZMEH7POHwnBSSZIcrY0i9zjdFIe/I5Sj9B
aSZFEvqfMeoDJ4uV1lBsOQN9kjukSrJKGyj8b0SQPRQgjL+yRhbEOOeZV0e5i/zg+M281HJjFdwJ
sEYRPvM21sWlX6F6ki/gDMNtHt3EC7KLFnOIYoxapmnmjmP+vxzb5ZLENF6Et9Ecgpvbf3L4v5jY
yYP276Uq9FUY14ocmNi/hyuI8jhf5mG4iwMSkTe4Ck2l4mx7nRO5N3oVot8Fv86BmAJqpKoyUK+M
wrsextuX1YpN5+ENoS+u0VST1BcQ4ALXYmfQdvcJRJNoDT7Qus0HpkPUtTfLQZtUwamzkxCjEdZa
p1a7EdDoe7EvKTacmNz1VvLJxW2FVv1oRfa0SgKM6r/OUR5AZc/AeTOv3Pgag3Wx0LBaOANqFTOV
hxpk6HA2G7tzTKIbJXeWmrH1JUWNn1/VFLoGTRUrh2VGk2gqi5KIql/1cySVZeU2wfPgasbYgzCg
3LY4S3Aanlwtfx0uq1xmx5UxzLWHYDRYQ6j3+t1b6C+/P5RBcLgLBwAA#>
#endregion
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
[void][Reflection.Assembly]::Load("System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
[void][Reflection.Assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
[void][Reflection.Assembly]::Load("System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
[void][Reflection.Assembly]::Load("mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
[void][Reflection.Assembly]::Load("System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
[void][Reflection.Assembly]::Load("System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
[void][Reflection.Assembly]::Load("System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
#endregion Import Assemblies

#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)

function Main {
	Param ([String]$Commandline)
	#Note: This function starts the application
	#Note: $Commandline contains the complete argument string passed to the packager 
	#Note: To get the script directory in the Packager use: Split-Path $hostinvocation.MyCommand.path
	#Note: To get the console output in the Packager (Forms Mode) use: $ConsoleOutput (Type: System.Collections.ArrayList)
	#TODO: Initialize and add Function calls to forms
	
	if((Call-MainForm_pff) -eq "OK")
	{
		
	}
	
	$global:ExitCode = 0 #Set the exit code for the Packager
}







#endregion Source: Startup.pfs

#region Source: MainForm.pff
function Call-MainForm_pff
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
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
6YcC5uuJ5I+YrKf2v/pukdTdtwn7gJvrX1SRxrOYmLDqHzk14quGM/Ks97i71gl6YfVuk4bvwrSa
/8V8NsDq+uzrzz1fWvU5h56osHqskubR5o9U1HzR9joEJnGrOAye+MJnb3z+nRdP1p/sLj6R3nge
ml++fCMqHzsD6i/OlS8KKJ6d4pswrsN3W+kf75bfuLjlcZZ+3tPt/PyzTfmN2Plhufxmprx//38A
az7USLwS2t739j+Grfeh7vM2v4BFr5AFeSYHfJsF+KPBjQzCH/FMfksO4fdy6Nv+2CcOPbL57M/v
7tIu9R7c0UdWHP/is/JPFTg/VdV92debVXSPFwA9MUipU9IqvzFm+jMbP/v+y7n5hEf+WCdfu+S/
pbog71UXX1dr/K0uHoqkXkldXPv6H6AuPq/RuoMzP10DfNbJG9EAy3s1wNenrfz1NMDPz1s/m35/
Yqzs/CNbn6o/LTf8RdPxjyfjn11r+HM6/jcZWHhu6rZX6vgtDq5urssdb1JuxyHtbx/Xjab20Rl9
o8pDHr/n8/EE97WjH6XvXnfD7fv6uW8vZlitW3Wz1Zjt401rILcWu36lV9OuKdzpw0LIo1vLn9kR
zoZd/tgFhF+FJ1e6PhvSx/3sSfrIfTPP7hp+/IbexyGFoo8ePfnE4S2Pf/jp/brvL+n1f5gj82p2
95GF4bdpdF1vngdvUXn7D4tRxds0um14HMKu50P3+s0fbqO+Rv+tS7CPX37+uDb5f387b/yJyfIs
Lx9vcyM/319t9u2lxg+XLF67ukk9P07UD4w4X7vW4lOt803FBR/fvlUKdxUWbG/9+O11Bc8XAnwc
zQuKAD41/XGSf11X8X299I/z2x6csM+sOJ1Wbjv9M93RunkCV0JcU/N/2mabcNt4/hd9/ZEyGOpw
/TsigWXy8GSvbUxQotoO9XHj+sCsjC00v82cs9NIHozt9aHsc4njnyiK7dT5R4Kl/GA8CtcGErvZ
mvSOTdaNo7QbTEsE1UMydGMnYG0aO+7MonFd5WwTo4lwWJ0F3KbrOFedVbzWGG4n87QQCJzFjfFp
0peszGHd5JyQtVSsOW7ZxDSjONh+DFSa5E5kvPcKDK2GCEeCYAnqwqY6MW5y9tamtqbW6mm5b2Lc
KXkUzx0HPG9WF3kttUnD2t2uauhEyFdnpKL25HokLtAlJvX6APiSFVRodPIigAHzA6UhqguckNiO
HAXLL9aKPmf2tILZqD9Jy35SD4yz2nua6LJLyFMOcsvuu4PX2tF2dZLbNbdUYRXS/d1F1xtRIuQW
IXAxXdaxeOQlStNBQC3L0is3Zbl0yUu4kFC11WwqyPpajm3/vFhvLjGE45PjkGeV3I97Nj0vfTST
jvyByuo2pXdLKuHWI1SKQFdXdZy4oBt5jqo6l8U0W1thSpqhE0+9pjEdhW2hywallfNFlqIYXi6P
OgJLLbGVeyeK+omyjqG1IGuYJeVNZrSU7BVt5R8UwpHhhRe5fMUA0AbSMgUJUtPtiWOrEyfFXCNi
Znd1Rs+BRMlyNVZq2XAKeWHM7Bjm6ITxmtwmyKTfiOLJnLSgjCn+subCEE75/OJOE6wr+4uFxi2+
DbZVsW+HoujOZ2ORn8GYpC0KcZ1inrDZxpoynT0Ctm/4NkADcojqRqKMK4OtLhpUNmBV5SOVmORu
UC9a25TzsyzO692JBkaStWLWoDYUpO6a0+V0hTYtm1uMa3M5juP//M//AD5MpBvdkCdiIXV+WvXu
fdHQg4q4NRp6/J6jp09+e+zLT4dDD6S8kbwuBN6b2H3kjO83vliO3cuirw+/fgUOvZr7/K2o5Vlm
faPxra7cwyG3tzrU5vs+333o9Kap/g06f+DsfzW5PZ4HfVZajza5WUb3BD10eK1r/0b17AfZPErV
G9HH6L265us6/lfQNb+irPfjdq/b+PN5k19R4vu68dPD/sUfFz5x1fUM2uCpAyEedfM+xL5W3dxY
Vv/QauO7xcMemJsy+D/Sn7yy7NZ0GPK4O/m0h3j9+BtRSMi9CunbfvfTCunNLfw/k75+lq1Pt/sp
KUfmY3c3gfxp4n5Ht+iZZf1nRfR0u5tFBN4hIu6hu3fKjTJ6mrrfUUZP1JS80bU8dpb1bNjC9i2u
eVVpq7hD5SePDA96A+Nr2tqfJ99bFN11aGVd/Zx1ytfRog/bY347L+I5jfD8quXTDW9m7/KepctP
/d22fvk0eb+jlXpy6j8ro6da/RQBrd93dpN0niLsdxXNo6rrm6J5rNVPyYCt33d2s2geI+x3FM3z
DsGz8nm26U+ZP9ofPd4kqGcp/B2l9WSd8LOCeqrVT7Hx+kNnN+aSn6LsW7Khui4sZ46F3cePf3gy
/fODBFS3cuOwnJv/GzX0dflwnswfkkBulQQCeRFCYrgbIDgaIth/AJ96erznHyDtb/bxb2zrntIq
fklfIBJhERFBUICBLuI+01fZ+XVbpN7rjMjt3VfpaF8WrzOgtJ3hWrfTJmzH1A9fpAZuF9bHXsMu
jatX6epH67g/9fjpx4+T/D/Wrp/Pc7r9SJAQVuH84T+Cnw8vXJXeZxHRo08/PJT8uvr61S+fzpok
jcKuZ9rwQYlcr3n66tmnt5mhm7XNx99/9u2nfrEu3D6aWfhwY97Hf3/6rTlUG4u6HgD14V9/tKtP
YbtJwqL4wPmH28W+evgxFPySWf+xCf2hTWfV/TF2/I8vG8wPrlsfvnoIPPp01vTB4Pdfv/3ULz48
/7OkHns6I9qfLcOXXAYefXo9Dcitps+Z/ucnTN1MbRonX0jm62dS9XAkT/EnAh9/rM+N0/nplTV/
avD0r2bKys9v3nqg9bMn/wF8zrRP0LyCf8ZC6Ndj2E5XpfnP/x9ipiLUHTwDAA==#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load("System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
	[void][reflection.assembly]::Load("mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
	[void][reflection.assembly]::Load("System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
	[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$MainForm = New-Object 'System.Windows.Forms.Form'
	$richtextbox_output = New-Object 'System.Windows.Forms.RichTextBox'
	$tabcontrol_Home = New-Object 'System.Windows.Forms.TabControl'
	$tabpage1 = New-Object 'System.Windows.Forms.TabPage'
	$button_Remotecontrol = New-Object 'System.Windows.Forms.Button'
	$button_WOL = New-Object 'System.Windows.Forms.Button'
	$button_DNScheck = New-Object 'System.Windows.Forms.Button'
	$button_ResetPWD = New-Object 'System.Windows.Forms.Button'
	$button_Userunlock = New-Object 'System.Windows.Forms.Button'
	$button_shutdown = New-Object 'System.Windows.Forms.Button'
	$Button_gpupdate = New-Object 'System.Windows.Forms.Button'
	$button_C = New-Object 'System.Windows.Forms.Button'
	$button_ipconfig = New-Object 'System.Windows.Forms.Button'
	$button_cmd = New-Object 'System.Windows.Forms.Button'
	$button_psremote = New-Object 'System.Windows.Forms.Button'
	$button_ping = New-Object 'System.Windows.Forms.Button'
	$button_rdp = New-Object 'System.Windows.Forms.Button'
	$button_MSRA = New-Object 'System.Windows.Forms.Button'
	$tabpage2 = New-Object 'System.Windows.Forms.TabPage'
	$groupbox7 = New-Object 'System.Windows.Forms.GroupBox'
	$button_compmgmt = New-Object 'System.Windows.Forms.Button'
	$groupbox6 = New-Object 'System.Windows.Forms.GroupBox'
	$button_localadmins = New-Object 'System.Windows.Forms.Button'
	$button_folderrights = New-Object 'System.Windows.Forms.Button'
	$button_profilerights = New-Object 'System.Windows.Forms.Button'
	$button_homerights = New-Object 'System.Windows.Forms.Button'
	$groupbox5 = New-Object 'System.Windows.Forms.GroupBox'
	$button_PCGroups = New-Object 'System.Windows.Forms.Button'
	$button_ComputerGroups = New-Object 'System.Windows.Forms.Button'
	$groupbox2 = New-Object 'System.Windows.Forms.GroupBox'
	$button_autostart = New-Object 'System.Windows.Forms.Button'
	$button_installedSoftware = New-Object 'System.Windows.Forms.Button'
	$groupbox1 = New-Object 'System.Windows.Forms.GroupBox'
	$button_printer = New-Object 'System.Windows.Forms.Button'
	$button_USBDevice = New-Object 'System.Windows.Forms.Button'
	$button_systemtype = New-Object 'System.Windows.Forms.Button'
	$button_memory = New-Object 'System.Windows.Forms.Button'
	$button_processor = New-Object 'System.Windows.Forms.Button'
	$button_mainboard = New-Object 'System.Windows.Forms.Button'
	$tabpage3 = New-Object 'System.Windows.Forms.TabPage'
	$button_hosts = New-Object 'System.Windows.Forms.Button'
	$button_checkWLAN = New-Object 'System.Windows.Forms.Button'
	$button_dns2 = New-Object 'System.Windows.Forms.Button'
	$button_dns1 = New-Object 'System.Windows.Forms.Button'
	$button_routetable = New-Object 'System.Windows.Forms.Button'
	$button_ipconfig2 = New-Object 'System.Windows.Forms.Button'
	$tabpage4 = New-Object 'System.Windows.Forms.TabPage'
	$button_proclasthour = New-Object 'System.Windows.Forms.Button'
	$button_process = New-Object 'System.Windows.Forms.Button'
	$tabpage5 = New-Object 'System.Windows.Forms.TabPage'
	$groupbox4 = New-Object 'System.Windows.Forms.GroupBox'
	$button_servicesstop = New-Object 'System.Windows.Forms.Button'
	$button_servicesstart = New-Object 'System.Windows.Forms.Button'
	$button_servicesrestart = New-Object 'System.Windows.Forms.Button'
	$button_servicescheck = New-Object 'System.Windows.Forms.Button'
	$textbox_services = New-Object 'System.Windows.Forms.TextBox'
	$button_servicesnonstandard = New-Object 'System.Windows.Forms.Button'
	$button_servicesautostop = New-Object 'System.Windows.Forms.Button'
	$button_servicesauto = New-Object 'System.Windows.Forms.Button'
	$button_servicesrunning = New-Object 'System.Windows.Forms.Button'
	$button_services = New-Object 'System.Windows.Forms.Button'
	$button_MMCServices = New-Object 'System.Windows.Forms.Button'
	$tabpage6 = New-Object 'System.Windows.Forms.TabPage'
	$button_mappeddrives = New-Object 'System.Windows.Forms.Button'
	$button_openc = New-Object 'System.Windows.Forms.Button'
	$button_deleteoffline = New-Object 'System.Windows.Forms.Button'
	$button_volumes = New-Object 'System.Windows.Forms.Button'
	$button_diskusage = New-Object 'System.Windows.Forms.Button'
	$tabpage8 = New-Object 'System.Windows.Forms.TabPage'
	$button_eventlognames = New-Object 'System.Windows.Forms.Button'
	$button_eventlog20 = New-Object 'System.Windows.Forms.Button'
	$button_eventlogmmc = New-Object 'System.Windows.Forms.Button'
	$tabpage10 = New-Object 'System.Windows.Forms.TabPage'
	$button_getadvertisedsoftware = New-Object 'System.Windows.Forms.Button'
	$button_softwareinventory = New-Object 'System.Windows.Forms.Button'
	$button_machinepolicy = New-Object 'System.Windows.Forms.Button'
	$tabpage_debug = New-Object 'System.Windows.Forms.TabPage'
	$button_listvariables = New-Object 'System.Windows.Forms.Button'
	$textbox_debug = New-Object 'System.Windows.Forms.TextBox'
	$button_debug = New-Object 'System.Windows.Forms.Button'
	$statusbar1 = New-Object 'System.Windows.Forms.StatusBar'
	$toolstrip2 = New-Object 'System.Windows.Forms.ToolStrip'
	$toolstrip1 = New-Object 'System.Windows.Forms.ToolStrip'
	$menustrip1 = New-Object 'System.Windows.Forms.MenuStrip'
	$textbox_computername = New-Object 'System.Windows.Forms.ToolStripTextBox'
	$toolstriplabel2 = New-Object 'System.Windows.Forms.ToolStripLabel'
	$Toolstrip_OS = New-Object 'System.Windows.Forms.ToolStripLabel'
	$Toolstrip_OSStatus = New-Object 'System.Windows.Forms.ToolStripLabel'
	$Toolstrip_Uptime = New-Object 'System.Windows.Forms.ToolStripLabel'
	$Toolstrip_UptimeStatus = New-Object 'System.Windows.Forms.ToolStripLabel'
	$toolstripseparator7 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$toolstripseparator6 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$toolstrip_User = New-Object 'System.Windows.Forms.ToolStripLabel'
	$toolstrip_user_status = New-Object 'System.Windows.Forms.ToolStripLabel'
	$toolstripseparator8 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$toolstrip_home = New-Object 'System.Windows.Forms.ToolStripLabel'
	$toolstrip_home_status = New-Object 'System.Windows.Forms.ToolStripLabel'
	$toolstripseparator9 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$FileToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$button_Check = New-Object 'System.Windows.Forms.ToolStripButton'
	$toolstripmenuitem1 = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$aboutToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$textbox_username = New-Object 'System.Windows.Forms.ToolStripTextBox'
	$button_GetPC = New-Object 'System.Windows.Forms.ToolStripButton'
	$toolstripseparator10 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$toolstripseparator5 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$requestFeatureToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$quitToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$toolstripseparator4 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$toolstriplabel_WLANon = New-Object 'System.Windows.Forms.ToolStripLabel'
	$button_WLAN = New-Object 'System.Windows.Forms.ToolStripButton'
	$toolstripseparator3 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$changelogToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$exportLogToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$toolsToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$aDExplorerToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$procexpToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$procmonToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$nirLauncherToolStripMenuItem1 = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$optionsToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	############################################################################################
	#!!!!!!!!!!!!!!!!!!!!!!!!P O W E R S H E L L  -    T O O L K I T !!!!!!!!!!!!!!!!!!!!!!!!!!#
	############################################################################################
	#region load
	############################################################################################
	#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!O P E N I N G    A C T I O N S!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	############################################################################################
	$OnLoadFormEvent={
		# Add 1 New Line in Richtextbox
		$Date = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
		Add-RichTextBox -text ""
		Add-RichTextBox -text "$Date"
		
		# # # Load Config # # #
		
		# # # # Checking if Configfolder exisits # # # #
		$Folderexisting = Test-Path $global:Confpath 
		if ($Folderexisting -eq $true) {
			if ($global:Language -eq "Deutsch"){
				Add-RichTextBoxOK -text "Ordner $global:Confpath existiert bereits"
			}
			if ($global:Language -eq "English"){
				Add-RichTextBoxOK  -text "Folder $global:Confpath already existing"
			}
		}
		if ($Folderexisting -eq $false){
			New-Item -ItemType directory -Path $global:Confpath
			$Folderexisting = Test-Path $global:Confpath 
			if ($Folderexisting -eq $true){
				if ($global:Language -eq "Deutsch"){
					Add-RichTextBoxOK -text "Ordner $global:Confpath erstellt"
				}
				if ($global:Language -eq "English"){
					Add-RichTextBoxOK -text "Folder $global:Confpath created"
				}
			}
			if ($Folderexisting -eq $false) {
				if ($global:Language -eq "Deutsch"){
					Add-RichTextBoxWarn -text "Fehler beim Erstellen der Standardkonfiguration in $global:Confpath"
				}
				if ($global:Language -eq "English"){
					Add-RichTextBoxWarn -text "Error creating the Configfile in $global:Confpath"
				}
			}
		}
		
		# # # # Checking if Configfile exists # # # #
		$loadconfig = $Confpath + "/Config.csv"
		if (Test-Path $loadconfig -PathType Leaf){
			$load = Import-Csv -Path $loadconfig
			foreach ($Line in $Load) {
				$global:Language=$($Line."global:Language")
				$global:Profilefolder=$($Line."global:Profilefolder")
				$global:Homefolder=$($Line."global:Homefolder")
				$global:Outfile=$($Line."global:Outfile")
				$global:SiteName=$($Line."global:SiteName")
				$global:SCCMServer=$($Line."global:SCCMServer")
				$global:SCCMNameSpace=$($Line."global:SCCMNameSpace")
				$global:SCCMEnabled=[bool]$($Line."global:SCCMEnabled")
				$global:Nirlauncher=$($Line."global:Nirlauncher")
				$global:Sysinternals=$($Line."global:Sysinternals")
				$global:CmRCViewer=$($Line."global:CmRCViewer")
				if ($global:Language -eq "Deutsch"){
					Add-RichTextBoxOK -text "Konfiguration von $global:Confpath geladen"
				}
				if ($global:Language -eq "English"){
					Add-RichTextBoxOK -text "Loaded configuration from $global:Confpath"
				}
			}
		}
		else {
			if ($global:Language -eq "Deutsch"){
				Add-RichTextBoxWarn -text "Keine Konfigurationsdatei gefunden. Lade Standardkonfiguration"
			}
			if ($global:Language -eq "English"){
				Add-RichTextBoxWarn -text "No Configfile found. Loading default Configuration."
			}
		}
		# # # Language Settings # # #
		if ($global:Language -eq "Deutsch"){
			$button_USBDevice.Text = "USB Geräte"
			$button_printer.Text = "Drucker"
			$button_PCGroups.Text = "PC Gruppen Übertragen"
			$button_homerights.Text = "Rechte Home"
			$button_folderrights.Text = "Ordnerrechte"
			$button_profilerights.Text = "Rechte Profil"
			$button_compmgmt.Text = "Computerverwaltung"
			$tabpage3.Text = "Netzwerk"
			$button_process.Text = "Prozesse"
			$tabpage4.Text = "Prozesse"
			$tabpage5.Text = "Dienste"
			$button_MMCServices.Text = "MMC - Dienste"
			$button_services.Text = "Dienste"
			$button_servicesrunning.Text = "Ausgeführt"
			$button_servicesauto.Text = "Automatisch"
			$button_servicesautostop.Text = "Automatisch und gestoppt"
			$textbox_services.Text = "<Dienstname>"
			$button_diskusage.Text = "Diskverbrauch"
			$button_volumes.Text = "Datenträger"
			$button_openc.Text = "C$ öffnen"
			$button_machinepolicy.Text = "Computerrichtlinien + Auswertungszyklus"
			$button_softwareinventory.Text = "Softwareinventurzyklus"
			$FileToolStripMenuItem.Text = "Datei"
			$optionsToolStripMenuItem.Text = "Optionen"
			$quitToolStripMenuItem.Text = "Beenden"
		}
		if ($global:Language -eq "English"){
			$button_USBDevice.Text = "USB Device"
			$button_printer.Text = "Printer"
			$button_PCGroups.Text = "Transfer Computergroups"
			$button_homerights.Text = "Home Rights"
			$button_folderrights.Text = "Folder Rights"
			$button_profilerights.Text = "Profile Rights"
			$button_compmgmt.Text = "Computer Management"
			$tabpage3.Text = "Network"
			$button_process.Text = "Processes"
			$tabpage4.Text = "Processes"
			$tabpage5.Text = "Services"
			$button_MMCServices.Text = "MMC - Services"
			$button_services.Text = "Dienste"
			$button_servicesrunning.Text = "Running"
			$button_servicesauto.Text = "Automatic"
			$button_servicesauto.Text = "Automatic and stopped"
			$textbox_services.Text = "<Servicename>"
			$button_diskusage.Text = "Disk Usage"
			$button_volumes.Text = "Volumes"
			$button_openc.Text = "Open C$"
			$button_machinepolicy.Text = "Machine Policy Retrieval + Evaluation Cycle"
			$button_softwareinventory.Text ="Software Inventory Cycle"
			$FileToolStripMenuItem.Text = "File"
			$optionsToolStripMenuItem.Text = "Options"
			$quitToolStripMenuItem.Text = "Quit"
		}
		
		# # # Some Settings # # #
		
		# Set the status bar name
		$statusbar1.Text = $StatusBarStartUp
		
		# Set the Form Title
		$MainForm.Text = $MainFormTitle
		
		# Set Variable for Computername
		$textbox_computername.Text = $env:COMPUTERNAME
		
		## Verify External Tools are presents
		
		# SystemInfo.exe
		if(Test-Path "$env:systemroot/system32/systeminfo.exe" -ErrorAction 'SilentlyContinue'){
			Add-RichTextBoxOK -text "External Tools check - Systeminfo.exe found"
		}
		else {
			Add-RichTextBoxWarn -text "External Tools check - Systeminfo.exe not found"
		}
		
		# MSInfo32.exe
		if(Test-Path "$env:programfiles\Common Files\Microsoft Shared\MSInfo\msinfo32.exe" -ErrorAction 'SilentlyContinue'){
			Add-RichTextBoxOK -text "External Tools check - msinfo32.exe found"
		}
		else {
			Add-RichTextBoxWarn -text "External Tools check - msinfo32.exe not found"
		}
		
		# DriverQuery.exe
		if(Test-Path "$env:systemroot/system32/driverquery.exe" -ErrorAction 'SilentlyContinue'){
			Add-RichTextBoxOK -text "External Tools check - Driverquery.exe found"
		}
		else {
			Add-RichTextBoxWarn -text "External Tools check - Driverquery.exe not found"
		}
		
		# Sysinternals
		if(Test-Path "$global:Sysinternals" -ErrorAction 'SilentlyContinue') {
			Add-RichTextBoxOK -text "External Tools check - Sysinternals found"
		}
		else {
			Add-RichTextBoxWarn -text "External Tools check - Sysinternals not found - Buttons ADExplorer, procexp, Procmon, PSExec, Disabled"
			$button_cmd.Enabled = $false
			$aDExplorerToolStripMenuItem.Enabled = $false
			$procexpToolStripMenuItem.Enabled = $false
			$procmonToolStripMenuItem.Enabled = $false
		}
		
		# NirLauncher
		if(Test-Path "$global:Nirlauncher" -ErrorAction 'SilentlyContinue') {
			Add-RichTextBoxOK -text "External Tools check - NirLauncher found"
		}
		else {
			Add-RichTextBoxWarn -text "External Tools check - NirLauncher not found"	
			$nirLauncherToolStripMenuItem1.Enabled = $false
		}
		
		Add-RichTextBox -text ""
	}
	############################################################################################
	#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	############################################################################################
	#endregion load
	#------------------------------------------------------------------------------------------#
	#region Code
	############################################################################################
	#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!C O D E!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	############################################################################################
	#region Buttons
	#-------#############################################################################				
	#-------#!!!!!!!!!!!!!!!!!!!!!!!!!!!!B U T T O N S!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	#-------#############################################################################
	$button_check_Click={
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Check Connectivity and Basic Properties"
		if (Test-Connection $ComputerName -Count 1 -Quiet) {
			$button_Check.Text = "Online";$button_Check.ForeColor = "green"
			Add-RichTextBoxOK -text "$Computername is online"
			# Get OS
			$OSWin32_OS = Get-WmiObject -Query "SELECT * FROM Win32_OperatingSystem" -ComputerName $ComputerName
			$OSCaption = ($OSWin32_OS|Select-Object caption).Caption
			$OSVersion = $OSWin32_OS.Version
			#2003/xp+
			$OSOther = $OSWin32_OS.OtherTypeDescription
			$OSSP = $OSWin32_OS.CSDVersion
			#2008/win7+
			$OSArchi = $OSWin32_OS.OSArchitecture
			$OSFullCaption = "$OSCaption $OSOther $OSArchi $OSSP"
			if ($OSFullCaption -contains "64"){
				$OSFullCaption = "$OSCaption $OSOther x86 $OSSP"
			}
			$toolstrip_OS.Text = "OS:"
			$toolstrip_OSStatus.Text = $OSFullCaption.Replace('  ',' ')
			$toolstrip_OSStatus.ForeColor = "blue"
			# Get the uptime
			$LBTime = $OSWin32_OS.ConvertToDateTime($OSWin32_OS.Lastbootuptime)
			[TimeSpan]$uptime = New-TimeSpan $LBTime $(get-date)
			$Toolstrip_Uptime.Text ="Uptime:"
			$toolstrip_UptimeStatus.Text = "$($uptime.days) Days $($uptime.hours) Hours $($uptime.minutes) Minutes $($uptime.seconds) Seconds"
			$Toolstrip_UptimeStatus.ForeColor = "blue"
			$OS = get-wmiobject -class win32_operatingsystem -ComputerName $ComputerName | select-object -expand Version
			if($OS -eq  "6.3.9600") { 
	        	$Toolstrip_Uptime.Text =""
				$toolstrip_UptimeStatus.Text =""
			}
			# Get the User
		 	$Username = (get-wmiobject -class win32_computersystem -ComputerName $ComputerName | select-object -expand username).Split("\")[1]
			$textbox_username.Text = $Username
			if($OS -ne  "6.3.9600") { 
	        	$Profilepath = "$Profilefolder$username.v2"	
				# Deactivate functions that only work with Windows 8.1"
				$Button_gpupdate.Enabled = $false
				$button_mappeddrives.Enabled =$false
			}
			else {
				$Profilepath = "$Profilefolder$username.v4"
				# Activate functions that only work with Windows 8.1"
				$Button_gpupdate.Enabled =$true
		   	}
			$toolstrip_User.Text= "User:"
			$toolstrip_user_status.Text= "$Profilepath"
			$toolstrip_user_status.ForeColor = "blue"
			$toolstrip_user_status.islink = $true
			# Get Home Drive
			$Homepath = "$Homefolder$Username"
			$toolstrip_home.Text= "Home:"
			$toolstrip_home_status.Text= "$Homepath"
			$toolstrip_home_status.ForeColor = "blue"
			$toolstrip_home_status.IsLink = $true
			$toolstripseparator6.Visible = $true
			$toolstripseparator8.Visible = $true
			$toolstripseparator9.Visible = $true
			# Button WLAN show if Systemtype -eq Laptop or Notebook
			$Systemtype = Get-SystemType | Select-Object -ExpandProperty Type
			if ($Systemtype -eq "Notebook" -or $Systemtype -eq "Laptop")
				{
				$button_WLAN.Text = "WLAN Check"	
				$button_WLAN.Enabled =$true
			}
			else {
				$button_WLAN.Text = "No WLAN"
				$button_WLAN.Enabled =$false
			}
			if ($global:SCCMEnabled -eq $false) {
				$tabpage10.Enabled = $false
				$button_Check.Enabled = $false
				}
			else {
				$tabpage10.Enabled = $true
				$button_Check.Enabled = $true
			}
			# Activate Buttons Rights Home and Rights Profile
			$button_homerights.Enabled = $true
			$button_profilerights.Enabled = $true
			# Output
			Add-RichTextBox -text "Username: $Username`nWindows: `t$OS`nProfile: `t$Profilepath `nHome: `t`t$Homepath"
		}
		else {
			$textbox_username.Text = ""
			$button_Check.Text = "Offline";$button_Check.ForeColor = "red"
			Add-RichTextBoxWarn -text "$Computername is offline!"
			$toolstrip_OS.Text = ""
			$toolstrip_OSStatus.Text = ""
			$Toolstrip_Uptime.Text =""
			$toolstrip_UptimeStatus.Text = ""
			$toolstrip_User.Text= ""
			$toolstrip_user_status.Text= ""
			$toolstrip_home.Text= ""
			$toolstrip_home_status.Text= ""
			$toolstripseparator6.Visible = $false
			$toolstripseparator8.Visible = $false
			$toolstripseparator9.Visible = $false
		}
	}
	############################################################################################
	$button_homerights_Click={
		if ($global:Language -eq "Deutsch") {
			Add-RichTextBoxTitle -text "Überprüfe Rechte des Home Laufwerks des Users $Username"
		}
		if ($global:Language -eq "English") {
			Add-RichTextBoxTitle -text "Checking rights in Homefolder of User $Username"
		}
		$Homerights = Get-Acl "$Homepath" | format-list| Out-String
		Add-RichTextBox -text "$Homerights"	
	}
	
	############################################################################################
	$button_profilerights_Click={
		if ($global:Language -eq "Deutsch") {
			Add-RichTextBoxTitle -text "Überprüfe Rechte des Profilordners des Users $Username"
		}
		if ($global:Language -eq "English") {
			Add-RichTextBoxTitle -text "Checking rights in Profilefolder of Users $Username"
		}
		$Profilerights = Get-Acl "$Profilepath" | format-list| Out-String
		Add-RichTextBox -text "$Profilerights"		
	}
	############################################################################################
	$button_folderrights_Click={
		if ($global:Language -eq "Deutsch") {
			$Folderpath = Show-InputBox -title "Geben Sie einen Pfad ein" -message "Geben Sie einen Ordnerpfad an"
			Add-RichTextBoxTitle -text "Zeige rechte des Ordners $Folderpath"
		}
		if ($global:Language -eq "English") {
			$Folderpath = Show-InputBox -title "Enter Path" -message "Please enter a Path"
			Add-RichTextBoxTitle -text "Showing rights of Folder $Folderpath"
		}
		$Folderrights = Get-Acl "$Folderpath" | Format-List | Out-String
		Add-RichTextBox -text "$Folderrights"
	}
	############################################################################################
	$button_rdp_Click={
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Remote Desktop Connection"
		$port=":3389"
		$command = "mstsc"
		$argument = "/v:$computername$port /admin"
		Start-Process $command $argument
	}
	############################################################################################
	$button_psremote_Click={
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Open a PowerShell Remoting Session"
		if (Test-PSRemoting -ComputerName $ComputerName){
			add-richtextbox -text "$ComputerName - Powershell Remote Session"
			Start-Process powershell.exe -ArgumentList "-noexit -command Enter-PSSession -ComputerName $ComputerName"
		}
		else {
			Add-RichTextBoxWarn -text "$ComputerName - PsRemoting does not seem to be enabled"
			Show-MsgBox -Title "PSRemoting" -BoxType "OKOnly" -Icon "Exclamation" -Prompt "PSRemoting does not seem to be enabled"
		}
	}
	############################################################################################
	$button_cmd_Click={
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Run a Remote Command"
		if (Test-Connection $ComputerName -Count 1 -Quiet) {
			$RemoteCommand = Show-Inputbox -message "Enter a command to run" -title "$Computername - Run-RemoteCMD" -default "ipconfig /all"
			if ($RemoteCommand -ne ""){
				Run-RemoteCMD -ComputerName $ComputerName -Command $RemoteCommand	
				Add-RichTextBox -text "$ComputerName - Remote Command Sent!"
			}
		}
		else {
			Add-RichTextBoxWarn -text "Computer offline or wrong Computername"
			Show-MsgBox -Prompt "Computer offline or wrong Computernamee" -BoxType "OKOnly" -Title "Computer offline!" -Icon "Exclamation"
		}
	}
	############################################################################################
	$Button_gpupdate_Click={
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - GPUpdate (Remotly via WMI)"
		$OS = get-wmiobject -class win32_operatingsystem -ComputerName $ComputerName | select-object -expand Version
		$result = Invoke-GPUpdate -Computer $ComputerName
		if ($result -ne $null)
			{
				if ($result.ReturnValue -eq 0){
					Show-MsgBox -BoxType "OKOnly" -Title "$ComputerName - Group Policy Update" -Prompt "Gpupdate ran successfully!" -Icon "Information"
					Add-RichTextBox $($result|Out-String)
				}
		}
		else {
		Add-RichTextBoxWarn -text "GPUpdate not working"
		Show-MsgBox -BoxType "OKOnly" -Title "$ComputerName - Group Policy Update" -Prompt "GPUpdate not working" -Icon "Exclamation"
		}
	}	
	############################################################################################
	$button_ipconfig_Click={
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Network - Configuration"
		$result = Get-IP -ComputerName $ComputerName | Format-List Name,IP4,IP4Subnet,DefaultGWY,MacAddress,DNSServer | out-string -Width $richtextbox_output.Width
		Add-RichTextBox "$result`n"
	}
	############################################################################################
	$button_DNScheck_Click={
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Network - Configuration"
		$result = nslookup $ComputerName 10.40.254.100 | out-string -Width $richtextbox_output.Width
		Add-RichTextBox "DNS1 - $result"
		$result = nslookup $ComputerName 10.40.254.101 | out-string -Width $richtextbox_output.Width
		Add-RichTextBox "DNS2 - $result"	
	}
	############################################################################################
	$button_shutdown_Click={
		Start-Process shutdown.exe -ArgumentList /i	
	}
	############################################################################################
	$button_ping_Click={
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Ping Test"
		$result = ping $ComputerName | out-string -Width $richtextbox_output.Width
		Add-RichTextBox -text "Ping`n$result"
	}
	############################################################################################
	$button_Userunlock_Click={
		$Locked_User = Get-QADUser -Locked | Select-Object -expand samaccountname
	    if ($global:Language -eq "Deutsch"){
			if ($Locked_User -ne $null){
				 Show-MsgBox -Prompt "Folgende User sind gesperrt: `n $Locked_user" -Title "Gesperrte User" -Icon Information -BoxType OKOnly
				$Confirmation_User = Show-MsgBox -Prompt "User entsperren?" -Title "Entsperren?" -Icon Information -BoxType YesNo
				if ($Confirmation_User -eq "YES"){ 
		            $Unlock_User = $Locked_User
		            Unlock-QADUser $Unlock_User
		             $Locked_User_2 = Get-QADUser -Locked | Select-Object -expand samaccountname
		        	if ($Locked_User_2 -eq $Locked_User){
		                $Locked_Error = Show-MsgBox -Prompt "Fehler beim entsperren von User $Unlock_User" -Title "Fehler beim Entsperren" -Icon Critical -BoxType OKOnly 
					    Add-RichTextBoxWarn -text "Fehler beim entsperren vom User $Unlock_User"
		            }
			        else{
		                Show-MsgBox -Prompt "User $Unlock_User wurde entsperrt" -Title "Entsperrt" -Icon Information -BoxType OKOnly
			        }
		        }
				else{
		        Show-MsgBox -BoxType "OKOnly" -Title "User entsperren" -Prompt "Kein User entsperrt" -Icon "Information"}
		    }
		    else{
		        Show-MsgBox -Prompt "Keine User gesperrt" -Icon Information -BoxType OKOnly
		    }
		}
		if ($global:Language -eq "English"){
			if ($Locked_User -ne $null){
				 Show-MsgBox -Prompt "The following Users are locked: `n $Locked_user" -Title "Locked Users" -Icon Information -BoxType OKOnly
				$Confirmation_User = Show-MsgBox -Prompt "Unlock User(s)?" -Title "Unlock?" -Icon Information -BoxType YesNo
				if ($Confirmation_User -eq "YES"){ 
		            $Unlock_User = $Locked_User
		            Unlock-QADUser $Unlock_User
		             $Locked_User_2 = Get-QADUser -Locked | Select-Object -expand samaccountname
		        	if ($Locked_User_2 -eq $Locked_User){
		                $Locked_Error = Show-MsgBox -Prompt "Error unlocking User $Unlock_User" -Title "Error" -Icon Critical -BoxType OKOnly 
					    Add-RichTextBoxWarn -text "Error unlocking User $Unlock_User"
		            }
			        else{
		                Show-MsgBox -Prompt "User $Unlock_User unlocked" -Title "Unlocked" -Icon Information -BoxType OKOnly
			        }
		        }
				else{
		        Show-MsgBox -BoxType "OKOnly" -Title "Unlock Users" -Prompt "No User unlocked" -Icon "Information"}
		    }
		    else{
		        Show-MsgBox -Prompt "No Users are locked!" -Icon Information -BoxType OKOnly
		    }
		}
	}
	############################################################################################
	$button_ResetPWD_Click={
		Add-RichTextBoxTitle -text "User Passwort Reset"
		if ($global:Language -eq "Deutsch"){
			$PWUser = Show-InputBox -message "Usernamen eingeben" -title "User PW zurücksetzen"
			if ($PWUser -ne $null) {
				$PWUserExists = Get-ADUser -identity $PWUser
				if ($PWUserExists -ne $null) {
		       		$PWPW = Show-InputBox -message "Passwort eingeben" -title "User PW zurücksetzen"
					$PWSecure = $PWPW | ConvertTo-SecureString -AsPlainText -Force
			        Set-ADAccountPassword $PWUser -NewPassword $PWSecure -Reset -PassThru | Set-AdUser -ChangePasswordAtLogon $True
			        Add-RichTextBox -text "User $PWUser wurde das Passwort $PWPW zugewiesen. `nDies muss beim nächsten Login geändert werden. Falls das Attribut 'Kennwort nicht ändern' aktiviert ist, muss dies nicht gemacht werden"
			        Show-MsgBox -Prompt "User $PWUser wurde das Passwort $PWPW zugewiesen. `nDies muss beim nächsten Login geändert werden" -Title "Passwort geändert" -Icon Information -BoxType OKOnly
				}
				else {
					Add-RichTextBoxWarn -text "User $PWUser nicht vorhanden."
		        	Show-MsgBox -Prompt "User $PWUser nicht vorhanden" -Title "User nicht vorhanden" -Icon Information -BoxType OKOnly	
				}
			}
			else {
				Add-RichTextBoxWarn -text "User nicht angegeben"
		    	Show-MsgBox -Prompt "User nicht angegeben" -Title "Kein User" -Icon Information -BoxType OKOnly
			}
		}
		if ($global:Language -eq "English"){
			$PWUser = Show-InputBox -message "Enter Username" -title "Reset User PW"
			if ($PWUser -ne $null) {
				$PWUserExists = Get-ADUser -identity $PWUser
				if ($PWUserExists -ne $null) {
		       		$PWPW = Show-InputBox -message "Enter Password" -title "Reset User PW"
					$PWSecure = $PWPW | ConvertTo-SecureString -AsPlainText -Force
			        Set-ADAccountPassword $PWUser -NewPassword $PWSecure -Reset -PassThru | Set-AdUser -ChangePasswordAtLogon $True
			        Add-RichTextBox -text "$PWPW set as Password of User $PWUser. `nIt has to be changed at first logon."
			        Show-MsgBox -Prompt "$PWPW set as Password of User $PWUser. `nIt has to be changed at first logon." -Title "Password changed" -Icon Information -BoxType OKOnly
				}
				else {
					Add-RichTextBoxWarn -text "User $PWUser does not exist in AD."
		        	Show-MsgBox -Prompt "User $PWUser does not exist" -Title "User does not exist" -Icon Information -BoxType OKOnly	
				}
			}
			else {
				Add-RichTextBoxWarn -text "No User entered"
		    	Show-MsgBox -Prompt "No User entered" -Title "No User" -Icon Information -BoxType OKOnly
			}
		}
	}
	############################################################################################
	$button_C_Click={
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Open C$ Drive"
		$PathToCDrive = "\\$ComputerName\c$"
		Explorer.exe $PathToCDrive
	}
	############################################################################################
	$button_mainboard_Click={
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - MotherBoard"
		$result = Get-MotherBoard -ComputerName $ComputerName | out-string -Width $richtextbox_output.Width
		Add-RichTextBox $result
	}
	############################################################################################
	$button_processor_Click={
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Processor Information"
		$result = Get-Processor -ComputerName $ComputerName|out-string -Width $richtextbox_output.Width
		Add-RichTextBox $result
	}
	############################################################################################
	$button_memory_Click={
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Memory Configuration"
		$result = Get-MemoryConfiguration -ComputerName $ComputerName | out-string -Width $richtextbox_output.Width
		Add-RichTextBox $result
	}
	############################################################################################
	$button_systemtype_Click={
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - System Type"
		$result = get-systemtype -ComputerName $ComputerName| out-string -Width $richtextbox_output.Width
		Add-RichTextBox $result
	}
	############################################################################################
	$button_USBDevice_Click={
		$button_USBDevice.Enabled = $false
		Get-ComputerTxtBox
		Add-RichTextBoxTitle "$ComputerName - USB Devices"
		$result = Get-USB -computerName $ComputerName|Select-Object SystemName,Manufacturer,Name|Sort-Object Manufacturer|Format-Table -AutoSize|Out-String -Width $richtextbox_output.Width
		Add-RichTextBox $result
		$button_USBDevice.Enabled = $true
	}
	############################################################################################
	$button_printer_Click={
		Get-ComputerTxtBox
		Add-RichTextBoxTitle "$ComputerName - Printers"
		$result = Get-WmiObject Win32_Printer -ComputerName $ComputerName  | Format-table SystemName,Name,Comment,PortName,Location,DriverName -AutoSize | Out-String -Width $richtextbox_output.Width
		if ($result -ne $null){
			Add-RichTextBox $result
		}
		else {Add-RichTextBox "$ComputerName - No Printer detected"}
	}
	############################################################################################
	$button_installedSoftware_Click={
		Get-ComputerTxtBox
		$result = Get-InstalledSoftware -ComputerName $ComputerName | Sort-Object -Property Name|Format-Table -AutoSize| Out-String -Width $richtextbox_output.Width
		Add-RichTextBoxTitle -text "$ComputerName - Installed Softwares List"
		Add-RichTextBox $result
	}
	############################################################################################
	$button_autostart_Click={
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Startup Commands"
		$result = Get-WmiObject Win32_StartupCommand –ComputerName $ComputerName |Sort-Object Caption |Format-Table Caption,Command,User -auto | out-string -Width $richtextbox_output.Width
		Add-richtextbox $result
		Add-RichTextBox -text "$ComputerName - Startup Commands - Done."
	}
	############################################################################################
	$button_ipconfig2_Click={
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Network - Configuration"
		$result = Get-IP -ComputerName $ComputerName | Format-Table Name,IP4,IP4Subnet,DefaultGWY,MacAddress,DNSServer,WinsPrimary,WinsSecondary -AutoSize | Out-String -Width $richtextbox_output.Width
		Add-RichTextBox "$result`n"
	}
	############################################################################################
	$button_routetable_Click={
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Route table"
		$result = Get-Routetable  -ComputerName $ComputerName |ft -auto| Out-String
		Add-RichTextBox $result
	}
	############################################################################################
	$button_dns1_Click={
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Network - Configuration"
		$result = nslookup $ComputerName 10.40.254.100 | out-string -Width $richtextbox_output.Width
		Add-RichTextBox "DNS1 - $result"
	}
	############################################################################################
	$button_dns2_Click={
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Network - Configuration"
		$result = nslookup $ComputerName 10.40.254.101 | out-string -Width $richtextbox_output.Width
		Add-RichTextBox "DNS2 - $result"
	}
	############################################################################################
	$button_process_Click={
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - All Processes"
		if ($ComputerName -eq "localhost") {$ComputerName = "."}
		$ProcessALL = get-process -ComputerName $ComputerName|out-string
		Add-RichTextBox $ProcessALL
	}
	############################################################################################
	$button_proclasthour_Click={
		Get-ComputerTxtBox
		Add-RichTextBoxTitle "$ComputerName - Processes - Processes started in last hour"
		if ($ComputerName -eq "localhost") {$ComputerName = "."}
		$owners = @{}
		Get-WmiObject win32_process -ComputerName $ComputerName|% {$owners[$_.handle] = $_.getowner().user}
		$ProcessALL = get-process -ComputerName $ComputerName| Where-Object { trap { continue }  (New-Timespan $_.StartTime).TotalMinutes -le 10 }|Select ProcessName,@{l="StartTime";e={$_.StartTime}},@{l="Owner";e={$owners[$_.id.tostring()]}},CPU,WorkingSet,Handles,Id|fl|out-string
		Add-RichTextBox $ProcessALL
	}
	############################################################################################
	$button_MMCServices_Click={
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Services MMC (services.msc /computer:$ComputerName)"
		$command = "services.msc"
		$arguments = "/computer:$computername"
		Start-Process $command $arguments 
	}
	############################################################################################
	$button_services_Click={
		#Clear-RichTextBox
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Services - All Services + Owners"
		if ($ComputerName -eq "localhost") {$ComputerName = "."}
		$Services_StartModeAuto = Get-WmiObject Win32_Service -ComputerName $ComputerName |select Name,ProcessID,StartMode,State,@{Name="Owner";Expression={$_.StartName}}|ft -AutoSize|out-string
		Add-RichTextBox $Services_StartModeAuto
	}
	############################################################################################
	$button_servicesrunning_Click={
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Services - Status: Running"
		if ($ComputerName -eq "localhost") {$ComputerName = "."}
		$Services_running = Get-Service -ComputerName $ComputerName| Where-Object { $_.Status -eq "Running" }|Format-Table -AutoSize |Out-String
		Add-RichTextBox -text $Services_running
	}
	############################################################################################
	$button_servicesauto_Click={
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Services - StartMode:Automatic"
		if ($ComputerName -eq "localhost") {$ComputerName = "."}
		$Services_StartModeAuto = Get-WmiObject Win32_Service -ComputerName $ComputerName -Filter "startmode='auto'" |Select-Object DisplayName,Name,ProcessID,StartMode,State|Format-Table -AutoSize|out-string
		Add-RichTextBox $Services_StartModeAuto
	}
	############################################################################################
	$button_servicesautostop_Click={
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Services - Services with StartMode: Automatic and Status: NOT Running"
		if ($ComputerName -eq "localhost") {$ComputerName = "."}
		$Services_StartModeAuto = Get-WmiObject Win32_Service -ComputerName $ComputerName -Filter "startmode='auto' AND state!='running'"|Select-Object DisplayName,Name,StartMode,State|ft -AutoSize|out-string
		Add-RichTextBox $Services_StartModeAuto
	}
	############################################################################################
	$button_servicesnonstandard_Click={
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Services - Non-Standard Windows Service Accounts"
		$NormalAccount1="LocalSystem"
		$NormalAccount2="NT Authority\\LocalService"
		$NormalAccount3="NT Authority\\NetworkService"
		$wql = 'Select Name, DisplayName, StartName, __Server From Win32_Service WHERE ((StartName != "LocalSystem") and (StartName != "NT Authority\\LocalService") and (StartName != "NT Authority\\NetworkService"))'
		$query = Get-WmiObject -Query $wql -ComputerName $ComputerName -ErrorAction Stop | Select-Object __SERVER, StartName, Name, DisplayName|Format-Table -AutoSize |Out-String
		if ($query -eq $null){Add-RichTextBox "$Computername - All the services use Standard Windows Service Accounts"}
		else {Add-RichTextBox $query}
	
	}
	############################################################################################
	$button_servicesrestart_Click={
		#Clear-RichTextBox
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Restart Service"
		#Add-RichTextBox "# SERVICES - RESTART SERVICE - COMPUTERNAME: $ComputerName `n`n"
		#$Service_query = Read-Host "Enter the Service Name to Start `n"
		$Service_query = $textbox_services.text
		add-richtextbox -text "$ComputerName - Service to Restart: $Service_query"
		#Add-RichTextBox "SERVICE: $Service_query"
		$a = new-object -comobject wscript.shell
		$intAnswer = $a.popup("Do you want to continue ?",0,"$ComputerName - Start Service: $Service_query",4)
		if (($ComputerName -like "localhost") -and ($intAnswer -eq 6)) {
			add-richtextbox -text "$ComputerName - Stopping Service: $Service_query ..."
			$Service_query_return=Get-WmiObject Win32_Service -Filter "Name='$Service_query'"
			$Service_query_return.stopservice()
			add-richtextbox -Text "$ComputerName - Command Sent! $Service_query should be stopped"
			Add-RichTextBox $Service_query_return
			add-richtextbox -Text "$ComputerName - Checking the status of $Service_Query ..."
			Start-Sleep -Milliseconds 1000
			$Service_query_result=Get-WmiObject Win32_Service -Filter "Name='$Service_query'"|Out-String
			Add-RichTextBox $Service_query_result
			add-richtextbox -Text "$ComputerName - Stop Service $Service_query - Done."
			add-richtextbox -Text "$ComputerName - Restarting the Service $Service_query ..."
			#Add-RichTextBox "Starting Service: $Service_query...`r"
			$Service_query_return=Get-WmiObject Win32_Service -Filter "Name='$Service_query'"
			$Service_query_return.startservice()
			add-richtextbox -Text "$ComputerName - Command Sent! $Service_query should be started"
			Add-RichTextBox $Service_query_return
			add-richtextbox -Text "$ComputerName - Checking the status of $Service_Query ..."
			Start-Sleep -Milliseconds 1000
			$Service_query_result=Get-WmiObject Win32_Service -Filter "Name='$Service_query'"|Out-String
			Add-RichTextBox $Service_query_result
			add-richtextbox -Text "$ComputerName - Start Service $Service_query - Done."
		}
		else { 
			if ($intAnswer -eq 6){
				add-richtextbox -text "$ComputerName - Stopping Service: $Service_query ..."
				$Service_query_return=Get-WmiObject Win32_Service -Filter "Name='$Service_query'"
				$Service_query_return.stopservice()
				add-richtextbox -Text "$ComputerName - Command Sent! $Service_query should be stopped"
				Add-RichTextBox $Service_query_return
				add-richtextbox -Text "$ComputerName - Checking the status of $Service_Query ..."
				Start-Sleep -Milliseconds 1000
				$Service_query_result=Get-WmiObject Win32_Service -Filter "Name='$Service_query'"|Out-String
				Add-RichTextBox $Service_query_result
				add-richtextbox -Text "$ComputerName - Stop Service $Service_query - Done."
				add-richtextbox -Text "$ComputerName - Restarting the Service $Service_query ..."
				$Service_query_return=Get-WmiObject Win32_Service -computername $ComputerName -Filter "Name='$Service_query'"
				$Service_query_return.startservice()
				add-richtextbox -Text "$ComputerName - Command Sent! $Service_query should be started"
				Add-RichTextBox $Service_query_return
				add-richtextbox -Text "$ComputerName - Checking the status of $Service_Query ..."
				Start-Sleep -Milliseconds 1000
				$Service_query_result=Get-WmiObject Win32_Service -computername $ComputerName -Filter "Name='$Service_query'"|Out-String
				Add-RichTextBox $Service_query_result
				add-richtextbox -Text "$ComputerName - Start Service $Service_query - Done."
			}
		}
	}
	############################################################################################
	$button_servicescheck_Click={
		Get-ComputerTxtBox
		$a = new-object -comobject wscript.shell
		Add-RichTextBoxTitle "$COMPUTERNAME - Query Service"
		#$Service_query = Read-Host "Enter the Service Name to Query `n"
		$Service_query = $textbox_services.text
		$intAnswer = $a.popup("Do you want to continue ?",0,"$ComputerName - Query Service: $Service_query",4)
		if (($ComputerName -like "localhost") -and ($intAnswer -eq 6)) {
			Add-RichTextBox "$COMPUTERNAME - Checking Service $Service_query ..."
			$Service_query_return=Get-WmiObject Win32_Service -Filter "Name='$Service_query'" |Out-String
			Add-RichTextBox "$COMPUTERNAME - Command Sent! Service $Service_query"
			Add-RichTextBox $Service_query_return
			Add-RichTextBox -Text "$ComputerName - Query Service $Service_query - Done."
		}
		else {
			if($intAnswer -eq 6){
				Add-RichTextBox "$COMPUTERNAME - Checking the Service $Service_query ..."
				$Service_query_return=Get-WmiObject -computername $ComputerName Win32_Service -Filter "Name='$Service_query'" |Out-String
				Add-RichTextBox "$COMPUTERNAME - Command Sent! Service $Service_query"
				Add-RichTextBox $Service_query_return
				Add-RichTextBox -Text "$ComputerName - Query Service $Service_query - Done."
			}
		}
	}
	############################################################################################
	$button_servicesstart_Click={
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Start Service"
		$Service_query = $textbox_services.text
		add-richtextbox -text "$ComputerName - Service to start: $Service_query"
		$a = new-object -comobject wscript.shell
		$intAnswer = $a.popup("Do you want to continue ?",0,"$ComputerName - Start Service: $Service_query",4)
		if (($ComputerName -like "localhost") -and ($intAnswer -eq 6)) {
			add-richtextbox -text "$ComputerName - Starting Service: $Service_query ..."
			$Service_query_return=Get-WmiObject Win32_Service -Filter "Name='$Service_query'"
			$Service_query_return.startservice()
			add-richtextbox -Text "$ComputerName - Command Sent! $Service_query should be started"
			Add-RichTextBox $Service_query_return
			add-richtextbox -Text "$ComputerName - Checking the status of $Service_Query ..."
			Start-Sleep -Milliseconds 1000
			$Service_query_result=Get-WmiObject Win32_Service -Filter "Name='$Service_query'"|Out-String
			Add-RichTextBox $Service_query_result
			add-richtextbox -Text "$ComputerName - Start Service $Service_query - Done."
		}
		else { 
			if ($intAnswer -eq 6){
				add-richtextbox -text "$ComputerName - Starting Service: $Service_query ..."
				$Service_query_return=Get-WmiObject Win32_Service -computername $ComputerName -Filter "Name='$Service_query'"
				$Service_query_return.startservice()
				add-richtextbox -Text "$ComputerName - Command Sent! $Service_query should be started"
				Add-RichTextBox $Service_query_return
				add-richtextbox -Text "$ComputerName - Checking the status of $Service_Query ..."
				Start-Sleep -Milliseconds 1000
				$Service_query_result=Get-WmiObject Win32_Service -computername $ComputerName -Filter "Name='$Service_query'"|Out-String
				Add-RichTextBox $Service_query_result
				add-richtextbox -Text "$ComputerName - Start Service $Service_query - Done."
			}
		}
	}
	############################################################################################
	$button_servicesstop_Click={
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Stop Service"
		$Service_query = $textbox_services.text
		Add-richtextbox -text "$ComputerName - Service to Stop: $Service_query"
		$a = new-object -comobject wscript.shell
		$intAnswer = $a.popup("Do you want to continue ?",0,"$ComputerName - Stop Service: $Service_query",4)
		if (($ComputerName -like "localhost") -and ($intAnswer -eq 6)) {
			add-richtextbox -text "$ComputerName - Stopping Service: $Service_query ..."
			$Service_query_return=Get-WmiObject Win32_Service -Filter "Name='$Service_query'"
			$Service_query_return.stopservice()
			add-richtextbox -Text "$ComputerName - Command Sent! $Service_query should be stopped"
			Add-RichTextBox $Service_query_return
			add-richtextbox -Text "$ComputerName - Checking the status of $Service_Query ..."
			Start-Sleep -Milliseconds 1000
			$Service_query_result=Get-WmiObject Win32_Service -Filter "Name='$Service_query'"|Out-String
			Add-RichTextBox $Service_query_result
			add-richtextbox -Text "$ComputerName - Stop Service $Service_query - Done."
		}
		else {
			if ($intAnswer -eq 6){
				add-richtextbox -text "$ComputerName - Stopping Service: $Service_query ..."
				$Service_query_return=Get-WmiObject Win32_Service -computername $ComputerName -Filter "Name='$Service_query'"
				$Service_query_return.stopservice()
				add-richtextbox -Text "$ComputerName - Command Sent! $Service_query should be stopped"
				Add-RichTextBox $Service_query_return
				add-richtextbox -Text "$ComputerName - Checking the status of $Service_Query ..."
				Start-Sleep -Milliseconds 1000
				$Service_query_result=Get-WmiObject Win32_Service -computername $ComputerName -Filter "Name='$Service_query'"|Out-String
				Add-RichTextBox $Service_query_result
				add-richtextbox -Text "$ComputerName - Stop Service $Service_query - Done."
			}
		}
	}
	############################################################################################
	$button_diskusage_Click={
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Hard Drive - DiskSpace"
		$result = Get-DiskSpace -ComputerName $ComputerName | Out-String
		Add-RichTextBox -text $result
	}
	############################################################################################
	$button49_Click={
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Hard Disk - Mapped Drive"
		$result = Get-MappedDrive -ComputerName $ComputerName | Out-String
		if ($result -ne $null){Add-RichTextBox $result}
		else {
			Add-RichTextBoxWarn -text "$Computername - No Mapped Drive detected"
			Show-MsgBox -BoxType "OKOnly" -Title "$ComputerName - Mapped Drive" -Prompt "$ComputerName - No Mapped Drive detected" -Icon "Information"
		}
	}
	############################################################################################
	$button_volumes_Click={
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Hard Drive - Physical Disk"
		if ($ComputerName -eq "localhost") {$ComputerName = "."}
		$Disks_Physical = Get-WmiObject Win32_DiskDrive -ComputerName $ComputerName|Select DeviceID, `
	    Model,`
	    Manufacturer,`
	    @{Name="SizeGB";Expression={$_.Size/1GB}}, `
	    Caption, `
	    Partitions, `
	    SystemName,`
	    Status,`
	    InterfaceType,`
	    MediaType,`
	    SerialNumber,`
	    SCSIBus,SCSILogicalUnit,SCSIPort,SCSITargetId| fl |Out-String
		Add-RichTextBox $Disks_Physical
	}
	############################################################################################
	$button_eventlogmmc_Click={
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Event Viewer MMC (eventvwr $Computername)"
		$command="eventvwr"
		$arguments = "$ComputerName"
		Start-Process $command $arguments
	}
	############################################################################################
	$button_eventlog20_Click={
		Get-ComputerTxtBox
		Add-RichTextBoxTitle "$ComputerName - EventLog - Last 20"
		if ($ComputerName -like "localhost"){
			$Events_Last20Sytem = Get-EventLog -Newest 20 | Select-Object Index,EventID,Source,Message,MachineName,UserName,TimeGenerated,TimeWritten |Format-List|Out-String
			Add-RichTextBox $Events_Last20Sytem
		}
		else {
			$Events_Last20Sytem = Get-EventLog -Newest 20 -ComputerName $ComputerName | Select-Object Index,EventID,Source,Message,MachineName,UserName,TimeGenerated,TimeWritten |Format-List|Out-String
			Add-RichTextBox $Events_Last20Sytem
		}
	}
	############################################################################################
	$button_eventlognames_Click={
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - EventLog - LogNames list"
		if ($ComputerName -eq "localhost") {
			$EventsLog = Get-EventLog -list |Format-List|Out-String
			Add-RichTextBox $EventsLog	
		}
		else {
			$EventsLog = Get-EventLog -list -ComputerName $ComputerName |Format-List|Out-String
			Add-RichTextBox $EventsLog
		}
	}
	############################################################################################
	$button_deleteoffline_Click={
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$Computername - Reset Offline Files"
		New-RegistryValue HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\CSC\Parameters -Name FormatDatabase -Value 1 -Type Dword -ComputerName $ComputerName
		If ($global:Language -eq "Deutsch"){
			Add-RichTextBox -text "Registry Key wurde gesetzt. Bitte Gerät neu starten"
		}
		if ($global:Language -eq "English"){
			Add-RichTextBox -text "Registry Value set. Please reboot Computer!"		
		}
	}
	############################################################################################
	$button_ComputerGroups_Click={
		Get-ComputerTxtBox
		If ($global:Language -eq "Deutsch"){
			Add-RichTextBoxTitle -text "Computergruppen des Computers $Computername auslesen!"
		}
		if ($global:Language -eq "English"){
			Add-RichTextBoxTitle -text "Getting Computer Groups of Computer $Computername"		
		}
		$ComputerGroups = Get-QADComputer $ComputerName -Properties Memberof | Select-Object -Expand memberof | Out-String
		$ComputerGroups = $ComputerGroups -split ',*CN=*,'
		$ComputerGroups = $ComputerGroups -replace ('CN=','') -replace (',OU.*','')
		Add-RichTextBox -text "$ComputerGroups"
	}
	############################################################################################
	$button_machinepolicy_Click={
		Get-ComputerTxtBox
		if ($global:Language -eq "Deutsch"){
			Add-RichTextBoxTitle -text "Computerrichtlinienabruf und Auswertungszyklus auf PC $Computername wurde gestartet"
		}
		if ($global:Language -eq "English"){
			Add-RichTextBoxTitle -text "Machine Policy Retrieval + Evaluation Cycle has been started on PC $Computername"		
		}
		$MainForm.Cursor = 'WaitCursor'
		Invoke-Command -ComputerName $ComputerName -ScriptBlock {
			Invoke-WmiMethod -Namespace "Root\CCM" -Class SMS_Client -Name TriggerSchedule -ArgumentList "{00000000-0000-0000-0000-000000000021}"
			$MainForm.Cursor = 'Default'
			if ($global:Language -eq "Deutsch"){
				Add-RichTextBox "Auftrag ausgeführt"
			}
			if ($global:Language -eq "English"){
				Add-RichTextBox "Successful"
			}
		}
	}
	############################################################################################
	$button_softwareinventory_Click={
		Get-ComputerTxtBox
		if ($global:Language -eq "Deutsch"){
			Add-RichTextBoxTitle -text "Softwareinventurzyklus auf PC $Computername wird durchgeführt"
		}
		if ($global:Language -eq "English"){
			Add-RichTextBoxTitle -text "Software Inventory Cycle on PC $Computername has been started"
		}
		$MainForm.Cursor = 'WaitCursor'
		Invoke-Command -ComputerName $ComputerName -ScriptBlock {
			Invoke-WmiMethod -Namespace "Root\CCM" -Class SMS_Client -Name TriggerSchedule -ArgumentList "{00000000-0000-0000-0000-000000000002}"
			if ($global:Language -eq "Deutsch"){
				Add-RichTextBox "Auftrag ausgeführt"
			}
			if ($global:Language -eq "English"){
				Add-RichTextBox "Successful"
			}
			$MainForm.Cursor = 'Default'
		}
	}
	############################################################################################
	$button_WOL_Click={
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "WOL PC $Computername"
		$ComputerMAC = Get-IP -ComputerName $ComputerName | Select-Object -ExpandProperty MACAddress
		Add-RichTextBox -text "Mac-Address - $ComputerMAC"	
		$ComputerIP = Get-IP -Computername $ComputerName | Select-Object -ExpandProperty IP4
		Add-RichTextBox "Computer IP - $ComputerIP"
		Send-WOL -mac $ComputerMAC -ip $ComputerIP -port 7
		Add-RichTextBox "WOL sent to $Computername with MAC $ComputerMAC"
	}
	############################################################################################
	$button_getadvertisedsoftware_Click={
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "Software of $Computername"
		$MainForm.Cursor = 'WaitCursor'
		$Applications = Get-WmiObject -Query "Select * From CCM_Application" -Namespace "Root\ccm\ClientSDK" -ComputerName $ComputerName | Sort-Object -Property Fullname |Select-Object -Property Fullname, @{label="Installed"; Expression ={$_.convertToDateTime($_.LastInstallTime)}} |Out-String
		Add-RichTextBoxWarn $_.Exception.Message
		Add-RichTextBox $Applications   
		$MainForm.Cursor = 'Default'
	}
	############################################################################################
	$button_GetPC_Click={
	    Get-UserTxtBox
		$SamAccountName = $textbox_username.Text 
		If ($global:Language -eq "Deutsch"){
			Add-RichTextBoxTitle -text "Letzer Computer des Benutzers anzeigen. Es können u.U. mehrere Geräte aufgelistet werden!"
		}
		If ($global:Language -eq "English"){
			Add-RichTextBoxTitle -text "Showing last Computer of User $SamAccountName. Caution! Multiple Computers could be shown!"
		}	
		Get-QADUser -Identity $SamAccountName
		try {
			$User_Computer = Get-WmiObject -namespace $SCCMNameSpace -computer $SCCMServer -query "select SMS_R_System.Name, SMS_R_System.SystemOUName from  SMS_R_System where SMS_R_System.LastLogonUserName = ""$SamAccountName""" | Select-Object -ExpandProperty Name
			If ($global:Language -eq "Deutsch"){
				Add-RichTextBox -text "Computer des User $SamAccountName ist $User_Computer"
			}
			If ($global:Language -eq "English"){
				Add-RichTextBox -text "User $SamAccountName has the following Computer $User_Computer"		
			}
			$textbox_computername.Text ="$User_Computer"
			$button_Check.PerformClick()
		}
		catch [Exception]{
			If ($global:Language -eq "Deutsch"){
				Add-RichTextBoxWarn -text "Fehler beim überprüfen des Systems des Users $SamAccountname. User möglicherweise nicht vorhanden"
			}
			If ($global:Language -eq "English"){
				Add-RichTextBoxWarn -text "Error getting Computer of User $SamAccountname. User not existing?"
			}
		}
	}
	############################################################################################
	$button_Remotecontrol_Click={
		Get-ComputerTxtBox
		If ($global:Language -eq "Deutsch"){
			Add-RichTextBoxTitle -text "Starte Remotesteuerung des PCs $Computername"
		}
		If ($global:Language -eq "English"){
			Add-RichTextBoxWarn -text "Starting Remote Control"
		}
		& $global:CmRCviewer $ComputerName
	}
	############################################################################################
	$button_MSRA_Click={
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Remote Assistance"
		MSRA.exe /OfferRA $ComputerName
	}
	############################################################################################
	$button_checkWLAN_Click={
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "Checking Wireless-Adapter"
		$NicInfo = Get-NICInfo -ComputerName $ComputerName | Where {$_.Name -like "*Centrino*" }|Out-String
		Add-RichTextBox -text "$NicInfo"
	}
	############################################################################################
	$button_WLAN_Click={
		Get-ComputerTxtBox
		If ($global:Language -eq "Deutsch"){
			Add-RichTextBoxTitle -text "Überprüfe ob WLAN verbunden ist. Dies kann einen Moment dauern!"
		}
		If ($global:Language -eq "English"){
			Add-RichTextBoxTitle -text "Checking if WLAN is connected. This could take a while!"
		}
		$MainForm.Cursor = 'WaitCursor'
		$Nicinfo = Get-NICInfo -ComputerName $ComputerName | Where {$_.Name -like "*Centrino*"} | Out-String
		$WLANon = $Nicinfo | Select-Object -ExpandProperty Enabled
		$WLANIP = $Nicinfo | Select-Object -ExpandProperty IP
		$toolstripseparator3.Visible = $true
		$MainForm.Cursor = 'Default'
		if ($Systemtype -eq "Laptop" -or $Systemtype -eq "Notebook"){
			#Check WLAN ON
			If ($global:Language -eq "Deutsch"){	
				if($WLANon -eq "True"){
					#WLAN ist nicht verbunden
					$toolstriplabel_WLANon.ForeColor = "Green"
					$toolstriplabel_WLANon.Text = "Verbunden"
					Add-RichTextBoxOK -text "WLAN ist Verbunden mit IP $WLANIP"
				}
				else {
					#WLAN ist verbunden
					$toolstriplabel_WLANon.ForeColor = "Red"
					$toolstriplabel_WLANon.Text = "Nicht Verbunden"
					Add-RichTextBoxWarn -text "WLAN ist nicht Verbunden oder deaktiviert"
				}
			}		
			If ($global:Language -eq "English"){	
				if($WLANon -eq "True"){
					#WLAN ist nicht verbunden
					$toolstriplabel_WLANon.ForeColor = "Green"
					$toolstriplabel_WLANon.Text = "Connected"
					Add-RichTextBoxOK -text "WLAN is connected with IP $WLANIP"
				}
				else {
					#WLAN ist verbunden
					$toolstriplabel_WLANon.ForeColor = "Red"
					$toolstriplabel_WLANon.Text = "Disconnected"
					Add-RichTextBoxWarn -text "WLAN is disconnected/disabled"
				}
			}	
		}
	}
	############################################################################################
	$button_PCGroups_Click={
		If ($global:Language -eq "Deutsch"){	
			Add-RichTextBoxTitle -text "Übertragung der Gruppen, benötigt Domänen-Admin-Rechte!"
			$ComputerOLD = Show-InputBox -title "Quell-Computer eingeben" -message "Bitte den Quell-Computernamen eingeben"
			$TestComputerOLD = Get-QADObject $ComputerOLD
			if ($TestComputerOLD -eq $null) {
				Show-MsgBox -Title "Fehler" -BoxType "OKOnly" -Prompt "Der Computer ist nicht existent!" -Icon "Exclamation"
				Add-RichTextBoxWarn -text "Computer nicht existent!"
			}
			else {
			Add-RichTextBox -text "Quell-Computer $ComputerOLD"
			$ComputerNEW = Show-InputBox -title "Neuen Computer eingeben" -message "Bitte den neuen Computernamen eingeben"
			$TestComputerNEW = Get-QADObject $ComputerNEW
				if ($TestComputerNEW -eq $NULL) {
				Show-MsgBox -Title "Fehler" -BoxType "OKOnly" -Prompt "Der Computer ist nicht existent!" -Icon "Exclamation"	
				Add-RichTextBoxWarn -text "Computer nicht existent!"
				}
				
				else {
					if ($ComputerNEW -eq $ComputerOLD) {
					Show-MsgBox -Title "Fehler" -BoxType "OKOnly" -Prompt "Zwei identische Computernamen eingegeben" -Icon "Exclamation"	
					Add-RichTextBoxWarn -text "Zwei identische Computernamen eingegeben!"
					}
					else {
						Add-RichTextBox -text "Neuer Computer $ComputerNew"	
						$CheckOK = Show-MsgBox -Title "Übertragung" -Prompt "Wollen Sie die Übertragung von $ComputerOLD nach $ComputerNEW durchfürhen?"-BoxType "YESNO" -Icon "Exclamation"
						if ($CheckOK -eq "YES") {
							#Move AD Groups von OLD to New
							Add-RichTextBox -text "Übertragung der Gruppen wird ausgeführt!"
							#Auslesen der Computergruppen
							#$ComputerGroups = Get-QADComputer $ComputerOLD -Properties Memberof | Select-Object -Expand memberof | Out-String
							Get-QADComputer $ComputerOLD -Properties Memberof | Select-Object -Expand memberof | ForEach-Object { Add-QADGroupMember -Identity $ComputerNEW -Members $_.Memberof  }
							Add-RichTextBox -text "Computergruppen der Station $ComputerOLD`n$Computergroups"
							#Add-QADGroupMember "Group" -Member "Computer"
							$ComputerOLD = $ComputerOLD +"$"
							$ComputerNEW2 = $ComputerNEW + "$"
							$Groups = get-QADMemberOf $ComputerOLD
							$Groups | foreach{
					       		if ($_.name -ne "Domain Computers") {
									Add-RichTextBox -text "$ComputerNew wird der Gruppe $_ zugewiesen"
					            	try{Add-QADGroupMember $_ -Member $ComputerNEW2}
									catch [Exception]{
										Add-RichTextBoxWarn $_.Exception.Message
									}
					   			}
							}		
						}
						if ($CheckOK -eq "NO") {
							Add-RichTextBoxWarn -text "Übertragung wurde abgebrochen!"
						}	
					}			
				}
			}
		}
		If ($global:Language -eq "English"){	
			Add-RichTextBoxTitle -text "Transferring Computergroups, Domain Admin rights needed!"
			$ComputerOLD = Show-InputBox -title "Enter Source Computer Name" -message "Please enter the source Computername"
			$TestComputerOLD = Get-QADObject $ComputerOLD
			if ($TestComputerOLD -eq $null) {
				Show-MsgBox -Title "Error" -BoxType "OKOnly" -Prompt "Computer does not exist!" -Icon "Exclamation"
				Add-RichTextBoxWarn -text "Computer not existing!"
			}
			else {
			Add-RichTextBox -text "Source Computer $ComputerOLD"
			$ComputerNEW = Show-InputBox -title "Enter destination Computer" -message "Please enter the destination Computername"
			$TestComputerNEW = Get-QADObject $ComputerNEW
				if ($TestComputerNEW -eq $NULL) {
				Show-MsgBox -Title "Error" -BoxType "OKOnly" -Prompt "Computer does not exist!" -Icon "Exclamation"
				Add-RichTextBoxWarn -text "Computer not existing!"
				}
				
				else {
					if ($ComputerNEW -eq $ComputerOLD) {
					Show-MsgBox -Title "Error" -BoxType "OKOnly" -Prompt "You have entered two identical Computernames!" -Icon "Exclamation"	
					Add-RichTextBoxWarn -text "You have entered two identical Computernames!!"
					}
					else {
						Add-RichTextBox -text "Destination Computer $ComputerNew"	
						$CheckOK = Show-MsgBox -Title "Transferring" -Prompt "Do you want to transfert the Groups of $ComputerOLD to $ComputerNEW?"-BoxType "YESNO" -Icon "Exclamation"
						if ($CheckOK -eq "YES") {
							#Move AD Groups von OLD to New
							Add-RichTextBox -text "Transferring groups!"
							#Auslesen der Computergruppen
							#$ComputerGroups = Get-QADComputer $ComputerOLD -Properties Memberof | Select-Object -Expand memberof | Out-String
							Get-QADComputer $ComputerOLD -Properties Memberof | Select-Object -Expand memberof | ForEach-Object { Add-QADGroupMember -Identity $ComputerNEW -Members $_.Memberof  }
							Add-RichTextBox -text "Computergroups of $ComputerOLD`n$Computergroups"
							#Add-QADGroupMember "Group" -Member "Computer"
							$ComputerOLD = $ComputerOLD +"$"
							$ComputerNEW2 = $ComputerNEW + "$"
							$Groups = get-QADMemberOf $ComputerOLD
							$Groups | foreach{
					       		if ($_.name -ne "Domain Computers") {
									Add-RichTextBox -text "$ComputerNew assigned to $_"
					            	try{Add-QADGroupMember $_ -Member $ComputerNEW2}
									catch [Exception]{
										Add-RichTextBoxWarn $_.Exception.Message
									}
					   			}
							}		
						}
						if ($CheckOK -eq "NO") {
							Add-RichTextBoxWarn -text "Transferring cancelled!"
						}	
					}			
				}
			}
		}
	}
	############################################################################################
	$button_debug_Click={
		$Command_debug = $textbox_debug.Text
		Get-ComputerTxtBox
		Add-RichTextBox -text "$command_debug"
		try {
			$result = Invoke-Expression $Command_debug | Out-String -Width $richtextbox_output.Width
			Add-RichTextBox -text "$result"
		}
		catch [Exception]{
			Add-RichTextBoxWarn $_.Exception.Message
		}
	}
	############################################################################################
	$button_listvariables_click={
		$Variables = Get-Variable | Out-String
		Add-RichTextBox -text "$Variables"
	}
	############################################################################################
	$button_openc_Click={
		explorer.exe \\$ComputerName\c$
	}
	############################################################################################
	$button_mappeddrives_Click={
		Get-ComputerTxtBox
		if ($global:Language -eq "Deutsch"){
			Add-RichTextBoxTitle -text "Anzeigen der gemappten Laufwerke des PCs $Computername"	
		}
		if ($global:Language -eq "English"){
			Add-RichTextBoxTitle -text "Showing mapped drives - $Computername"	
		}	
		$Mappeddrives = get-wmiobject -class "Win32_MappedLogicalDisk" -namespace "root\CIMV2" -computername $Computername | Select DeviceID,ProviderName |Out-String
		Add-RichTextBox -text "$Mappeddrives"
	}
	############################################################################################
	$button_hosts_Click={
		Get-ComputerTxtBox
		if ($global:Language -eq "Deutsch"){	
			Add-RichTextBoxTitle -text "Anzeigen des Hostsfile von $Computername"
		}
		if ($global:Language -eq "English"){	
			Add-RichTextBoxTitle -text "Showing Hostsfile of $Computername"
		}	
		$Hostsfile = Get-Content "\\$computername\c$\windows\system32\drivers\etc\hosts" | Out-String -Width $richtextbox_output.Width
		Add-RichTextBox -text $Hostsfile
	}
	############################################################################################
	$button_compmgmt_Click={
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "Compmgmt $Computername)"
		$command="compmgmt.msc"
		$arguments = "/computer:$ComputerName"
		Start-Process $command $arguments
	}
	############################################################################################
	$button_localadmins_Click={
		Get-ComputerTxtBox
		if ($global:Language -eq "Deutsch"){	
			Add-RichTextBoxTitle -text "Anzeigen der Lokalen Admins des Computers $Computername"
		}
		if ($global:Language -eq "English"){	
			Add-RichTextBoxTitle -text "Showing local Admins of $Computername"
		}
		$LocalAdmins = Get-LocalAdmins $ComputerName |Out-String -Width $richtextbox_output.Width
		Add-RichTextBox -text $LocalAdmins
	}
	############################################################################################
	#endregion buttons
	#region Textboxes
	#-------#############################################################################				
	#-------#!!!!!!!!!!!!!!!!!!!!!!!!!!!T E X T B O X E S!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	#-------#############################################################################
	$textbox_computername_KeyPress=[System.Windows.Forms.KeyPressEventHandler]{
		If ($_.KeyChar -eq 13){
			$button_Check.PerformClick()
			$richtextbox_output.Focus()
		}
	}
	############################################################################################
	$textbox_computername.CharacterCasing = 'Upper'
	############################################################################################
	$textbox_computername_TextChanged={
		$toolstrip_OSStatus.Text = ""
		$toolstrip_UptimeStatus.Text = ""
		if ($textbox_computername.Text -eq "") {
			$textbox_computername.BackColor =  [System.Drawing.Color]::FromArgb(255, 128, 128);
			Add-RichTextBoxTitle -text "Please Enter a ComputerName"
		}
		if ($textbox_computername.Text -ne "") {
			$textbox_computername.BackColor =  [System.Drawing.Color]::FromArgb(255, 203, 26)
		}
	}
	############################################################################################
	$textbox_services_MouseClick=[System.Windows.Forms.MouseEventHandler]{
		$textbox_services.Text = ""
	}
	############################################################################################
	$textbox_username_KeyPress=[System.Windows.Forms.KeyPressEventHandler]{
		Get-ComputerTxtBox
		If ($_.KeyChar -eq 13){
			$button_GetPC.PerformClick()
			$richtextbox_output.Focus()
		}
	}
	############################################################################################
	$textbox_username_Click={
		$textbox_username.Text =""
	}
	############################################################################################
	$textbox_computername_Click={
		$textbox_computername.Text =""	
	}
	############################################################################################
	$textbox_debug_KeyPress=[System.Windows.Forms.KeyPressEventHandler]{
		If ($_.KeyChar -eq 13){
			$button_debug.performClick()
		}
	}
	#endregion textboxes
	#region Richtextbox
	#-------#############################################################################				
	#-------#!!!!!!!!!!!!!!!!!!!!!!!!!R I C H T E X T B O X !!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	#-------#############################################################################
	$richtextbox_output_TextChanged={
		#Scroll to Bottom when text is changed
		$richtextbox_output.SelectionStart=$richtextbox_output.Text.Length
		$richtextbox_output.ScrollToCaret()	
	}
	#endregion richtextbox
	#region Toolstrips
	#-------#############################################################################				
	#-------#!!!!!!!!!!!!!!!!!!!!!!!!!!!T O O L S T R I P S!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	#-------#############################################################################
	$toolstrip_user_status_Click={
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Profile folder"
	    # OS Version bestimmen (Bei 8/8.1 andere Abfrage für User)
	    $OS = get-wmiobject -class win32_operatingsystem -ComputerName $ComputerName | select-object -expand Version
	    $Username = (get-wmiobject -class win32_computersystem -ComputerName $ComputerName | select-object -expand username).Split("\")[1]
	    Add-RichTextBox -text $Splitversion
	    if($OS -eq  "6.3.9600") { 
		        $Profilepath = "$Profilefolder$username.v2"
	    }
		else {
	            $Profile = "$Profilefolder$username.v2"
	    }
		Add-RichTextBox -text $Profilepath
	    Explorer $Profilepath
	}
	############################################################################################
	$toolstrip_home_status_Click={
		Get-ComputerTxtBox
		Add-RichTextBoxTitle -text "$ComputerName - Profile folder"
	    # OS Version bestimmen (Bei 8/8.1 andere Abfrage für User)
	    $OS = get-wmiobject -class win32_operatingsystem -ComputerName $ComputerName | select-object -expand Version
	    $Username = (get-wmiobject -class win32_computersystem -ComputerName $ComputerName | select-object -expand username).Split("\")[1]
	    Add-RichTextBox -text $Splitversion
	    if($OS -eq  "6.3.9600") { 
			        $Homepath = "$Homefolder$Username.v4"
	    }
		else {
	                $Homepath = "$Homefolder$Username.v2"
	    }
		Add-RichTextBox -text $Homepath
	    Explorer $Homepath
	}
	#endregion toolstrips
	#region MenuItems
	#-------#############################################################################				
	#-------#!!!!!!!!!!!!!!!!!!!!!!!!!!!M E N U I T E M S!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	#-------#############################################################################
	
	$aboutToolStripMenuItem_Click={Call-About_pff}
	############################################################################################
	$requestFeatureToolStripMenuItem_Click={Call-Feature_Request_pff}
	############################################################################################
	$changelogToolStripMenuItem_Click={Call-Changelog_pff}
	############################################################################################
	$quitToolStripMenuItem_Click={$MainForm.Close()}
	############################################################################################
	$exportLogToolStripMenuItem_Click={
		$timestamp = Get-Date -Format "dd-MM-yyyy HH-mm"
		$Filepath = "$Outfile" + "log-$timestamp"
		($richtextbox_output.Text | Out-String) -replace "`n", "`r`n" | Out-File -FilePath "$Filepath.log"
		if ($global:Language -eq "Deutsch"){	
			Add-RichTextBoxOK -text "File wurde in $Filepath.log gespeichert."
		}
		if ($global:Language -eq "English"){	
			Add-RichTextBoxOK -text "File saved in $Filepath.log."
		}	
	}
	############################################################################################
	$optionsToolStripMenuItem_Click={Call-Options_pff}
	############################################################################################
	$aDExplorerToolStripMenuItem_Click={
		Start-Process '$global:Sysinternals\AdExplorer.exe'
	}
	############################################################################################
	$procexpToolStripMenuItem_Click={
		Start-Process '$global:Sysinternals\procexp.exe'	
	}
	############################################################################################
	$procmonToolStripMenuItem_Click={
		Start-Process '$global:Sysinternals\Procmon.exe'	
	}
	############################################################################################
	$nirLauncherToolStripMenuItem1_Click={
		Start-Process '$global:Nirlauncher\NirLauncher.exe'
	}
	#endregion MenuItems
	############################################################################################
	#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	############################################################################################
	#endregion code
	#------------------------------------------------------------------------------------------#
	#region deaktiviert
	############################################################################################
	#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!F O R M   C L O S I N G !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	############################################################################################
	$MainForm_FormClosed=[System.Windows.Forms.FormClosedEventHandler]{
		$Exportpath = $Confpath + "/Config.csv"
		New-Object -TypeName PSCustomObject -Property @{
			"global:Language" = $Language
			"global:Profilefolder" = $Profilefolder
			"global:Homefolder" = $Homefolder
			"global:Outfile" = $Outfile
			"global:SiteName" = $SiteName
			"global:SCCMServer" = $SCCMServer
			"global:SCCMNameSpace" = $SCCMNameSpace
			"global:SCCMEnabled" = [bool]$SCCMEnabled
			"global:Nirlauncher" = $Nirlauncher
			"global:Sysinternals" = $Sysinternals
			"global:CmRCViewer" = $CmRCViewer
		} | Export-Csv -Path $Exportpath -NoTypeInformation
	}
	############################################################################################
	#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	############################################################################################
	#endregion deaktiviert
	#------------------------------------------------------------------------------------------#	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$MainForm.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MainForm_richtextbox_output = $richtextbox_output.Text
		$script:MainForm_textbox_services = $textbox_services.Text
		$script:MainForm_textbox_debug = $textbox_debug.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$richtextbox_output.remove_TextChanged($richtextbox_output_TextChanged)
			$button_Remotecontrol.remove_Click($button_Remotecontrol_Click)
			$button_WOL.remove_Click($button_WOL_Click)
			$button_DNScheck.remove_Click($button_DNScheck_Click)
			$button_ResetPWD.remove_Click($button_ResetPWD_Click)
			$button_Userunlock.remove_Click($button_Userunlock_Click)
			$button_shutdown.remove_Click($button_shutdown_Click)
			$Button_gpupdate.remove_Click($Button_gpupdate_Click)
			$button_C.remove_Click($button_C_Click)
			$button_ipconfig.remove_Click($button_ipconfig_Click)
			$button_cmd.remove_Click($button_cmd_Click)
			$button_psremote.remove_Click($button_psremote_Click)
			$button_ping.remove_Click($button_ping_Click)
			$button_rdp.remove_Click($button_rdp_Click)
			$button_MSRA.remove_Click($button_MSRA_Click)
			$button_compmgmt.remove_Click($button_compmgmt_Click)
			$button_localadmins.remove_Click($button_localadmins_Click)
			$button_folderrights.remove_Click($button_folderrights_Click)
			$button_profilerights.remove_Click($button_profilerights_Click)
			$button_homerights.remove_Click($button_homerights_Click)
			$button_PCGroups.remove_Click($button_PCGroups_Click)
			$button_ComputerGroups.remove_Click($button_ComputerGroups_Click)
			$button_autostart.remove_Click($button_autostart_Click)
			$button_installedSoftware.remove_Click($button_installedSoftware_Click)
			$button_printer.remove_Click($button_printer_Click)
			$button_USBDevice.remove_Click($button_USBDevice_Click)
			$button_systemtype.remove_Click($button_systemtype_Click)
			$button_memory.remove_Click($button_memory_Click)
			$button_processor.remove_Click($button_processor_Click)
			$button_mainboard.remove_Click($button_mainboard_Click)
			$button_hosts.remove_Click($button_hosts_Click)
			$button_checkWLAN.remove_Click($button_checkWLAN_Click)
			$button_dns2.remove_Click($button_dns2_Click)
			$button_dns1.remove_Click($button_dns1_Click)
			$button_routetable.remove_Click($button_routetable_Click)
			$button_ipconfig2.remove_Click($button_ipconfig2_Click)
			$button_proclasthour.remove_Click($button_proclasthour_Click)
			$button_process.remove_Click($button_process_Click)
			$button_servicesstop.remove_Click($button_servicesstop_Click)
			$button_servicesstart.remove_Click($button_servicesstart_Click)
			$button_servicesrestart.remove_Click($button_servicesrestart_Click)
			$button_servicescheck.remove_Click($button_servicescheck_Click)
			$textbox_services.remove_MouseClick($textbox_services_MouseClick)
			$button_servicesnonstandard.remove_Click($button_servicesnonstandard_Click)
			$button_servicesautostop.remove_Click($button_servicesautostop_Click)
			$button_servicesauto.remove_Click($button_servicesauto_Click)
			$button_servicesrunning.remove_Click($button_servicesrunning_Click)
			$button_services.remove_Click($button_services_Click)
			$button_MMCServices.remove_Click($button_MMCServices_Click)
			$button_mappeddrives.remove_Click($button_mappeddrives_Click)
			$button_openc.remove_Click($button_openc_Click)
			$button_deleteoffline.remove_Click($button_deleteoffline_Click)
			$button_volumes.remove_Click($button_volumes_Click)
			$button_diskusage.remove_Click($button_diskusage_Click)
			$button_eventlognames.remove_Click($button_eventlognames_Click)
			$button_eventlog20.remove_Click($button_eventlog20_Click)
			$button_eventlogmmc.remove_Click($button_eventlogmmc_Click)
			$button_getadvertisedsoftware.remove_Click($button_getadvertisedsoftware_Click)
			$button_softwareinventory.remove_Click($button_softwareinventory_Click)
			$button_machinepolicy.remove_Click($button_machinepolicy_Click)
			$button_listvariables.remove_Click($button_listvariables_Click)
			$textbox_debug.remove_KeyPress($textbox_debug_KeyPress)
			$button_debug.remove_Click($button_debug_Click)
			$MainForm.remove_FormClosed($MainForm_FormClosed)
			$MainForm.remove_Load($OnLoadFormEvent)
			$textbox_computername.remove_KeyPress($textbox_computername_KeyPress)
			$textbox_computername.remove_Click($textbox_computername_Click)
			$textbox_computername.remove_TextChanged($textbox_computername_TextChanged)
			$toolstrip_user_status.remove_Click($toolstrip_user_status_Click)
			$toolstrip_home_status.remove_Click($toolstrip_home_status_Click)
			$button_Check.remove_Click($button_check_click)
			$aboutToolStripMenuItem.remove_Click($aboutToolStripMenuItem_Click)
			$textbox_username.remove_KeyPress($textbox_username_KeyPress)
			$textbox_username.remove_Click($textbox_username_Click)
			$button_GetPC.remove_Click($button_GetPC_Click)
			$requestFeatureToolStripMenuItem.remove_Click($requestFeatureToolStripMenuItem_Click)
			$quitToolStripMenuItem.remove_Click($quitToolStripMenuItem_Click)
			$button_WLAN.remove_Click($button_WLAN_Click)
			$changelogToolStripMenuItem.remove_Click($changelogToolStripMenuItem_Click)
			$exportLogToolStripMenuItem.remove_Click($exportLogToolStripMenuItem_Click)
			$aDExplorerToolStripMenuItem.remove_Click($aDExplorerToolStripMenuItem_Click)
			$procexpToolStripMenuItem.remove_Click($procexpToolStripMenuItem_Click)
			$procmonToolStripMenuItem.remove_Click($procmonToolStripMenuItem_Click)
			$nirLauncherToolStripMenuItem1.remove_Click($nirLauncherToolStripMenuItem1_Click)
			$optionsToolStripMenuItem.remove_Click($optionsToolStripMenuItem_Click)
			$MainForm.remove_Load($Form_StateCorrection_Load)
			$MainForm.remove_Closing($Form_StoreValues_Closing)
			$MainForm.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	#
	# MainForm
	#
	$MainForm.Controls.Add($richtextbox_output)
	$MainForm.Controls.Add($tabcontrol_Home)
	$MainForm.Controls.Add($statusbar1)
	$MainForm.Controls.Add($toolstrip2)
	$MainForm.Controls.Add($toolstrip1)
	$MainForm.Controls.Add($menustrip1)
	$MainForm.AutoSize = $True
	$MainForm.BackColor = 'Control'
	$MainForm.ClientSize = '1188, 807'
	#region Binary Data
	$MainForm.Icon = [System.Convert]::FromBase64String('
AAABAAEAICAAAAAAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAACAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAMzMzAXS0tIo2NjYi9TT1N7V1db/1tXX/9bW1//W1tf/1tbX/9bW1//W1tf/
1tbX/9bW1//W1tf/1tbX/9bW1//W1tf/1tbX/9bW1//W1tf/1tbX/9bV1//V1db/0tLT/9HR0t/X
19eM0tLSKP///wUAAAAAAAAAAAAAAADb29sO1tbZct/f3+be1NL/1Lmw/82om//Np5r/zqia/86o
mv/OqZv/z6mb/8+pm//PqZv/zqib/86onP/OqJv/zqeb/86mm//NpZv/zKSa/8ujmv/KoZn/yZ+Z
/8memf/Ko5//1b27/9zX1//V1dbo0dHRdN/f3xAAAAAA4+PjCdnZ2XLn5+jx1Lat/6pjSv+fTTD/
m0Yl/5xGJf+cRiX/nEcl/5xHJf+cRyX/nEcl/5xGJf+cRSX/m0Ul/5pDJf+ZQiX/mUEk/5g+JP+X
PSP/lToi/5M2Iv+TNCL/kTEi/5ExI/+WPDL/r2tk/+LZ1//Z2drx0dHRdP///wXd3d1S5eTk5s6s
oP+aQSH/mkIh/5tDIf+bRCL/nEUj/5xGI/+cRiP/nUcj/51HI/+cRiP/nEYj/5tFIv+bRCL/m0Mh
/5pCIf+ZQCH/mD4g/5c9IP+XOiD/lDce/5I0Hv+SMR7/kC4e/44pHP+LJRr/mD83/+PZ2P/W1tfo
0dHYJ+bk5rncycH/pVg6/5tEIf+bRSL/nEYj/51II/+dSCP/nUkk/51JJP+eSiT/nUok/51KJP+d
SST/nUgj/51HI/+cRiP/m0Ui/5tDIf+ZQSH/mD8h/5g9IP+WOyD/lTgf/5M1Hv+SMR7/jy0d/40p
HP+LJRr/rmtk/93Y2P/Y1tqL6eXl7saZiP+cRyT/nEcj/51II/+dSST/nUsk/55MJP+eTCT/n0wk
/59NJP+fTCT/n0wk/55LJP+eSyT/nksk/51II/+cSCP/nEcj/5tEIf+aQiH/mUEh/5c+IP+WPCD/
lTkf/5M2Hv+RMR7/jy0d/40pHP+XOzL/1b26/9PT1N/m29f9uH5k/51JI/+eSiT/n0sk/6ZdOP+y
cE//snFQ/7JxUP+ycVD/snFQ/7JxUP+ycVD/snFQ/7JxUP+ycE//sm9P/7FuT/+wbU//sGtO/69q
Tv+uaU7/rGZN/6xkTP+qYkz/qV5L/5U6I/+SMR7/kC0e/5EwI//Kop//1tbX/+TVz/60d1v/nUoj
/59MJP+mWzX/4s7E/9zBtP/cwrT/3cO1/93Dtf/exLb/3sS2/97Etv/exLb/3sS2/97Etv/exLb/
3sO2/93Dtf/dwrX/3cG1/9zAtP/bv7T/276z/9q9s//o2dP/wpCC/5I1Hv+RMB7/kS8g/8iclv/Y
2Nn/5dbP/rV5W/+eTCT/oE4k/6lgO//jzsP/oVMo/6JUKP+jVSn/o1Up/7p/X//FlHn/xZR5/6Vb
MP+iVCj/olMo/6FSKP+hUSj/oVEo/6BPJ/+fTSf/nkwn/51JJv+cRyX/m0Qk/8eaiv/JnZD/lDge
/5IzHv+SMiH/yZ6X/9nY2f/m19D+tXpb/59NJP+gTyT/qWI7/+PPw/+hUSX/oVIl/6JTJv+iUyb/
pVsw/6hgNv+oYDb/oVMm/6FSJf+hUiX/oFAl/6BPJP+gTiT/n00k/55MJP+dSiT/nEgj/5tGIv+a
QyH/x5mI/8qekP+WOiD/kzYe/5M0If/Kn5j/2dna/+fY0P62e1z/oE8k/6FRJf+rZDz/5NDE/6JV
J//CkXT/tXlV/6ZcL/+jVSb/o1Um/6JUJv+iVCb/olQm/6JTJv+hUiX/oVIl/6FQJf+gTyT/oE4k
/59NJP+dSiT/nUkj/5xGI//Im4n/y6CR/5c9IP+WOSD/lDch/8qgmP/Z2dr/59jR/rd8XP+hUST/
oVIm/6tlPf/k0MT/olQl/7JyS//WtJ//z6qS/6NVJv+jVSb/o1Um/6NVJv+jVSb/olQm/6JTJv+i
UyX/oVIl/6BQJP+gTyT/oE4k/55MJP+dSiT/nUgj/8mcif/LoZH/mD4g/5Y7IP+WOiL/y6KY/9nZ
2v/n2dH+t31c/6FSJf+iUyb/q2U9/+TQxf+jVif/z6eP/82ki/+qYjX/pFYm/6RWJv+kVib/qV8y
/8eafv/Trpn/0ayX/7mAX/+iUyb/oVEl/6BQJP+gTiT/n00k/55LJP+dSST/yZ2K/8uhkf+YQCH/
lz0g/5c8Iv/Mo5n/2tna/+ja0v64fl3/olMm/6JUJv+sZj3/5dLF/61pP/+6gWD/rmlA/65pQP+u
aUD/rmlA/65pQP+6f13/7uDZ/+bTxv/t3tX/3sOz/69sRf+sZj//q2U+/6pjPf+qYj7/qWE9/6lf
Pf/OqJf/zKKS/5pCIf+ZPyH/mD4j/8ykmf/a2dr/6NrS/rh/Xf+iVCb/o1Um/6tkOf/dw7T/27+u
/9zArv/cwK//3cGv/93Br//dwa//3sGw/+LKvP/t39f/wo5u/9Ktl//x5t//3sKx/9y/r//cv6//
27+v/9u9rv/ava7/2ryt/+LMw//FloL/mkMh/5lAIf+ZPyP/zaSZ/9rZ2v/o2tL+uH9d/6JUJv+j
VSb/pVkq/7FvSf+2eFL/tnhS/7Z4Uv+2eVL/tnlS/7Z5Uv+2eVL/wY1s//Pp4//38u7/+fXz/+HJ
u/+3e1f/tHZR/7R1Uf+0dFH/s3JQ/7JxUP+ycU//sW9P/6ZaOv+bRCH/mUEh/5lAI//Nppr/2tna
/+ja0v65gF3/o1Um/6RWJv+tZz3/6djN//Dl3//w5t//8Obf//Hm4P/x5uD/8ebg//Ln4P/z6uT/
7uHY/7V2UP/JnIH/+fXy//Ln4f/y5+D/8ebg//Hm4P/x5d//8OTe//Dk3v/07uv/zaWT/5tFIv+a
QiH/mkEj/86mmv/a2dr/6NrS/rmAXf+jVSb/pFYm/61nPv/l0cb/qGAy/6lhM/+pYTP/qWEz/6lh
M/+pYTP/qWEz/7V3UP/r29H/4cm6/+nXzf/avKr/q2M4/6heMv+nXTL/p10y/6ZbMv+lWTH/pVgw
/82lkf/NpZP/nEYj/5tDIf+aQiP/zaaZ/9rZ2v/o2tL+uYBd/6NVJv+kVib/rWc+/+XRxf+kVyb/
pVgn/6VYJ/+lWCf/pVgn/6VYJ/+lWCf/p10t/7Z6U/+8hGD/u4Jf/69sRP+kVif/o1Um/6JUJv+i
Uyb/oVIl/6BQJf+gTiT/y6CL/82lk/+cRyP/m0Mh/5pDI//Nppn/2tna/+ja0v65gF7/pFYm/6RW
J/+taD7/5dHF/6RXJv+lWCf/pVgn/6VYJ/+lWCf/pVgn/6VYJ/+lWCf/pVgn/6VYJ/+lVyf/pFYn
/6RWJv+jVSb/o1Um/6JUJv+hUib/oFAl/6BOJP/LoIv/zaWS/5xHI/+bRCL/m0Mk/86nmv/a2dr/
6NnR/rmAXv+kVib/pFYn/6xnPP/l08f/wpBw/8ORcf/DkXL/w5Fy/8OScv/DknL/xJJy/8SScv/E
knL/xJJy/8SRc//DkXL/w5Fy/8ORcv/DkXL/wpBy/8GOcv/AjXH/wIxx/9zAsv/LoY//nEcj/5tE
Iv+bRCT/zqea/9nZ2v/n2dH+uIBd/6NVJv+kVif/plos/8KQcv/PqJD/z6iQ/9CpkP/QqZD/0KmR
/9Cpkf/QqpH/0KqR/9Cqkf/QqpH/0KmR/9Cpkf/QqZH/0KmR/8+pkf/PqJD/zqeQ/82lkP/NpJD/
zaWR/61pSf+cRyP/m0Mh/5pDI//Nppn/2dna/+fY0P64f13/o1Um/6RWJv+kVif/pFYn/6VYJ/+l
WCf/pVgn/6VYJ/+lWCf/yJl8/9Kvmf+lWCf/pVgn/6RXJ/+kVif/pFYn/61oP//p18//rWhA/6JT
Jv+hUSX/oE8k/6BOJP+fTST/nUkj/5xGI/+bQyH/mkIj/82mmf/Z2dr/5tjQ/rh/Xf+jVSb/pFYm
/6RWJ/+kVif/pVcn/6VYJ/+lWCf/pVgn/6VYJ//LoYb/6tzS/6xmOf+kVyb/pFYm/6NVJv+kWCr/
w5Fy//Xv6/+saD//olMm/6BRJP+gTyT/oE4k/59MJP+dSSP/nEYj/5tCIf+aQSP/zKWY/9nZ2f/l
18/+uH5d/6NVJv+kVib/pFYn/6RWJ/+kVyf/pVcn/6VYJ/+lWCf/pVgn/7V3T//y6uX/5dHF/9u/
rf/bvqz/2r6s/93Ds//w5uD/2r6t/6NWKv+iUyX/oFAk/6BOJP+fTST/nksk/51JI/+bRSL/mkIh
/5lBI//LpJj/2NjZ/+bY0f64gF//olQm/6NVJv+kVib/pFYm/6RWJ/+kVif/pFYn/6RXJ/+lWCf/
pVgn/69tRP/avav/6NbM/+nXzv/o1s3/5NDF/8icgv+jVij/olMm/6FSJf+gTyT/oE4k/59MJP+e
SyT/nEgj/5tEIf+ZQSH/mUEl/8ylmv/Y2Nn/6uPe+sGSd/+iVCb/o1Um/6NVJv+jVSb/pFYm/6RW
Jv+kVif/pFYn/6VXJ/+lVyf/pFYn/6RWJ/+kVif/pFYm/6NVJv+jVSb/olQm/6JTJv+hUiX/oVAl
/6BOJP+fTST/nksk/51JJP+bRiL/mkIh/5k/If+dSS7/1Lau/9jX2N7w7+/b1Lem/6ZbMP+iVCb/
o1Um/6NVJv+kVib/pFYm/6RWJv+kVib/pFYn/6RWJ/+kVif/pFYm/6RWJv+kVib/o1Um/6JUJv+i
VCb/oVIm/6FRJf+gTyT/n00k/59MJP+dSiT/nUgj/5tEIv+ZQSH/mD4g/6ddR//e1NH/2trci/Hx
8X3s5+Tat35c/6JTJv+iVCb/olQm/6NVJv+kVib/pFYm/6RWJv+kVif/pFYm/6RWJv+kVib/o1Um
/6NVJv+iVCb/olQm/6JTJv+hUSX/oFAl/6BPJP+fTST/nksj/51JI/+cRiP/mkMh/5lAIf+XPSD/
0bCn/+Hh4efY2Ngn/+3/DvLv8mPo4Nzst31d/6ZbMP+iUyb/olQm/6JUJv+iVCb/o1Um/6NVJv+j
VSb/o1Um/6JUJv+iVCb/olQm/6JTJv+hUiX/oVEl/6BPJP+gTiT/oE4l/51LJP+dSiT/nEcj/5tE
Iv+aQyL/olI3/8qkmP/o6Ojy2dnZcszMzAUAAAAA4+PjCfLy8mLr5uPa1Lal/8GQdf+3flz/t31b
/7d9W/+4flv/uH5c/7h+XP+4flz/uH1c/7h9XP+4fVz/t3xc/7d8W/+3fFv/tnpa/7Z5Wv+1eVv/
s3Za/7N1Wv+yc1n/tHdf/8OVg//ZxL3/5eTk5dvZ23Lb29sOAAAAAAAAAAAAAAAA7e3tDvHx8X3w
7+3b6uLd+uXXzv7l187+5tfO/ubYz/7m2ND+59jQ/ufZ0P7n2ND+59jQ/ufY0P7n2ND+59jQ/ubY
0P7m2ND+5tfP/uXWz/7l1c7+5NXO/uPUzf7l2dT86OTj7ubm5rjc3NxR4+PjCQAAAAAAAAAA8AAA
D+AAAAfAAAADgAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAHA
AAAD4AAAB/AAAA8=')
	#endregion
	$MainForm.MainMenuStrip = $menustrip1
	$MainForm.MinimumSize = '1194, 823'
	$MainForm.Name = "MainForm"
	$MainForm.StartPosition = 'CenterScreen'
	$MainForm.Text = "Main Form"
	$MainForm.add_FormClosed($MainForm_FormClosed)
	$MainForm.add_Load($OnLoadFormEvent)
	#
	# richtextbox_output
	#
	$richtextbox_output.BackColor = 'Control'
	$richtextbox_output.BorderStyle = 'FixedSingle'
	$richtextbox_output.DetectUrls = $False
	$richtextbox_output.Dock = 'Fill'
	$richtextbox_output.Font = "Lucida Console, 9pt"
	$richtextbox_output.HideSelection = $False
	$richtextbox_output.Location = '0, 196'
	$richtextbox_output.Name = "richtextbox_output"
	$richtextbox_output.ReadOnly = $True
	$richtextbox_output.ScrollBars = 'Vertical'
	$richtextbox_output.Size = '1188, 591'
	$richtextbox_output.TabIndex = 1
	$richtextbox_output.Text = ""
	$richtextbox_output.add_TextChanged($richtextbox_output_TextChanged)
	#
	# tabcontrol_Home
	#
	$tabcontrol_Home.Controls.Add($tabpage1)
	$tabcontrol_Home.Controls.Add($tabpage2)
	$tabcontrol_Home.Controls.Add($tabpage3)
	$tabcontrol_Home.Controls.Add($tabpage4)
	$tabcontrol_Home.Controls.Add($tabpage5)
	$tabcontrol_Home.Controls.Add($tabpage6)
	$tabcontrol_Home.Controls.Add($tabpage8)
	$tabcontrol_Home.Controls.Add($tabpage10)
	$tabcontrol_Home.Controls.Add($tabpage_debug)
	$tabcontrol_Home.Dock = 'Top'
	$tabcontrol_Home.Location = '0, 63'
	$tabcontrol_Home.Name = "tabcontrol_Home"
	$tabcontrol_Home.SelectedIndex = 0
	$tabcontrol_Home.Size = '1188, 133'
	$tabcontrol_Home.TabIndex = 5
	#
	# tabpage1
	#
	$tabpage1.Controls.Add($button_Remotecontrol)
	$tabpage1.Controls.Add($button_WOL)
	$tabpage1.Controls.Add($button_DNScheck)
	$tabpage1.Controls.Add($button_ResetPWD)
	$tabpage1.Controls.Add($button_Userunlock)
	$tabpage1.Controls.Add($button_shutdown)
	$tabpage1.Controls.Add($Button_gpupdate)
	$tabpage1.Controls.Add($button_C)
	$tabpage1.Controls.Add($button_ipconfig)
	$tabpage1.Controls.Add($button_cmd)
	$tabpage1.Controls.Add($button_psremote)
	$tabpage1.Controls.Add($button_ping)
	$tabpage1.Controls.Add($button_rdp)
	$tabpage1.Controls.Add($button_MSRA)
	$tabpage1.Location = '4, 22'
	$tabpage1.Name = "tabpage1"
	$tabpage1.Padding = '3, 3, 3, 3'
	$tabpage1.Size = '1180, 107'
	$tabpage1.TabIndex = 0
	$tabpage1.Text = "Home"
	$tabpage1.UseVisualStyleBackColor = $True
	#
	# button_Remotecontrol
	#
	$button_Remotecontrol.Font = "Microsoft Sans Serif, 7.5pt"
	#region Binary Data
	$button_Remotecontrol.Image = [System.Convert]::FromBase64String('
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
z7n/A0DynXoKxZDhAAAAAElFTkSuQmCC')
	#endregion
	$button_Remotecontrol.ImageAlign = 'TopCenter'
	$button_Remotecontrol.Location = '77, 7'
	$button_Remotecontrol.Name = "button_Remotecontrol"
	$button_Remotecontrol.Size = '64, 94'
	$button_Remotecontrol.TabIndex = 15
	$button_Remotecontrol.Text = "RemoteControl"
	$button_Remotecontrol.TextAlign = 'BottomCenter'
	$button_Remotecontrol.UseVisualStyleBackColor = $True
	$button_Remotecontrol.add_Click($button_Remotecontrol_Click)
	#
	# button_WOL
	#
	$button_WOL.Font = "Microsoft Sans Serif, 7.5pt"
	#region Binary Data
	$button_WOL.Image = [System.Convert]::FromBase64String('
/9j/4AAQSkZJRgABAQEASABIAAD/7gAOQWRvYmUAZAAAAAAB/+ESvkV4aWYAAE1NACoAAAAIAAwB
AAADAAAAAQAtAAABAQADAAAAAQBBAAABAgADAAAAAwAAAJ4BBgADAAAAAQACAAABEgADAAAAAQAB
AAABFQADAAAAAQADAAABGgAFAAAAAQAAAKQBGwAFAAAAAQAAAKwBKAADAAAAAQACAAABMQACAAAA
HgAAALQBMgACAAAAFAAAANKHaQAEAAAAAQAAAOYAAAESAAgACAAIAEgAAAABAAAASAAAAAEAAEFk
b2JlIFBob3Rvc2hvcCBDUzUuMSBXaW5kb3dzADIwMTQ6MTA6MTMgMjE6NDU6MDQAAAOQAAAHAAAA
BDAyMjGgAgAEAAAAAQAAAC2gAwAEAAAAAQAAAEEAAAAAAAAABgEDAAMAAAABAAYAAAEaAAUAAAAB
AAABYAEbAAUAAAABAAABaAEoAAMAAAABAAIAAAIBAAQAAAABAAABcAICAAQAAAABAAARRgAAAAAA
AABIAAAAAQAAAEgAAAAB/9j/4gxYSUNDX1BST0ZJTEUAAQEAAAxITGlubwIQAABtbnRyUkdCIFhZ
WiAHzgACAAkABgAxAABhY3NwTVNGVAAAAABJRUMgc1JHQgAAAAAAAAAAAAAAAAAA9tYAAQAAAADT
LUhQICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABFjcHJ0
AAABUAAAADNkZXNjAAABhAAAAGx3dHB0AAAB8AAAABRia3B0AAACBAAAABRyWFlaAAACGAAAABRn
WFlaAAACLAAAABRiWFlaAAACQAAAABRkbW5kAAACVAAAAHBkbWRkAAACxAAAAIh2dWVkAAADTAAA
AIZ2aWV3AAAD1AAAACRsdW1pAAAD+AAAABRtZWFzAAAEDAAAACR0ZWNoAAAEMAAAAAxyVFJDAAAE
PAAACAxnVFJDAAAEPAAACAxiVFJDAAAEPAAACAx0ZXh0AAAAAENvcHlyaWdodCAoYykgMTk5OCBI
ZXdsZXR0LVBhY2thcmQgQ29tcGFueQAAZGVzYwAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAA
AAAAAAAAABJzUkdCIElFQzYxOTY2LTIuMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAWFlaIAAAAAAAAPNRAAEAAAABFsxYWVogAAAAAAAAAAAAAAAAAAAA
AFhZWiAAAAAAAABvogAAOPUAAAOQWFlaIAAAAAAAAGKZAAC3hQAAGNpYWVogAAAAAAAAJKAAAA+E
AAC2z2Rlc2MAAAAAAAAAFklFQyBodHRwOi8vd3d3LmllYy5jaAAAAAAAAAAAAAAAFklFQyBodHRw
Oi8vd3d3LmllYy5jaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AABkZXNjAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFjZSAtIHNS
R0IAAAAAAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFjZSAtIHNS
R0IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAsUmVmZXJlbmNlIFZpZXdpbmcgQ29u
ZGl0aW9uIGluIElFQzYxOTY2LTIuMQAAAAAAAAAAAAAALFJlZmVyZW5jZSBWaWV3aW5nIENvbmRp
dGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHZpZXcAAAAAABOk
/gAUXy4AEM8UAAPtzAAEEwsAA1yeAAAAAVhZWiAAAAAAAEwJVgBQAAAAVx/nbWVhcwAAAAAAAAAB
AAAAAAAAAAAAAAAAAAAAAAAAAo8AAAACc2lnIAAAAABDUlQgY3VydgAAAAAAAAQAAAAABQAKAA8A
FAAZAB4AIwAoAC0AMgA3ADsAQABFAEoATwBUAFkAXgBjAGgAbQByAHcAfACBAIYAiwCQAJUAmgCf
AKQAqQCuALIAtwC8AMEAxgDLANAA1QDbAOAA5QDrAPAA9gD7AQEBBwENARMBGQEfASUBKwEyATgB
PgFFAUwBUgFZAWABZwFuAXUBfAGDAYsBkgGaAaEBqQGxAbkBwQHJAdEB2QHhAekB8gH6AgMCDAIU
Ah0CJgIvAjgCQQJLAlQCXQJnAnECegKEAo4CmAKiAqwCtgLBAssC1QLgAusC9QMAAwsDFgMhAy0D
OANDA08DWgNmA3IDfgOKA5YDogOuA7oDxwPTA+AD7AP5BAYEEwQgBC0EOwRIBFUEYwRxBH4EjASa
BKgEtgTEBNME4QTwBP4FDQUcBSsFOgVJBVgFZwV3BYYFlgWmBbUFxQXVBeUF9gYGBhYGJwY3BkgG
WQZqBnsGjAadBq8GwAbRBuMG9QcHBxkHKwc9B08HYQd0B4YHmQesB78H0gflB/gICwgfCDIIRgha
CG4IggiWCKoIvgjSCOcI+wkQCSUJOglPCWQJeQmPCaQJugnPCeUJ+woRCicKPQpUCmoKgQqYCq4K
xQrcCvMLCwsiCzkLUQtpC4ALmAuwC8gL4Qv5DBIMKgxDDFwMdQyODKcMwAzZDPMNDQ0mDUANWg10
DY4NqQ3DDd4N+A4TDi4OSQ5kDn8Omw62DtIO7g8JDyUPQQ9eD3oPlg+zD88P7BAJECYQQxBhEH4Q
mxC5ENcQ9RETETERTxFtEYwRqhHJEegSBxImEkUSZBKEEqMSwxLjEwMTIxNDE2MTgxOkE8UT5RQG
FCcUSRRqFIsUrRTOFPAVEhU0FVYVeBWbFb0V4BYDFiYWSRZsFo8WshbWFvoXHRdBF2UXiReuF9IX
9xgbGEAYZRiKGK8Y1Rj6GSAZRRlrGZEZtxndGgQaKhpRGncanhrFGuwbFBs7G2MbihuyG9ocAhwq
HFIcexyjHMwc9R0eHUcdcB2ZHcMd7B4WHkAeah6UHr4e6R8THz4faR+UH78f6iAVIEEgbCCYIMQg
8CEcIUghdSGhIc4h+yInIlUigiKvIt0jCiM4I2YjlCPCI/AkHyRNJHwkqyTaJQklOCVoJZclxyX3
JicmVyaHJrcm6CcYJ0kneierJ9woDSg/KHEooijUKQYpOClrKZ0p0CoCKjUqaCqbKs8rAis2K2kr
nSvRLAUsOSxuLKIs1y0MLUEtdi2rLeEuFi5MLoIuty7uLyQvWi+RL8cv/jA1MGwwpDDbMRIxSjGC
Mbox8jIqMmMymzLUMw0zRjN/M7gz8TQrNGU0njTYNRM1TTWHNcI1/TY3NnI2rjbpNyQ3YDecN9c4
FDhQOIw4yDkFOUI5fzm8Ofk6Njp0OrI67zstO2s7qjvoPCc8ZTykPOM9Ij1hPaE94D4gPmA+oD7g
PyE/YT+iP+JAI0BkQKZA50EpQWpBrEHuQjBCckK1QvdDOkN9Q8BEA0RHRIpEzkUSRVVFmkXeRiJG
Z0arRvBHNUd7R8BIBUhLSJFI10kdSWNJqUnwSjdKfUrESwxLU0uaS+JMKkxyTLpNAk1KTZNN3E4l
Tm5Ot08AT0lPk0/dUCdQcVC7UQZRUFGbUeZSMVJ8UsdTE1NfU6pT9lRCVI9U21UoVXVVwlYPVlxW
qVb3V0RXklfgWC9YfVjLWRpZaVm4WgdaVlqmWvVbRVuVW+VcNVyGXNZdJ114XcleGl5sXr1fD19h
X7NgBWBXYKpg/GFPYaJh9WJJYpxi8GNDY5dj62RAZJRk6WU9ZZJl52Y9ZpJm6Gc9Z5Nn6Wg/aJZo
7GlDaZpp8WpIap9q92tPa6dr/2xXbK9tCG1gbbluEm5rbsRvHm94b9FwK3CGcOBxOnGVcfByS3Km
cwFzXXO4dBR0cHTMdSh1hXXhdj52m3b4d1Z3s3gReG54zHkqeYl553pGeqV7BHtje8J8IXyBfOF9
QX2hfgF+Yn7CfyN/hH/lgEeAqIEKgWuBzYIwgpKC9INXg7qEHYSAhOOFR4Wrhg6GcobXhzuHn4gE
iGmIzokziZmJ/opkisqLMIuWi/yMY4zKjTGNmI3/jmaOzo82j56QBpBukNaRP5GokhGSepLjk02T
tpQglIqU9JVflcmWNJaflwqXdZfgmEyYuJkkmZCZ/JpomtWbQpuvnByciZz3nWSd0p5Anq6fHZ+L
n/qgaaDYoUehtqImopajBqN2o+akVqTHpTilqaYapoum/adup+CoUqjEqTepqaocqo+rAqt1q+ms
XKzQrUStuK4trqGvFq+LsACwdbDqsWCx1rJLssKzOLOutCW0nLUTtYq2AbZ5tvC3aLfguFm40blK
ucK6O7q1uy67p7whvJu9Fb2Pvgq+hL7/v3q/9cBwwOzBZ8Hjwl/C28NYw9TEUcTOxUvFyMZGxsPH
Qce/yD3IvMk6ybnKOMq3yzbLtsw1zLXNNc21zjbOts83z7jQOdC60TzRvtI/0sHTRNPG1EnUy9VO
1dHWVdbY11zX4Nhk2OjZbNnx2nba+9uA3AXcit0Q3ZbeHN6i3ynfr+A24L3hROHM4lPi2+Nj4+vk
c+T85YTmDeaW5x/nqegy6LzpRunQ6lvq5etw6/vshu0R7ZzuKO6070DvzPBY8OXxcvH/8ozzGfOn
9DT0wvVQ9d72bfb794r4Gfio+Tj5x/pX+uf7d/wH/Jj9Kf26/kv+3P9t////7QAMQWRvYmVfQ00A
Af/uAA5BZG9iZQBkgAAAAAH/2wCEAAwICAgJCAwJCQwRCwoLERUPDAwPFRgTExUTExgRDAwMDAwM
EQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwBDQsLDQ4NEA4OEBQODg4UFA4ODg4UEQwMDAwM
EREMDAwMDAwRDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDP/AABEIAEEALQMBIgACEQEDEQH/
3QAEAAP/xAE/AAABBQEBAQEBAQAAAAAAAAADAAECBAUGBwgJCgsBAAEFAQEBAQEBAAAAAAAAAAEA
AgMEBQYHCAkKCxAAAQQBAwIEAgUHBggFAwwzAQACEQMEIRIxBUFRYRMicYEyBhSRobFCIyQVUsFi
MzRygtFDByWSU/Dh8WNzNRaisoMmRJNUZEXCo3Q2F9JV4mXys4TD03Xj80YnlKSFtJXE1OT0pbXF
1eX1VmZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3EQACAgECBAQDBAUGBwcGBTUBAAIRAyExEgRBUWFx
IhMFMoGRFKGxQiPBUtHwMyRi4XKCkkNTFWNzNPElBhaisoMHJjXC0kSTVKMXZEVVNnRl4vKzhMPT
dePzRpSkhbSVxNTk9KW1xdXl9VZmdoaWprbG1ub2JzdHV2d3h5ent8f/2gAMAwEAAhEDEQA/APVE
kljda+sdfT76+n4dD+odWvaXU4VRAIaDHr5NrvZjY/8Awj0lNrq3Wun9Hpqvz3muu+1lFZa1z5sf
OxsMH8lX1599d/24ehYDutfZm3P6tjGurF3lrG7bPY+y3+ds3fyWLfz+q/WPpGVdkZeHXn9H3lws
w9wyaa/3r8az25La/wA/7O/f/wAGkp6JJBws3Fz8WvLxLBdj3AOrsaZBBRklP//Q9OzcqvDxL8u3
+ax632v/AKrGl7v+pWL9TsGxvTv2xljd1LrEZeU86kNeN2NjN/dqxqNlbWLR6/i2ZvQuo4lWtmRi
3VsA7uexzW/9JC+rGbVnfV7p2VV9F+PWCP3XNb6drP8ArdjHMSU4v1h+tP1CuuPTet5LX2YdzbPS
LLobaydrt9Ddr9m79/Yt3ovX+k9dx35PS7/tFNbtjnbXNh0B30bWsd9Fy8N+tOI/M6pkHHexzqsu
/HsrmHB9uVlOq5/Mc1zV6F/il9NtXUKmPbYaWY1b3sJLdzW37m6hv0UlO506sdF+td3TKtMDq1Ts
3HrH0a8itzWZ1dTfzWXstqyP+M3rpVzuc4ZX156XRXqen4mTkXkdheasalp/r+lZ/mLoklP/0fVF
y7cXqX1b6q9+Fj2ZvROo3b7aKtbcS6x36W6qv/CYVr/0lrP8AuoSSU+F9S6flY31g6pax+Na23Ms
sDbRadrm2vsrd+h9P3N3f1F0n+L053Q+l9Uux8d3VMvIvpbTRjggby233X2WNb6NDf8ACWrK/wAb
b7em/WKj7DZZjjJxxbc1j3AF++yvftna321tXoX+L+mtn1UwLxLrcqsW3Pc4uc550nc5JTa+rnRc
jArvzOo2Nv6t1B4tzbWztEDbTjUT/gMZnsrWykkkp//S9USSSSUhuwsPIcH30V2uAgF7GuIH9oFE
rrrqYK62hjGiA1oAAH9UKSSSlJJJJKf/0/VEl8rJJKfqlJfKySSn6pSXyskkp//Z/+IMWElDQ19Q
Uk9GSUxFAAEBAAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJAAYAMQAAYWNzcE1TRlQAAAAA
SUVDIHNSR0IAAAAAAAAAAAAAAAEAAPbWAAEAAAAA0y1IUCAgAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAzZGVzYwAAAYQAAABsd3RwdAAA
AfAAAAAUYmtwdAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwAAAAUYlhZWgAAAkAAAAAUZG1u
ZAAAAlQAAABwZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAAA9QAAAAkbHVtaQAAA/gAAAAU
bWVhcwAABAwAAAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RSQwAABDwAAAgMYlRSQwAABDwA
AAgMdGV4dAAAAABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0dC1QYWNrYXJkIENvbXBhbnkAAGRl
c2MAAAAAAAAAEnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAA
AADzUQABAAAAARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVogAAAAAAAAb6IAADj1AAADkFhZWiAA
AAAAAABimQAAt4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9kZXNjAAAAAAAAABZJRUMgaHR0cDov
L3d3dy5pZWMuY2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAuSUVDIDYxOTY2LTIu
MSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAAAAAAAAAuSUVDIDYxOTY2LTIu
MSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGRl
c2MAAAAAAAAALFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAA
AAAAAAAAACxSZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4gSUVDNjE5NjYtMi4xAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDPFAAD7cwABBMLAANcngAAAAFY
WVogAAAAAABMCVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAKPAAAAAnNp
ZyAAAAAAQ1JUIGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMAKAAtADIANwA7AEAARQBKAE8A
VABZAF4AYwBoAG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCyALcAvADBAMYAywDQANUA2wDg
AOUA6wDwAPYA+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIBWQFgAWcBbgF1AXwBgwGLAZIB
mgGhAakBsQG5AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4AkECSwJUAl0CZwJxAnoChAKO
ApgCogKsArYCwQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oDZgNyA34DigOWA6IDrgO6A8cD
0wPgA+wD+QQGBBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATTBOEE8AT+BQ0FHAUrBToFSQVY
BWcFdwWGBZYFpgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowGnQavBsAG0QbjBvUHBwcZBysH
PQdPB2EHdAeGB5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiqCL4I0gjnCPsJEAklCToJTwlk
CXkJjwmkCboJzwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsLIgs5C1ELaQuAC5gLsAvIC+EL
+QwSDCoMQwxcDHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakNww3eDfgOEw4uDkkOZA5/DpsOtg7S
Du4PCQ8lD0EPXg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDXEPURExExEU8RbRGMEaoRyRHoEgcS
JhJFEmQShBKjEsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSLFK0UzhTwFRIVNBVWFXgVmxW9
FeAWAxYmFkkWbBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUYihivGNUY+hkgGUUZaxmRGbcZ
3RoEGioaURp3Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzMHPUdHh1HHXAdmR3DHeweFh5A
HmoelB6+HukfEx8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFIIXUhoSHOIfsiJyJVIoIiryLdIwoj
OCNmI5QjwiPwJB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3JugnGCdJJ3onqyfcKA0oPyhx
KKIo1CkGKTgpaymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDksbiyiLNctDC1BLXYtqy3hLhYu
TC6CLrcu7i8kL1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJjMpsy1DMNM0YzfzO4M/E0KzRl
NJ402DUTNU01hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5BTlCOX85vDn5OjY6dDqyOu87
LTtrO6o76DwnPGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/iQCNAZECmQOdBKUFqQaxB7kIw
QnJCtUL3QzpDfUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVHe0fASAVIS0iRSNdJHUljSalJ
8Eo3Sn1KxEsMS1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9JT5NP3VAnUHFQu1EGUVBRm1Hm
UjFSfFLHUxNTX1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX4FgvWH1Yy1kaWWlZuFoHWlZa
plr1W0VblVvlXDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2CqYPxhT2GiYfViSWKcYvBjQ2OX
Y+tkQGSUZOllPWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFqSGqfavdrT2una/9sV2yvbQht
YG25bhJua27Ebx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQUdHB0zHUodYV14XY+dpt2+HdW
d7N4EXhueMx5KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+wn8jf4R/5YBHgKiBCoFrgc2C
MIKSgvSDV4O6hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZif6KZIrKizCLlov8jGOMyo0x
jZiN/45mjs6PNo+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSVX5XJljSWn5cKl3WX4JhMmLiZ
JJmQmfyaaJrVm0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFHobaiJqKWowajdqPmpFakx6U4
pammGqaLpv2nbqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1ErbiuLa6hrxavi7AAsHWw6rFgsday
S7LCszizrrQltJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6tbsuu6e8IbybvRW9j74KvoS+/796
v/XAcMDswWfB48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJOsm5yjjKt8s2y7bMNcy1zTXN
tc42zrbPN8+40DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc1+DYZNjo2WzZ8dp22vvbgNwF
3IrdEN2W3hzeot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3mlucf56noMui86Ubp0Opb6uXr
cOv77IbtEe2c7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe9m32+/eK+Bn4qPk4+cf6V/rn
+3f8B/yY/Sn9uv5L/tz/bf///9sAQwAKBwcHCAcKCAgKDwoICg8SDQoKDRIUEBASEBAUEQwMDAwM
DBEMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwM/9sAQwELDAwVExUiGBgiFA4ODhQUDg4ODhQR
DAwMDAwREQwMDAwMDBEMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwM/8AAEQgAQQAtAwERAAIR
AQMRAf/EAB8AAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKC//EALUQAAIBAwMCBAIGBwMEAgYC
cwECAxEEAAUhEjFBUQYTYSJxgRQykaEHFbFCI8FS0eEzFmLwJHKC8SVDNFOSorJjc8I1RCeTo7M2
F1RkdMPS4ggmgwkKGBmElEVGpLRW01UoGvLj88TU5PRldYWVpbXF1eX1ZnaGlqa2xtbm9jdHV2d3
h5ent8fX5/c4SFhoeIiYqLjI2Oj4KTlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/EAB8BAAIC
AwEBAQEBAAAAAAAAAAEAAgMEBQYHCAkKC//EALURAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEF
URNhIgZxgZEyobHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidk
dFU38qOzwygp0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhY
aHiImKi4yNjo+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/dAAQABv/aAAwDAQACEQMRAD8A
7LirsVS3Wde03RIIbjUZDHFcTJbRFVZ6yyV4LRAf5cVTLFXYq7FX/9DsuKpBr3miPTbiLTbK2fUt
buFLwafCQCEBp69zK3wW1v8A8WPirEPP/wDiA+XdNfXfqq3D6zaGKGz5lY04yfA8kv8Aeycv2lVM
VZLqOs+aNFu57m8sI9R0HmWEtjyF3BF/NPbSfDcrH+21u/P/AIrxVkNjfWmoWkV5ZyrNazKGilU1
DA4qiMVf/9Hrt9dxWNlcXs39zbRvNJ/qxqXb/iOKpB5H0+RdL/Td6OWr63S9vJDuQsg5W1sv8sVt
AUjVMVS/zL5v/Lmac6Vr12ry2M6y+iUnok0deLc4F4vw5fz8MVZHoXmPRvMNtJdaRcfWYIn9N24s
hDUDfZlVG+y2KpNpkQ0HzjcaVEOOmazC+oWsQ+zFdRMqX0cS/spOksVx/wAZOeKstxV//9LqXmSz
kvvL2qWUO8tzaTxRgd2eNlX/AIY4qpeUr+HUPLWl3cP2ZLaIEfyuiiOVP+eciMmKvnrzfZvfavcm
2kjdob24tpIuVHWSa8umirUfYZWX4uWKvT/yY9NYdUiSRJTAlpFI8ZJXmqz8lFQv2cVZJqDi7/MH
R7ePc6bZXdzcEfsi5MVtCp/1/Skb/YYqyrFX/9PsuKsOW01TyvrEj2FtJf8Al3U5/Umt4d5bOeVv
3s0Uf+7LKV/3kqf7o+3iryXVNMu7XzJrEsclpKs19JKEmEx4skzyRt+59P4l5fzcMVZV+WZ1DQNI
1ie2tm1a9ubiBILa2BA5ssvxTySKvowL/uyXFXoXlfQrnTo7i+1ORbjXNScS38yV4Cg4w20Ff90W
yfBHiqf4q//U7LirsVeDfnRJLpfma3/R8slsLq2E06xuwUyc5I+fGvFfhjX7OKvTvy2gjTydptwK
tPdxCa4kZizM52qWY4qyvFXYq//V7LirsVQ89jY3LB7i2imcCgaRFYgf7IHFVWOKOJFjiRUjUUVF
AAA9lGKr8Vdir//W7LirsVdirsVdirsVf//X7LirsVdirsVdirsVf//Z')
	#endregion
	$button_WOL.ImageAlign = 'TopCenter'
	$button_WOL.Location = '917, 7'
	$button_WOL.Name = "button_WOL"
	$button_WOL.Size = '64, 94'
	$button_WOL.TabIndex = 14
	$button_WOL.Text = "WOL"
	$button_WOL.TextAlign = 'BottomCenter'
	$button_WOL.UseVisualStyleBackColor = $True
	$button_WOL.add_Click($button_WOL_Click)
	#
	# button_DNScheck
	#
	$button_DNScheck.Font = "Microsoft Sans Serif, 7.5pt"
	#region Binary Data
	$button_DNScheck.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAAC0AAAAtCAYAAAA6GuKaAAAABGdBTUEAALGOfPtRkwAAACBjSFJN
AACHDwAAjA8AAP1SAACBQAAAfXkAAOmLAAA85QAAGcxzPIV3AAAKOWlDQ1BQaG90b3Nob3AgSUND
IHByb2ZpbGUAAEjHnZZ3VFTXFofPvXd6oc0wAlKG3rvAANJ7k15FYZgZYCgDDjM0sSGiAhFFRJoi
SFDEgNFQJFZEsRAUVLAHJAgoMRhFVCxvRtaLrqy89/Ly++Osb+2z97n77L3PWhcAkqcvl5cGSwGQ
yhPwgzyc6RGRUXTsAIABHmCAKQBMVka6X7B7CBDJy82FniFyAl8EAfB6WLwCcNPQM4BOB/+fpFnp
fIHomAARm7M5GSwRF4g4JUuQLrbPipgalyxmGCVmvihBEcuJOWGRDT77LLKjmNmpPLaIxTmns1PZ
Yu4V8bZMIUfEiK+ICzO5nCwR3xKxRoowlSviN+LYVA4zAwAUSWwXcFiJIjYRMYkfEuQi4uUA4EgJ
X3HcVyzgZAvEl3JJS8/hcxMSBXQdli7d1NqaQffkZKVwBALDACYrmcln013SUtOZvBwAFu/8WTLi
2tJFRbY0tba0NDQzMv2qUP91829K3NtFehn4uWcQrf+L7a/80hoAYMyJarPziy2uCoDOLQDI3fti
0zgAgKSobx3Xv7oPTTwviQJBuo2xcVZWlhGXwzISF/QP/U+Hv6GvvmckPu6P8tBdOfFMYYqALq4b
Ky0lTcinZ6QzWRy64Z+H+B8H/nUeBkGceA6fwxNFhImmjMtLELWbx+YKuGk8Opf3n5r4D8P+pMW5
FonS+BFQY4yA1HUqQH7tBygKESDR+8Vd/6NvvvgwIH554SqTi3P/7zf9Z8Gl4iWDm/A5ziUohM4S
8jMX98TPEqABAUgCKpAHykAd6ABDYAasgC1wBG7AG/iDEBAJVgMWSASpgA+yQB7YBApBMdgJ9oBq
UAcaQTNoBcdBJzgFzoNL4Bq4AW6D+2AUTIBnYBa8BgsQBGEhMkSB5CEVSBPSh8wgBmQPuUG+UBAU
CcVCCRAPEkJ50GaoGCqDqqF6qBn6HjoJnYeuQIPQXWgMmoZ+h97BCEyCqbASrAUbwwzYCfaBQ+BV
cAK8Bs6FC+AdcCXcAB+FO+Dz8DX4NjwKP4PnEIAQERqiihgiDMQF8UeikHiEj6xHipAKpAFpRbqR
PuQmMorMIG9RGBQFRUcZomxRnqhQFAu1BrUeVYKqRh1GdaB6UTdRY6hZ1Ec0Ga2I1kfboL3QEegE
dBa6EF2BbkK3oy+ib6Mn0K8xGAwNo42xwnhiIjFJmLWYEsw+TBvmHGYQM46Zw2Kx8lh9rB3WH8vE
CrCF2CrsUexZ7BB2AvsGR8Sp4Mxw7rgoHA+Xj6vAHcGdwQ3hJnELeCm8Jt4G749n43PwpfhGfDf+
On4Cv0CQJmgT7AghhCTCJkIloZVwkfCA8JJIJKoRrYmBRC5xI7GSeIx4mThGfEuSIemRXEjRJCFp
B+kQ6RzpLuklmUzWIjuSo8gC8g5yM/kC+RH5jQRFwkjCS4ItsUGiRqJDYkjiuSReUlPSSXK1ZK5k
heQJyeuSM1J4KS0pFymm1HqpGqmTUiNSc9IUaVNpf+lU6RLpI9JXpKdksDJaMm4ybJkCmYMyF2TG
KQhFneJCYVE2UxopFykTVAxVm+pFTaIWU7+jDlBnZWVkl8mGyWbL1sielh2lITQtmhcthVZKO04b
pr1borTEaQlnyfYlrUuGlszLLZVzlOPIFcm1yd2WeydPl3eTT5bfJd8p/1ABpaCnEKiQpbBf4aLC
zFLqUtulrKVFS48vvacIK+opBimuVTyo2K84p6Ss5KGUrlSldEFpRpmm7KicpFyufEZ5WoWiYq/C
VSlXOavylC5Ld6Kn0CvpvfRZVUVVT1Whar3qgOqCmrZaqFq+WpvaQ3WCOkM9Xr1cvUd9VkNFw08j
T6NF454mXpOhmai5V7NPc15LWytca6tWp9aUtpy2l3audov2Ax2yjoPOGp0GnVu6GF2GbrLuPt0b
erCehV6iXo3edX1Y31Kfq79Pf9AAbWBtwDNoMBgxJBk6GWYathiOGdGMfI3yjTqNnhtrGEcZ7zLu
M/5oYmGSYtJoct9UxtTbNN+02/R3Mz0zllmN2S1zsrm7+QbzLvMXy/SXcZbtX3bHgmLhZ7HVosfi
g6WVJd+y1XLaSsMq1qrWaoRBZQQwShiXrdHWztYbrE9Zv7WxtBHYHLf5zdbQNtn2iO3Ucu3lnOWN
y8ft1OyYdvV2o/Z0+1j7A/ajDqoOTIcGh8eO6o5sxybHSSddpySno07PnU2c+c7tzvMuNi7rXM65
Iq4erkWuA24ybqFu1W6P3NXcE9xb3Gc9LDzWepzzRHv6eO7yHPFS8mJ5NXvNelt5r/Pu9SH5BPtU
+zz21fPl+3b7wX7efrv9HqzQXMFb0ekP/L38d/s/DNAOWBPwYyAmMCCwJvBJkGlQXlBfMCU4JvhI
8OsQ55DSkPuhOqHC0J4wybDosOaw+XDX8LLw0QjjiHUR1yIVIrmRXVHYqLCopqi5lW4r96yciLaI
LoweXqW9KnvVldUKq1NWn46RjGHGnIhFx4bHHol9z/RnNjDn4rziauNmWS6svaxnbEd2OXuaY8cp
40zG28WXxU8l2CXsTphOdEisSJzhunCruS+SPJPqkuaT/ZMPJX9KCU9pS8Wlxqae5Mnwknm9acpp
2WmD6frphemja2zW7Fkzy/fhN2VAGasyugRU0c9Uv1BHuEU4lmmfWZP5Jiss60S2dDYvuz9HL2d7
zmSue+63a1FrWWt78lTzNuWNrXNaV78eWh+3vmeD+oaCDRMbPTYe3kTYlLzpp3yT/LL8V5vDN3cX
KBVsLBjf4rGlpVCikF84stV2a9021DbutoHt5turtn8sYhddLTYprih+X8IqufqN6TeV33zaEb9j
oNSydP9OzE7ezuFdDrsOl0mX5ZaN7/bb3VFOLy8qf7UnZs+VimUVdXsJe4V7Ryt9K7uqNKp2Vr2v
Tqy+XeNc01arWLu9dn4fe9/Qfsf9rXVKdcV17w5wD9yp96jvaNBqqDiIOZh58EljWGPft4xvm5sU
moqbPhziHRo9HHS4t9mqufmI4pHSFrhF2DJ9NProje9cv+tqNWytb6O1FR8Dx4THnn4f+/3wcZ/j
PScYJ1p/0Pyhtp3SXtQBdeR0zHYmdo52RXYNnvQ+2dNt293+o9GPh06pnqo5LXu69AzhTMGZT2dz
z86dSz83cz7h/HhPTM/9CxEXbvUG9g5c9Ll4+ZL7pQt9Tn1nL9tdPnXF5srJq4yrndcsr3X0W/S3
/2TxU/uA5UDHdavrXTesb3QPLh88M+QwdP6m681Lt7xuXbu94vbgcOjwnZHokdE77DtTd1PuvriX
eW/h/sYH6AdFD6UeVjxSfNTws+7PbaOWo6fHXMf6Hwc/vj/OGn/2S8Yv7ycKnpCfVEyqTDZPmU2d
mnafvvF05dOJZ+nPFmYKf5X+tfa5zvMffnP8rX82YnbiBf/Fp99LXsq/PPRq2aueuYC5R69TXy/M
F72Rf3P4LeNt37vwd5MLWe+x7ys/6H7o/ujz8cGn1E+f/gUDmPP8usTo0wAAAAlwSFlzAAALEwAA
CxMBAJqcGAAABkdJREFUaEPtmVlPVFkQgJvtb/CkyBIURUAWMQQS4gMuKCAgBAIJBBVki6AgBhWi
RhJ2BBRwCfsmIKv4X/gFPPheM1+F6tyBbkLGMLYTHip3OXWqvlrOObfTLj8/v52/Zdff33/X5XL5
rMAHJ7yugICAn3l5edLa2ipPnjyRpqYmefbsmc8IPHDBBye8LiJ4+fKlfP/+XTY3N1XW1tZ8RowJ
Pjj3OsK1SyRbW1syNzcnCwsLMj8/7zMCD1zwwbnXLq7dxsZG2djYUKXFxUUVlH+3GAtc8MHphn76
9Kmsr697nOgrAh+cbujm5uY/AhrOE+jjlgPQJz19THIg0/976P17uB0Axy1eoQGyUxGx+69fv8rS
0pICzs7O6tXuv337pnozMzPueYw57SB2UJg4dbDDFR/YYcx0EMbg89rTTEQ491dWVmR1dVVleXlZ
j1Le4Qwxo+gzzpUguHc6NFDs4MdgLRnY5MRjnCt+uIfBCd3S0uI50whfV4WFhfpVdefOHcnJyZGi
oiJpaGiQd+/euZ2hCwAO2tvbJTs7Wx49eqTvzZklYnp6Wm1VVla65yNfvnxRf8XFxerv7t27Ulpa
Kvfu3ZO3b9+6A/QKbYNVVVUSGhoqt2/fVgP5+fkKdPHiRTl37pw6mJyc1AxRTuYAc+bMGblw4YJ0
dnbqOwMHDn3mXr9+XauB9PX1SVpamsTGxkpmZqbaxRc6iYmJ6q+rq0sr5xWaDAHy4MEDOX/+vAwP
D2upyAwAHz580IwzVlZWpu+Axmh1dbVCAX3jxg3NrM0Denx8XOeRCIB5R+ajo6O1SpZ5qkaPUwEy
PTExoVwHoO1wYRCDlCYqKkoGBwcVCOeUCaMYBApnHR0dOk6gtbW1cvbsWbl586bCEwTfwcDbOoiJ
idGM0rdTU1Ny+fJlfSYwC9BaCg7m2TN8HheiQd+/f1+zYtDWVwBvb2/rx3hkZKSCkhl0Hj58KKdP
n5bXr1/LtWvXJCEhQcvPOEDYBjorK0thEILHD8H/+PHDvdBJDgHgj6tlGs5DoS3TGLEMMI709/fr
eG5urmYNnbq6Ojl16pQu1O7ubgW8deuWOiYo2oPqAE0Q+KMtkpOTtaVYMy9evJDR0VG1hw4+7Xok
aMs0BixiDCAjIyMSFxenC8a2KrJOpnt7e/WnEbtPRESE1NfXa3XoTWySXcs+PgcGBlQXeyx+FiAB
8JuQCsPzr6Apl+2Z3L9//16dsKj2Q9MSvBsbG9Od4dKlS2oH2+wSBMq9VQ57VAJ9fsSyOK9cuaIB
A8978+919/DU09ZX7BSMU37ag60RYAyy8IBmu+Md9ig3i7KgoEDbgwBoGbJsleNKRrknWAA/fvwo
5eXlEh4errvVkaGtp5lAVrgCzY5A/5IJ2z0waAuRfRVo3jOP0rOrcDABTXugDyhVRMcSw45ilWX8
6tWrkpqa6vZLJQ6FJtPs0zxjCCETLDT6jtb4/PmzZgjImpqaf0BjC/1Pnz5JfHy8CocFO4tVjexj
lyBsDsIzW2V6erqCExC2vPY0k+1woQ2YDByLj/KkpKToiicgdMkUgXmCZgGTtcePHys01aM90Aea
/qV1WHSsE4JgwXKIcRJTTaqKPjY57t3QzsOFzHHa0YtkhsXDVpWUlKQZ5vuALY8MoQ80BisqKiQ4
OFh6enr0mfIyTpaA53gOCwuTjIwMDQQpKSnRxcrCo3XY+vDFHk9iCNZ6Hz6vX3ko4LitrU0PEfbS
N2/eqLCHEjWCrgkAQ0ND8vz5c60KPUpQXOlTrlSKjLIlModxrmSWLLOAX716pX45vrGDDrbRg89j
ezgh6CsmGaS9IygyZ7qIc/VbZswOY9wzF2FBocMHFJVA0DM/+ESPd/ixinmFZtCUyA5Xm4gjDPGO
eye0PeOQcaDpWbNl89Hh3jnHAuSZMXwwF78w2PihmcYJwkQzbI4xgNj7/cIYehaoASLYAML5bMIz
NhF7xobz+VDo4xRvwR5Ffhv0r8gJ9H8lB6DtcPGk7CsCn9fDxVflQKZPoI9JDkDTKxydv7KPHqfA
BZ+7p/lDkQ8dInGeUr4m8MEJr0LznWr/IzLo/FD6nQIHPHDBB6dCBwUF/QwJCdGfRHz486HOt7Sv
CDxwwQcnvK7AwMCdveb+IyQwMHDnLyryS/+EX5LNAAAAAElFTkSuQmCC')
	#endregion
	$button_DNScheck.Location = '567, 7'
	$button_DNScheck.Name = "button_DNScheck"
	$button_DNScheck.Size = '64, 94'
	$button_DNScheck.TabIndex = 13
	$button_DNScheck.Text = "Check"
	$button_DNScheck.TextAlign = 'BottomCenter'
	$button_DNScheck.UseVisualStyleBackColor = $True
	$button_DNScheck.add_Click($button_DNScheck_Click)
	#
	# button_ResetPWD
	#
	#region Binary Data
	$button_ResetPWD.Image = [System.Convert]::FromBase64String('
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
SczEoAAAAABJRU5ErkJggg==')
	#endregion
	$button_ResetPWD.Location = '777, 7'
	$button_ResetPWD.Name = "button_ResetPWD"
	$button_ResetPWD.Size = '64, 94'
	$button_ResetPWD.TabIndex = 10
	$button_ResetPWD.Text = "Reset PWD"
	$button_ResetPWD.TextAlign = 'BottomCenter'
	$button_ResetPWD.UseVisualStyleBackColor = $True
	$button_ResetPWD.add_Click($button_ResetPWD_Click)
	#
	# button_Userunlock
	#
	#region Binary Data
	$button_Userunlock.Image = [System.Convert]::FromBase64String('
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')
	#endregion
	$button_Userunlock.Location = '707, 7'
	$button_Userunlock.Name = "button_Userunlock"
	$button_Userunlock.Size = '64, 94'
	$button_Userunlock.TabIndex = 9
	$button_Userunlock.Text = "User Unlock"
	$button_Userunlock.TextAlign = 'BottomCenter'
	$button_Userunlock.UseVisualStyleBackColor = $True
	$button_Userunlock.add_Click($button_Userunlock_Click)
	#
	# button_shutdown
	#
	$button_shutdown.Font = "Microsoft Sans Serif, 7.5pt"
	#region Binary Data
	$button_shutdown.Image = [System.Convert]::FromBase64String('
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
TkSuQmCC')
	#endregion
	$button_shutdown.Location = '637, 7'
	$button_shutdown.Name = "button_shutdown"
	$button_shutdown.Size = '64, 94'
	$button_shutdown.TabIndex = 8
	$button_shutdown.Text = "Shtudown GUI"
	$button_shutdown.TextAlign = 'BottomCenter'
	$button_shutdown.UseVisualStyleBackColor = $True
	$button_shutdown.add_Click($button_shutdown_Click)
	#
	# Button_gpupdate
	#
	$Button_gpupdate.Enabled = $False
	$Button_gpupdate.Font = "Microsoft Sans Serif, 7.5pt"
	#region Binary Data
	$Button_gpupdate.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAAC0AAAAtCAYAAAA6GuKaAAAAIGNIUk0AAHolAACAgwAA+f8AAIDp
AAB1MAAA6mAAADqYAAAXb5JfxUYAAAAJcEhZcwAACxMAAAsTAQCanBgAABXDSURBVGhDrVgHfFXl
3X7RDtuqIBIChLBRxNFqLQ4+62i11t1Wa2vVXysOFEFFRiCBTLITYkIYYYSEkMkKiOwlEvYQItnr
7nvPvefufW+e7zk3AfHr5zd+7Zvfk7Pe857nv//vFT5zp/BauoTKaxU9PlsEap9VeEJqoYNLaOAR
aviF7NQKj7pB2Bx6oVW1Cue+bUKqLxWehgNCnfnOQN25g7HtNaufa8pcMKv1/ReSmt99Nqnrw5eS
pMVvJxqO7X6mPS9+xOWEV292Go8If3uT8O6tFvLqfOE6t1P4244J54ndAi1cv+2s6AaEA7IA2oiO
f8L/nbRLFyFtt6qFtqtJOHZuHiRVFL0hbyxYayqeY9aXpzmlbcvh3V8B7/EdcB/bDudX9bAf2QLz
tmJYihc4TYVzjVJ98Vbn3srp3l3V0dZ1hcJ1fte/k7RK6OEj4bBC+jqrQyPc9kvCu6f6AUP6rEJ5
bVa3t6YIjr0lcJ7cgcCFA/CdPwJ7wz44j2+H+8QOeE9+Ds+pz2E+twP+b3bBe6oelp1lMNbnU4hk
nT5nQaHz5OZ7g10nhevk3n+NtIqk/b0aYTGcE7rmBuG2dAr57N5o65ZV+V0rZnktWwpgbaiE4+w2
uL7cCsdXdXAT3i/r4DlcC+fhSjiPVMF9tBreozUIHNwE++EtcBzdBv9XWzm3Bg6+b96ZD/Wy9/09
NTml1mNfjETnWWFrP/cvkIZpgOXiVmGuLxDuL7e+qMn9uNW+biEsRzbAf6wOfrqBZ385HIc2wL2P
JPdugH1fGewHyuA+vAGug+Ww718P2751cB1YA88XZXDtLIW8fzU8B/ju4TIKyTmHyqFbF4fOpTPa
3Yc2/tHRcUF0krQdVhJsG/A/kr5CmBigCjiu8wbUQn+4VHSXLMjRpb6MwJYsaosEvqDf7l4F984V
xErYP18B297VcO5aBde2Ithq8mCpyoFcnQNrdS5kXlu35cP5+TK4d5XAvmcVpB2F8H2xDp5da+HZ
vQyOPVxjSy4MqS9CtTqpwK5rH+DrVUh3/IAYgF6SvQYR0goknyTUvXYGnnOANuwQ0pGaH/Skvb5O
m/oH+Dan8wMrYdqcD/d2kqnPhXVrNhybMmGrTIK7NBmWdakwVOVD3kHB9ldT85Ww76qA/HkZLBVL
Ia1fAmt5Itw1yZC3ZEC3PR0S13LWUaj6LHh35cNVn4Oe1JdgXPtpjd/Wc0PY3SVCHrUIujXfwVXS
Hmrb7jYIk2wU5lPHhCnvnZVSyoNwbE6GVJcBc20G5KoUuCoT4VsfD0dpItQlybBtJ8nzDQhoOhH0
ORDo9aEXiCBMhPjf5/fAq1NBbjgEc816OIqXwF6aAEtlPKy16bDVpcBSvRhSTSrkjXPRlfgourKm
lbk7Gq4LB6TvJT3AY+4SvQrxzh6hW565WLdgKuTy6bBWcdHqRbCWzYGjYj5cZXGQV30K06ZC2FtO
I+T3klgfQWWEeREKhnkMozfci16yDxLKcwWBYBCerkbYtxbDXDAD1pLZsJXH0xpUQPHbMO+thasi
AZ2z74BhW+4SsC6EzWoRllRXIXxShPT1JD0gZNcK6eT+p1qmj+91rnwT5vKFMKz9GMaymXCVzoCh
+C2YVn0C+dwB9AZcCCpESCjk9/MfKSkkCT+Z+8Nhku0Hz0Mk6+e8EJ8r7yEYgPX4XuiXz4Nt2fuw
Fk+H5fBWBE0mGNd/ClvRy+j4cGLYfWrvi9DpBFRdVyFCrm7ht3YJj1U7QFK3RKsSn2k1JjwI25r3
IK1+H66St+Fe8TZUha/CvDwO/vbGiM4ChL+Xau0N8FJxAsUVANKPnF9xEQXKTYVsIOyj+7g5PRiZ
o8z0dJ6BfnUCjIyBINfxOjSQS96FtPw92BZPRfOCp3TuzvMjYSdhC1MgIcAiEvKqRFDWi86KlHWG
96LgXPUPyCunwbzsDdiL/wZjNgkvm4OAoTVCgtYn4SDPST0U4P9+gn4X/CYVfJpm+ngLgro2BPUd
6A26I9pVhOozD4Wk3ygC+vmmz9ZFv3fDpzw3dMC2/HVadRqcn70C/Qex0FUmVcBBbdOVITF7IKga
gLBRuC80/FL7zqSgIfPXMJO0ufA14q/QZv8JpqJ3Eey8GCHmp2ZDiiv09ulUuReSu2A9sQ3G0gWw
5PwNpoxXIGX+Bebsv8KS/RocJfNhP1YFn9zdb5FehMMUmghELECX8dMKfOYxdsG47GVYl70C4/I3
IKdOReeMiX7bxWMTve1fC0/LOZIO9AifRSPaSuJLVB8NI8E/Q1rxCrQFf4an4AVocv8I6exOLtfn
i6FwAN6gkiGo5UAI7tO7Ycn9C4ypL8CQ/CzMqc/BlPpsH9J4nvIspASC93VLX4WNJT3M9xWt9lLw
QMT3aQNKo1jCZ+qBaSk55D4Pc9ErtPCfoZ0+DKp1cwucTaeF7cJhIYLtp4Wv8WiMNu6XNl3q/TBS
u9aCl0jkT7Ck88PVSXRbd0QLkQCiXyqG9QWCcO5ZCV3K0xFi5rQXIBGmtOdJ+BrwmTHt9zBkk0jS
45H5cv0KukwwQlJRBfV9lXSA7iXlvQwpm2sW/CFCXJcwBbpFD0n65uZB+tZ2ISSDVhgOln+if+un
MOU/Cemzl2HLfwmOrOfRnfYi3G1Ma8pi9IOI31IrSiaw7y6GN+HnsCikSc6c8gyk5N9HYLoGFuV+
2u/Qk/QsHElPQDP3EVi2kTSD8SrpSDBfQzrnJbrX0zDncV0SN2Q/B/20m6E5WPe22SAJ4Txaep16
2ZuHemaMIunfkvCz0JGwnPEkK14C/CElD9MHQz6SVfwYcLBb06X8hpr7LaTFT5GYQvZ3MCU99U8w
J/0O5uSnYV1EwvOY+3etoZb98HIdJQf5FJ9W6PaT9pvU1PLzkPh9cw7XzX8O0tLnYfhgBLRFb+3S
9IavF5bqlJt0n9xj0yXdD13e4zCkP84AoobSfw3HhT2RxemEDBQ3Qoz4gKEbUtYLMJK0YQm1mcrF
afbvgyX5cVgTH4Y+/hm42VsrYl/JJH1B2Ycrw2+3wZT7HIxLHoMpk0rJ/A2D+UVoE2Kh/+iXVtmu
HSh6vm6Y1PnBWJ814yEY8p7gxCdgzXoc2swn4dc29/kxC0SYUIZ8tA76pEchpTxOf6WQyY9BSnzk
e2FO/DU08b+BsehNuA8Usutj07RvBRz7l0dgJ6wHVrCdXQXHwZWRfsRIsqZ0fiODQhOmLFosdTJU
M24P6s/smCK0B7e93vaPm2BL/xVM2U9Qskchp90PzbLXGHOeK47cpw2/A/o1H0CfwLnJU2FIehiG
xIdgSnzweyEpWHAftIvuR0/cPTDNnQzL/Dthnjf5W8RNgjl+MkzxLN0L72AMTIWZllYgZzxKXo/A
mjoFXTPZcpfMmS10X2xMV717A4yL76aEj0OfPpXnd8BcMStiPqU89xJK9vAbO6DPUPz4PvrrAzAm
ToFh8RSeU4hrkcx7/TDS7QwpP4c9iQHIRkiXyveSKWjywxFIhDX5AVpkCtPiA9Tsw5BTpsCS+iAs
af8BOf0/YMrjPLqY+sNB6KorShOdBdOT1bNvgT55EgxZD5H4owyc2+DYkQA3iYZDfhYC5k+eB1Xn
GHT8wKK7YFp8bz9+wQXv/Q7MSfddhUSYlHPOlTlXTqS2+++ZkpXjL6BdOBnNcb+Abv5k6OMmozt+
ClTxd5EwBcimcJkUYMnDMH48DJ2bVyaLr2c9nKT95GboFoyg1m6DYdEkqOeNgHXLbASdEgIyy7JV
j4DdyD3fRnTPHg/T7OE0c+xV6GeP+A40H0V/B1fu6yLHGGjn9GP2MKbA0bCfr4dH4nd0rXAbenje
A0vtDHTPHYmu5DvJaQIs5KX/4EZ0VOctERdnTU3SfnwTdPOGwBAXA8OcKJjmDIZmdhSMC0dBmjMU
6tm8njsCxvmxMMy6FaZPFAyOHI2EbubA78D48eDv4L8+1300qA8zb4L64yjYO84qjhgJH0ZRxKqW
2pkwTBcwxQ2Cfl4ULHHsQd7/MTpqcpeI9oL3Fms+4QILR8KwYCT0CuG5w6CNGw7b/EGQZg/h+ZDI
uXn2QOhJ3jw3CtLcoRQuCmYKZeJ80zxCOUbuK/e+hTL3W0RDmh8N47yhMCrrxI+BT93clwJDHmYr
P4KhEAzrp9GiVM78KLpM3zw9hWyvX5kqOo5sTlDNGoTOxNGcQHNR46aEUdDPj2H5jIZp5iBoZv2I
+CE0M68nfgD9+9dDPfMGml5A+9716Jn+I5L7CawLY6H5NIoWo5UWkFQ/TAu5Tj+M8RR6wRBoeG6e
N5CF40kGixLmHEyrLGPw+UJwFT3SR3jOKFgShkO1aCg003+IS7urF4n243ue6/pwSK8lKQpywkio
Fw5DNyc54wezIESjo3QeDNWpMFUmw1RFVKZAX5kOQyW3R7VJUNemQlObCFPO3ZBpSlNiNAwJJLqI
JP9b8Fn8UMjJMXDMZKe5M6+P8DVDKWDmtNsp8KCIAiTyMCQOQ8fHMb3nNq14SbRfvhTbtOBXHkf8
jbAmjWbuZblMHA573M2sZjEIm1X9S/UNJQ0qVU3J3IoPKsN/ai1L/21Ma7eyCFCDycOYNegGhLn/
GAHvW5KG8hvDYYz7GdQJt8Or7+5f5dvhOb6OCqOVFg9hWlWE5LvxUWha+JC35ZumWNF+4uiPz2S+
cVk/56fMqWOZI6MZqfTNRbFM7jHsb5tJTvkL9IFNf9ij9L6slewbLF9y07t4IHPtz/gRhRA1k0pf
Tx12DUawLybhyP2hbBGYnRb8FOYjJX0VV1FFpCHrq7qWjezluaYpNYZzx8K4iJlnzo1oyXylo8uD
G8X5xm5xsap4uW7OQGioaUsKCafRHCSvz4yG39AcWagvthUo+z02UdylSEdyYci8iVWUc7NimeNj
WMGGsOG5lf1JLDGa59R6RgwkKsCaMRIOnuvjfgxp4/sI+JR+mopglxfwBdnnBODvOskSPp5tAl2J
wppSRvB8BNRxQ3G5ctnqboNViB6NS5w/d+HJprm3w6FoIW0UDBkMGJrZkDWM/tUSoXxlKDrn9hS9
Xic0FXOYin4Ga95gOApGQs4cDWvOJO5eRrHpInJiiCGQs0bw+RhoUgdDmzIYlurZ8LiMLLZch0Gn
WM8bokLod4YqbrVSbqGVKfQSpuCMWNhSh6D107vDjWcafq9RczfeYvWIRqt/0Jnijxpti2+FNY2p
L2s4zEuYl3OGI2hs7ad7ZdCb2aZGGiiXHfKRjTBm3UMzMt8uvQW6gsE8joKzIJZEY2EvGAupcCjs
KdfREiznDeUk6478tAA3NxN0sRB3MMpl8PxmWm4wLUPtZtNKmSxe2SRPv76wdMbpSx3aG1wejRAq
i0No7T7x1eH9H3TMHQV5yS1swsewhPLF/FgEpQ4u17cX7IPyM4Gy1whxv9gXmE5DO3S782AufoZk
2VtQWGMui1T2GLoIy/aKZ2DcvxR+Vj1lfpCMe4MueHkRDPf160HDBe4Jb+P+ciitQ0FJ2sijnddt
C8fh+P4tcWYjN7ZQDxCaHrPQqmXR0WIdcir7nW5NCju+3HGwZ0VDJmkvSSub2WDQjIBfihANUjNh
mpPcqXEWAxJRRtBmh1etgbW5Aba243B1nYFHdZFm79s8KCMSbGHl9w9vZB1FET4Gu3Xj0/BkK3l7
Iix5dIm80VAXjGOTdStOL31b1dytjpKsOtHbqxZCthoJk7A5ZXH+6NF3vl78EOzZt6Cbfu3JHwg3
d9BKWfU3FMBc8ySC6nORj4eVnxB6uUXwc4PAjkrR4JWhEFGuFVzb4PcNugN3Lkozpgjr7TkFe+2z
0BfeDPtnw2ArZOAWM7t8RoVl/wQnEqfi1N76aW0ag2hTa0VvmD7thqofaqGWvAOOrc3ZqEsaAudS
RnwhA8jaCflCPgz5Q+Ffyt6j+k7Y26tYAa78lqH8/qH89Y2+c7oThQozMyi/i1w7IprlWyFuOkON
dXCW3wnfZwPhXEmiy++BeelI7trZNvBbTQm34nB10a5mrXxji8YkWrUm4QkYhHBR3W7C2asRLRa/
ON6qn7Drs4+6pDQGQdEoePfMgLOIqWcZfW3lUGqAbrOC+XbvW/BJx6gu51WNKkIo6CN9DXjv6uBF
QH0a1t3vwlnKFFg8jL48Du41w+FYPh7aZcPgLaI/p43GzoI3Oxobv4lS23xCZXWLbtkjrF7Lt6Qd
Ya1okoKiyQZx5kLjq0dy/mTRMt14aDJ7YSzklaOhL46GbfUd8JaN44du4kbhLrgOToevbRuC5ssI
BD1X94BXoOg54KH7yD3wtm6AfOjvsJdNhnUN11rLNLl6HAwrxkMuuRUOHh3LlWI0BIdyX5dPnjz+
aEtnj+hmsuiRXaLL4hY2r7mPtAJnWCNUBrfoMQRET7ckznx58KXdS18PqJYwlRUzG6y9DdK62+Bd
MxrymjFwrmfvsG4kpJIxsJQPgqXmdlg/5+b18N8RODWPmMvy/gn8Jz+Ea/dvYa7m5qCU75VFE6Ph
WD8OtnXMDmtpzRXMFqvuoCBUUMYEHMh6zXF+/5bXWpqbxeW2jn7SbpL2/DPpHoNHdOm8TIMBoXZD
NBz+6oUDS942GtKGIrR2NJxrRsFK4o7SCbCtHwX3hpEIVYyGa+1EuEnEuZGBVBkN64ZhkDewUG1g
IdlwC9zlI0mU/YyC8jFwlU/g9XjYSVxeNwa2stu5/ig0ZQ3CrrxplhMNJ15Td3eJjs4u0amiMiUr
480mekx2YfeYvoe0HIqQ7tRJ4nRj+x83r0xvPJV6HzzLo6mhWLjKJpLYBMgV9EWSdlZSY9XUUg39
spaEam8jJvB6DK/HwFNzN+xV45jWmEor72LwcU75RK41Fh76tW35cJzJuBf1hdkXT13u+IPKIgud
SRZao4UwC41BIkxCRT4Ol/77SAeFhqQ1brfodHhE6zfaqN1VVZm7s18NtjKHuldFIaAQrpkEeeN4
uCrvhG3jRMhVY2DfNA6uuslw1/bBVTsJ1ooxcNdNgHvLBFir+H5ZDEJVI3kci7ac8diX+XL4i7rS
/K8bDUN67GGhdTiERm/qJ/stVDrz/05a7XSKdtkuOtlUtbdrxYmGs49tXVN4ek/6X3G2cDKMpVEI
baS2akbAt5karaUFKISb2r2KOvrxlnHwbhpLoqPg2zACltWj0JF+Nw5l/gVbqopPnTh66dG2VpVo
vKyi33qFxm7/10l3XOoSLU1d4nKzRnTo9DecOPf1P7aXby/fmhPXvSf3MTTncxddwn66IgbuqkHw
0y38NeOIsRH4NnAXtHoizhU9gP15T2FL/kfttbUl1ScuNb2h0lh/1NYkiaZv2sSlb3r+/aQbv+lm
htEKo0Etzh9rFyfPXow5fOTE9K3VNRU1JYW7qwsWWjblzbJtz33LtqMf23On2WoKPrVUr8z4on5T
3aqvGs4taW9Xjdx36ahodZiEViOLlkb9/4O0Xvwnzi1tSPSdCecAAAAASUVORK5CYII=')
	#endregion
	$Button_gpupdate.Location = '357, 7'
	$Button_gpupdate.Name = "Button_gpupdate"
	$Button_gpupdate.Size = '64, 94'
	$Button_gpupdate.TabIndex = 7
	$Button_gpupdate.Text = "update gpo"
	$Button_gpupdate.TextAlign = 'BottomCenter'
	$Button_gpupdate.UseVisualStyleBackColor = $True
	$Button_gpupdate.add_Click($Button_gpupdate_Click)
	#
	# button_C
	#
	$button_C.Font = "Microsoft Sans Serif, 7.5pt"
	#region Binary Data
	$button_C.Image = [System.Convert]::FromBase64String('
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')
	#endregion
	$button_C.Location = '847, 7'
	$button_C.Name = "button_C"
	$button_C.Size = '64, 94'
	$button_C.TabIndex = 6
	$button_C.Text = "C$"
	$button_C.TextAlign = 'BottomCenter'
	$button_C.UseVisualStyleBackColor = $True
	$button_C.add_Click($button_C_Click)
	#
	# button_ipconfig
	#
	$button_ipconfig.Font = "Microsoft Sans Serif, 7.5pt"
	#region Binary Data
	$button_ipconfig.Image = [System.Convert]::FromBase64String('
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
AAAASUVORK5CYII=')
	#endregion
	$button_ipconfig.ImageAlign = 'TopCenter'
	$button_ipconfig.Location = '427, 7'
	$button_ipconfig.Name = "button_ipconfig"
	$button_ipconfig.Size = '64, 94'
	$button_ipconfig.TabIndex = 5
	$button_ipconfig.Text = "ipconfig"
	$button_ipconfig.TextAlign = 'BottomCenter'
	$button_ipconfig.UseVisualStyleBackColor = $True
	$button_ipconfig.add_Click($button_ipconfig_Click)
	#
	# button_cmd
	#
	$button_cmd.Font = "Microsoft Sans Serif, 7.5pt"
	#region Binary Data
	$button_cmd.Image = [System.Convert]::FromBase64String('
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')
	#endregion
	$button_cmd.Location = '287, 7'
	$button_cmd.Name = "button_cmd"
	$button_cmd.Size = '64, 94'
	$button_cmd.TabIndex = 4
	$button_cmd.Text = "Remote"
	$button_cmd.TextAlign = 'BottomCenter'
	$button_cmd.UseVisualStyleBackColor = $True
	$button_cmd.add_Click($button_cmd_Click)
	#
	# button_psremote
	#
	$button_psremote.Font = "Microsoft Sans Serif, 7.5pt"
	#region Binary Data
	$button_psremote.Image = [System.Convert]::FromBase64String('
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
sNbIAAAAAElFTkSuQmCC')
	#endregion
	$button_psremote.ImageAlign = 'TopCenter'
	$button_psremote.Location = '217, 7'
	$button_psremote.Name = "button_psremote"
	$button_psremote.Size = '64, 94'
	$button_psremote.TabIndex = 3
	$button_psremote.Text = "Remote"
	$button_psremote.TextAlign = 'BottomCenter'
	$button_psremote.UseVisualStyleBackColor = $False
	$button_psremote.add_Click($button_psremote_Click)
	#
	# button_ping
	#
	$button_ping.Font = "Microsoft Sans Serif, 7.5pt"
	#region Binary Data
	$button_ping.Image = [System.Convert]::FromBase64String('
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')
	#endregion
	$button_ping.Location = '497, 8'
	$button_ping.Name = "button_ping"
	$button_ping.Size = '64, 94'
	$button_ping.TabIndex = 2
	$button_ping.Text = "Ping"
	$button_ping.TextAlign = 'BottomCenter'
	$button_ping.UseVisualStyleBackColor = $True
	$button_ping.add_Click($button_ping_Click)
	#
	# button_rdp
	#
	$button_rdp.Font = "Microsoft Sans Serif, 7.5pt"
	#region Binary Data
	$button_rdp.Image = [System.Convert]::FromBase64String('
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
hpZn/w0y4dckWXCR9wAAAABJRU5ErkJggg==')
	#endregion
	$button_rdp.ImageAlign = 'TopCenter'
	$button_rdp.Location = '147, 7'
	$button_rdp.Name = "button_rdp"
	$button_rdp.Size = '64, 94'
	$button_rdp.TabIndex = 1
	$button_rdp.Text = "RDP"
	$button_rdp.TextAlign = 'BottomCenter'
	$button_rdp.UseVisualStyleBackColor = $True
	$button_rdp.add_Click($button_rdp_Click)
	#
	# button_MSRA
	#
	$button_MSRA.Font = "Microsoft Sans Serif, 7.5pt"
	#region Binary Data
	$button_MSRA.Image = [System.Convert]::FromBase64String('
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
z7n/A0DynXoKxZDhAAAAAElFTkSuQmCC')
	#endregion
	$button_MSRA.ImageAlign = 'TopCenter'
	$button_MSRA.Location = '7, 7'
	$button_MSRA.Name = "button_MSRA"
	$button_MSRA.Size = '64, 94'
	$button_MSRA.TabIndex = 0
	$button_MSRA.Text = "MSRA"
	$button_MSRA.TextAlign = 'BottomCenter'
	$button_MSRA.UseVisualStyleBackColor = $True
	$button_MSRA.add_Click($button_MSRA_Click)
	#
	# tabpage2
	#
	$tabpage2.Controls.Add($groupbox7)
	$tabpage2.Controls.Add($groupbox6)
	$tabpage2.Controls.Add($groupbox5)
	$tabpage2.Controls.Add($groupbox2)
	$tabpage2.Controls.Add($groupbox1)
	$tabpage2.Location = '4, 22'
	$tabpage2.Name = "tabpage2"
	$tabpage2.Padding = '3, 3, 3, 3'
	$tabpage2.Size = '1180, 107'
	$tabpage2.TabIndex = 1
	$tabpage2.Text = "Computer & OS"
	$tabpage2.UseVisualStyleBackColor = $True
	#
	# groupbox7
	#
	$groupbox7.Controls.Add($button_compmgmt)
	$groupbox7.Location = '744, 3'
	$groupbox7.Name = "groupbox7"
	$groupbox7.Size = '165, 101'
	$groupbox7.TabIndex = 9
	$groupbox7.TabStop = $False
	$groupbox7.Text = "MMC"
	#
	# button_compmgmt
	#
	$button_compmgmt.Location = '4, 17'
	$button_compmgmt.Name = "button_compmgmt"
	$button_compmgmt.Size = '155, 23'
	$button_compmgmt.TabIndex = 0
	$button_compmgmt.Text = "Computerverwaltung"
	$button_compmgmt.UseVisualStyleBackColor = $True
	$button_compmgmt.add_Click($button_compmgmt_Click)
	#
	# groupbox6
	#
	$groupbox6.Controls.Add($button_localadmins)
	$groupbox6.Controls.Add($button_folderrights)
	$groupbox6.Controls.Add($button_profilerights)
	$groupbox6.Controls.Add($button_homerights)
	$groupbox6.Location = '487, 3'
	$groupbox6.Name = "groupbox6"
	$groupbox6.Size = '251, 101'
	$groupbox6.TabIndex = 8
	$groupbox6.TabStop = $False
	$groupbox6.Text = "Rechte"
	#
	# button_localadmins
	#
	$button_localadmins.Location = '126, 43'
	$button_localadmins.Name = "button_localadmins"
	$button_localadmins.Size = '116, 23'
	$button_localadmins.TabIndex = 3
	$button_localadmins.Text = "Local Admins"
	$button_localadmins.UseVisualStyleBackColor = $True
	$button_localadmins.add_Click($button_localadmins_Click)
	#
	# button_folderrights
	#
	$button_folderrights.Location = '4, 43'
	$button_folderrights.Name = "button_folderrights"
	$button_folderrights.Size = '116, 23'
	$button_folderrights.TabIndex = 2
	$button_folderrights.Text = "Rechte Ordner"
	$button_folderrights.UseVisualStyleBackColor = $True
	$button_folderrights.add_Click($button_folderrights_Click)
	#
	# button_profilerights
	#
	$button_profilerights.Enabled = $False
	$button_profilerights.Location = '126, 17'
	$button_profilerights.Name = "button_profilerights"
	$button_profilerights.Size = '116, 23'
	$button_profilerights.TabIndex = 1
	$button_profilerights.Text = "Rechte Profile"
	$button_profilerights.UseVisualStyleBackColor = $True
	$button_profilerights.add_Click($button_profilerights_Click)
	#
	# button_homerights
	#
	$button_homerights.Enabled = $False
	$button_homerights.Location = '4, 17'
	$button_homerights.Name = "button_homerights"
	$button_homerights.Size = '116, 23'
	$button_homerights.TabIndex = 0
	$button_homerights.Text = "Rechte Home"
	$button_homerights.UseVisualStyleBackColor = $True
	$button_homerights.add_Click($button_homerights_Click)
	#
	# groupbox5
	#
	$groupbox5.Controls.Add($button_PCGroups)
	$groupbox5.Controls.Add($button_ComputerGroups)
	$groupbox5.Location = '304, 4'
	$groupbox5.Name = "groupbox5"
	$groupbox5.Size = '177, 100'
	$groupbox5.TabIndex = 7
	$groupbox5.TabStop = $False
	$groupbox5.Text = "Neugeräte"
	#
	# button_PCGroups
	#
	$button_PCGroups.Location = '4, 42'
	$button_PCGroups.Name = "button_PCGroups"
	$button_PCGroups.Size = '167, 23'
	$button_PCGroups.TabIndex = 1
	$button_PCGroups.Text = "PC Gruppen übertragen"
	$button_PCGroups.UseVisualStyleBackColor = $True
	$button_PCGroups.add_Click($button_PCGroups_Click)
	#
	# button_ComputerGroups
	#
	$button_ComputerGroups.Location = '4, 16'
	$button_ComputerGroups.Name = "button_ComputerGroups"
	$button_ComputerGroups.Size = '167, 23'
	$button_ComputerGroups.TabIndex = 0
	$button_ComputerGroups.Text = "Get Computer Groups"
	$button_ComputerGroups.UseVisualStyleBackColor = $True
	$button_ComputerGroups.add_Click($button_ComputerGroups_Click)
	#
	# groupbox2
	#
	$groupbox2.Controls.Add($button_autostart)
	$groupbox2.Controls.Add($button_installedSoftware)
	$groupbox2.Location = '200, 4'
	$groupbox2.Name = "groupbox2"
	$groupbox2.Size = '98, 100'
	$groupbox2.TabIndex = 6
	$groupbox2.TabStop = $False
	$groupbox2.Text = "OS / Software"
	#
	# button_autostart
	#
	$button_autostart.Location = '4, 42'
	$button_autostart.Name = "button_autostart"
	$button_autostart.Size = '88, 23'
	$button_autostart.TabIndex = 1
	$button_autostart.Text = "Autostart"
	$button_autostart.UseVisualStyleBackColor = $True
	$button_autostart.add_Click($button_autostart_Click)
	#
	# button_installedSoftware
	#
	$button_installedSoftware.Location = '4, 16'
	$button_installedSoftware.Name = "button_installedSoftware"
	$button_installedSoftware.Size = '88, 23'
	$button_installedSoftware.TabIndex = 0
	$button_installedSoftware.Text = "Inst. Software"
	$button_installedSoftware.UseVisualStyleBackColor = $True
	$button_installedSoftware.add_Click($button_installedSoftware_Click)
	#
	# groupbox1
	#
	$groupbox1.Controls.Add($button_printer)
	$groupbox1.Controls.Add($button_USBDevice)
	$groupbox1.Controls.Add($button_systemtype)
	$groupbox1.Controls.Add($button_memory)
	$groupbox1.Controls.Add($button_processor)
	$groupbox1.Controls.Add($button_mainboard)
	$groupbox1.Location = '4, 4'
	$groupbox1.Name = "groupbox1"
	$groupbox1.Size = '190, 100'
	$groupbox1.TabIndex = 0
	$groupbox1.TabStop = $False
	$groupbox1.Text = "Hardware"
	#
	# button_printer
	#
	$button_printer.Location = '98, 68'
	$button_printer.Name = "button_printer"
	$button_printer.Size = '84, 23'
	$button_printer.TabIndex = 5
	$button_printer.Text = "Printer"
	$button_printer.UseVisualStyleBackColor = $True
	$button_printer.add_Click($button_printer_Click)
	#
	# button_USBDevice
	#
	$button_USBDevice.Location = '98, 42'
	$button_USBDevice.Name = "button_USBDevice"
	$button_USBDevice.Size = '84, 23'
	$button_USBDevice.TabIndex = 4
	$button_USBDevice.Text = "USB Device"
	$button_USBDevice.UseVisualStyleBackColor = $True
	$button_USBDevice.add_Click($button_USBDevice_Click)
	#
	# button_systemtype
	#
	$button_systemtype.Location = '98, 16'
	$button_systemtype.Name = "button_systemtype"
	$button_systemtype.Size = '84, 23'
	$button_systemtype.TabIndex = 3
	$button_systemtype.Text = "System Type"
	$button_systemtype.UseVisualStyleBackColor = $True
	$button_systemtype.add_Click($button_systemtype_Click)
	#
	# button_memory
	#
	$button_memory.Location = '4, 68'
	$button_memory.Name = "button_memory"
	$button_memory.Size = '88, 23'
	$button_memory.TabIndex = 2
	$button_memory.Text = "Memory"
	$button_memory.UseVisualStyleBackColor = $True
	$button_memory.add_Click($button_memory_Click)
	#
	# button_processor
	#
	$button_processor.Location = '4, 42'
	$button_processor.Name = "button_processor"
	$button_processor.Size = '88, 23'
	$button_processor.TabIndex = 1
	$button_processor.Text = "CPU"
	$button_processor.UseVisualStyleBackColor = $True
	$button_processor.add_Click($button_processor_Click)
	#
	# button_mainboard
	#
	$button_mainboard.Location = '4, 16'
	$button_mainboard.Name = "button_mainboard"
	$button_mainboard.Size = '88, 23'
	$button_mainboard.TabIndex = 0
	$button_mainboard.Text = "Mainboard"
	$button_mainboard.UseVisualStyleBackColor = $True
	$button_mainboard.add_Click($button_mainboard_Click)
	#
	# tabpage3
	#
	$tabpage3.Controls.Add($button_hosts)
	$tabpage3.Controls.Add($button_checkWLAN)
	$tabpage3.Controls.Add($button_dns2)
	$tabpage3.Controls.Add($button_dns1)
	$tabpage3.Controls.Add($button_routetable)
	$tabpage3.Controls.Add($button_ipconfig2)
	$tabpage3.Location = '4, 22'
	$tabpage3.Name = "tabpage3"
	$tabpage3.Padding = '3, 3, 3, 3'
	$tabpage3.Size = '1180, 107'
	$tabpage3.TabIndex = 2
	$tabpage3.Text = "Netzwerk"
	$tabpage3.UseVisualStyleBackColor = $True
	#
	# button_hosts
	#
	$button_hosts.Location = '6, 64'
	$button_hosts.Name = "button_hosts"
	$button_hosts.Size = '75, 23'
	$button_hosts.TabIndex = 5
	$button_hosts.Text = "Hostsfile"
	$button_hosts.UseVisualStyleBackColor = $True
	$button_hosts.add_Click($button_hosts_Click)
	#
	# button_checkWLAN
	#
	$button_checkWLAN.Location = '168, 6'
	$button_checkWLAN.Name = "button_checkWLAN"
	$button_checkWLAN.Size = '156, 23'
	$button_checkWLAN.TabIndex = 4
	$button_checkWLAN.Text = "Check WLAN"
	$button_checkWLAN.UseVisualStyleBackColor = $True
	$button_checkWLAN.add_Click($button_checkWLAN_Click)
	#
	# button_dns2
	#
	$button_dns2.Location = '87, 35'
	$button_dns2.Name = "button_dns2"
	$button_dns2.Size = '75, 23'
	$button_dns2.TabIndex = 3
	$button_dns2.Text = "DNS2"
	$button_dns2.UseVisualStyleBackColor = $True
	$button_dns2.add_Click($button_dns2_Click)
	#
	# button_dns1
	#
	$button_dns1.Location = '87, 6'
	$button_dns1.Name = "button_dns1"
	$button_dns1.Size = '75, 23'
	$button_dns1.TabIndex = 2
	$button_dns1.Text = "DNS1"
	$button_dns1.UseVisualStyleBackColor = $True
	$button_dns1.add_Click($button_dns1_Click)
	#
	# button_routetable
	#
	$button_routetable.Location = '6, 35'
	$button_routetable.Name = "button_routetable"
	$button_routetable.Size = '75, 23'
	$button_routetable.TabIndex = 1
	$button_routetable.Text = "Route Table"
	$button_routetable.UseVisualStyleBackColor = $True
	$button_routetable.add_Click($button_routetable_Click)
	#
	# button_ipconfig2
	#
	$button_ipconfig2.Location = '6, 6'
	$button_ipconfig2.Name = "button_ipconfig2"
	$button_ipconfig2.Size = '75, 23'
	$button_ipconfig2.TabIndex = 0
	$button_ipconfig2.Text = "IP Config"
	$button_ipconfig2.UseVisualStyleBackColor = $True
	$button_ipconfig2.add_Click($button_ipconfig2_Click)
	#
	# tabpage4
	#
	$tabpage4.Controls.Add($button_proclasthour)
	$tabpage4.Controls.Add($button_process)
	$tabpage4.Location = '4, 22'
	$tabpage4.Name = "tabpage4"
	$tabpage4.Padding = '3, 3, 3, 3'
	$tabpage4.Size = '1180, 107'
	$tabpage4.TabIndex = 3
	$tabpage4.Text = "Prozesse"
	$tabpage4.UseVisualStyleBackColor = $True
	#
	# button_proclasthour
	#
	$button_proclasthour.Location = '7, 36'
	$button_proclasthour.Name = "button_proclasthour"
	$button_proclasthour.Size = '120, 23'
	$button_proclasthour.TabIndex = 1
	$button_proclasthour.Text = "Started in Last Hour"
	$button_proclasthour.UseVisualStyleBackColor = $True
	$button_proclasthour.add_Click($button_proclasthour_Click)
	#
	# button_process
	#
	$button_process.Location = '7, 7'
	$button_process.Name = "button_process"
	$button_process.Size = '120, 23'
	$button_process.TabIndex = 0
	$button_process.Text = "Prozesse"
	$button_process.UseVisualStyleBackColor = $True
	$button_process.add_Click($button_process_Click)
	#
	# tabpage5
	#
	$tabpage5.Controls.Add($groupbox4)
	$tabpage5.Controls.Add($button_servicesnonstandard)
	$tabpage5.Controls.Add($button_servicesautostop)
	$tabpage5.Controls.Add($button_servicesauto)
	$tabpage5.Controls.Add($button_servicesrunning)
	$tabpage5.Controls.Add($button_services)
	$tabpage5.Controls.Add($button_MMCServices)
	$tabpage5.Location = '4, 22'
	$tabpage5.Name = "tabpage5"
	$tabpage5.Padding = '3, 3, 3, 3'
	$tabpage5.Size = '1180, 107'
	$tabpage5.TabIndex = 4
	$tabpage5.Text = "Dienste"
	$tabpage5.UseVisualStyleBackColor = $True
	#
	# groupbox4
	#
	$groupbox4.Controls.Add($button_servicesstop)
	$groupbox4.Controls.Add($button_servicesstart)
	$groupbox4.Controls.Add($button_servicesrestart)
	$groupbox4.Controls.Add($button_servicescheck)
	$groupbox4.Controls.Add($textbox_services)
	$groupbox4.Location = '491, 7'
	$groupbox4.Name = "groupbox4"
	$groupbox4.Size = '240, 94'
	$groupbox4.TabIndex = 7
	$groupbox4.TabStop = $False
	$groupbox4.Text = "QueryStartStop"
	#
	# button_servicesstop
	#
	$button_servicesstop.Font = "Microsoft Sans Serif, 8.25pt, style=Bold"
	$button_servicesstop.ForeColor = 'Red'
	$button_servicesstop.Location = '171, 64'
	$button_servicesstop.Name = "button_servicesstop"
	$button_servicesstop.Size = '58, 20'
	$button_servicesstop.TabIndex = 4
	$button_servicesstop.Text = "Stop"
	$button_servicesstop.UseVisualStyleBackColor = $True
	$button_servicesstop.add_Click($button_servicesstop_Click)
	#
	# button_servicesstart
	#
	$button_servicesstart.Font = "Microsoft Sans Serif, 8.25pt, style=Bold"
	$button_servicesstart.ForeColor = 'Green'
	$button_servicesstart.Location = '171, 42'
	$button_servicesstart.Name = "button_servicesstart"
	$button_servicesstart.Size = '58, 20'
	$button_servicesstart.TabIndex = 3
	$button_servicesstart.Text = "Start"
	$button_servicesstart.UseVisualStyleBackColor = $True
	$button_servicesstart.add_Click($button_servicesstart_Click)
	#
	# button_servicesrestart
	#
	$button_servicesrestart.Font = "Microsoft Sans Serif, 8.25pt, style=Bold"
	$button_servicesrestart.Location = '171, 20'
	$button_servicesrestart.Name = "button_servicesrestart"
	$button_servicesrestart.Size = '58, 20'
	$button_servicesrestart.TabIndex = 2
	$button_servicesrestart.Text = "Restart"
	$button_servicesrestart.UseVisualStyleBackColor = $True
	$button_servicesrestart.add_Click($button_servicesrestart_Click)
	#
	# button_servicescheck
	#
	$button_servicescheck.Location = '114, 20'
	$button_servicescheck.Name = "button_servicescheck"
	$button_servicescheck.Size = '51, 20'
	$button_servicescheck.TabIndex = 1
	$button_servicescheck.Text = "Check"
	$button_servicescheck.UseVisualStyleBackColor = $True
	$button_servicescheck.add_Click($button_servicescheck_Click)
	#
	# textbox_services
	#
	$textbox_services.Location = '7, 20'
	$textbox_services.Name = "textbox_services"
	$textbox_services.Size = '100, 20'
	$textbox_services.TabIndex = 0
	$textbox_services.Text = "<Dienstname>"
	$textbox_services.add_MouseClick($textbox_services_MouseClick)
	#
	# button_servicesnonstandard
	#
	$button_servicesnonstandard.Location = '9, 62'
	$button_servicesnonstandard.Name = "button_servicesnonstandard"
	$button_servicesnonstandard.Size = '132, 23'
	$button_servicesnonstandard.TabIndex = 6
	$button_servicesnonstandard.Text = "Non Standard User"
	$button_servicesnonstandard.UseVisualStyleBackColor = $True
	$button_servicesnonstandard.add_Click($button_servicesnonstandard_Click)
	#
	# button_servicesautostop
	#
	$button_servicesautostop.Location = '147, 62'
	$button_servicesautostop.Name = "button_servicesautostop"
	$button_servicesautostop.Size = '141, 23'
	$button_servicesautostop.TabIndex = 5
	$button_servicesautostop.Text = "Automatisch und gestoppt"
	$button_servicesautostop.UseVisualStyleBackColor = $True
	$button_servicesautostop.add_Click($button_servicesautostop_Click)
	#
	# button_servicesauto
	#
	$button_servicesauto.Location = '147, 33'
	$button_servicesauto.Name = "button_servicesauto"
	$button_servicesauto.Size = '141, 23'
	$button_servicesauto.TabIndex = 4
	$button_servicesauto.Text = "Automatisch"
	$button_servicesauto.UseVisualStyleBackColor = $True
	$button_servicesauto.add_Click($button_servicesauto_Click)
	#
	# button_servicesrunning
	#
	$button_servicesrunning.Location = '147, 4'
	$button_servicesrunning.Name = "button_servicesrunning"
	$button_servicesrunning.Size = '141, 23'
	$button_servicesrunning.TabIndex = 3
	$button_servicesrunning.Text = "Ausgeführt"
	$button_servicesrunning.UseVisualStyleBackColor = $True
	$button_servicesrunning.add_Click($button_servicesrunning_Click)
	#
	# button_services
	#
	$button_services.Location = '9, 33'
	$button_services.Name = "button_services"
	$button_services.Size = '132, 23'
	$button_services.TabIndex = 1
	$button_services.Text = "Dienste"
	$button_services.UseVisualStyleBackColor = $True
	$button_services.add_Click($button_services_Click)
	#
	# button_MMCServices
	#
	$button_MMCServices.Location = '9, 4'
	$button_MMCServices.Name = "button_MMCServices"
	$button_MMCServices.Size = '132, 23'
	$button_MMCServices.TabIndex = 0
	$button_MMCServices.Text = "MMC - Dienste"
	$button_MMCServices.UseVisualStyleBackColor = $True
	$button_MMCServices.add_Click($button_MMCServices_Click)
	#
	# tabpage6
	#
	$tabpage6.Controls.Add($button_mappeddrives)
	$tabpage6.Controls.Add($button_openc)
	$tabpage6.Controls.Add($button_deleteoffline)
	$tabpage6.Controls.Add($button_volumes)
	$tabpage6.Controls.Add($button_diskusage)
	$tabpage6.Location = '4, 22'
	$tabpage6.Name = "tabpage6"
	$tabpage6.Padding = '3, 3, 3, 3'
	$tabpage6.Size = '1180, 107'
	$tabpage6.TabIndex = 5
	$tabpage6.Text = "Harddisk"
	$tabpage6.UseVisualStyleBackColor = $True
	#
	# button_mappeddrives
	#
	$button_mappeddrives.Location = '110, 62'
	$button_mappeddrives.Name = "button_mappeddrives"
	$button_mappeddrives.Size = '116, 23'
	$button_mappeddrives.TabIndex = 5
	$button_mappeddrives.Text = "Mapped Drives"
	$button_mappeddrives.UseVisualStyleBackColor = $True
	$button_mappeddrives.add_Click($button_mappeddrives_Click)
	#
	# button_openc
	#
	$button_openc.Location = '110, 33'
	$button_openc.Name = "button_openc"
	$button_openc.Size = '116, 23'
	$button_openc.TabIndex = 4
	$button_openc.Text = "C$ öffnen"
	$button_openc.UseVisualStyleBackColor = $True
	$button_openc.add_Click($button_openc_Click)
	#
	# button_deleteoffline
	#
	$button_deleteoffline.Location = '110, 4'
	$button_deleteoffline.Name = "button_deleteoffline"
	$button_deleteoffline.Size = '116, 23'
	$button_deleteoffline.TabIndex = 3
	$button_deleteoffline.Text = "Delete Offlinecache"
	$button_deleteoffline.UseVisualStyleBackColor = $True
	$button_deleteoffline.add_Click($button_deleteoffline_Click)
	#
	# button_volumes
	#
	$button_volumes.Location = '7, 33'
	$button_volumes.Name = "button_volumes"
	$button_volumes.Size = '97, 23'
	$button_volumes.TabIndex = 2
	$button_volumes.Text = "Datenträger"
	$button_volumes.UseVisualStyleBackColor = $True
	$button_volumes.add_Click($button_volumes_Click)
	#
	# button_diskusage
	#
	$button_diskusage.Location = '7, 4'
	$button_diskusage.Name = "button_diskusage"
	$button_diskusage.Size = '97, 23'
	$button_diskusage.TabIndex = 0
	$button_diskusage.Text = "Diskverbrauch"
	$button_diskusage.UseVisualStyleBackColor = $True
	$button_diskusage.add_Click($button_diskusage_Click)
	#
	# tabpage8
	#
	$tabpage8.Controls.Add($button_eventlognames)
	$tabpage8.Controls.Add($button_eventlog20)
	$tabpage8.Controls.Add($button_eventlogmmc)
	$tabpage8.Location = '4, 22'
	$tabpage8.Name = "tabpage8"
	$tabpage8.Padding = '3, 3, 3, 3'
	$tabpage8.Size = '1180, 107'
	$tabpage8.TabIndex = 7
	$tabpage8.Text = "Eventlog"
	$tabpage8.UseVisualStyleBackColor = $True
	#
	# button_eventlognames
	#
	$button_eventlognames.Location = '9, 62'
	$button_eventlognames.Name = "button_eventlognames"
	$button_eventlognames.Size = '98, 23'
	$button_eventlognames.TabIndex = 2
	$button_eventlognames.Text = "LogNames"
	$button_eventlognames.UseVisualStyleBackColor = $True
	$button_eventlognames.add_Click($button_eventlognames_Click)
	#
	# button_eventlog20
	#
	$button_eventlog20.Location = '9, 33'
	$button_eventlog20.Name = "button_eventlog20"
	$button_eventlog20.Size = '98, 23'
	$button_eventlog20.TabIndex = 1
	$button_eventlog20.Text = "Last20"
	$button_eventlog20.UseVisualStyleBackColor = $True
	$button_eventlog20.add_Click($button_eventlog20_Click)
	#
	# button_eventlogmmc
	#
	$button_eventlogmmc.Location = '9, 4'
	$button_eventlogmmc.Name = "button_eventlogmmc"
	$button_eventlogmmc.Size = '98, 23'
	$button_eventlogmmc.TabIndex = 0
	$button_eventlogmmc.Text = "Eventlog (MMC)"
	$button_eventlogmmc.UseVisualStyleBackColor = $True
	$button_eventlogmmc.add_Click($button_eventlogmmc_Click)
	#
	# tabpage10
	#
	$tabpage10.Controls.Add($button_getadvertisedsoftware)
	$tabpage10.Controls.Add($button_softwareinventory)
	$tabpage10.Controls.Add($button_machinepolicy)
	$tabpage10.Location = '4, 22'
	$tabpage10.Name = "tabpage10"
	$tabpage10.Padding = '3, 3, 3, 3'
	$tabpage10.Size = '1180, 107'
	$tabpage10.TabIndex = 9
	$tabpage10.Text = "SCCM"
	$tabpage10.UseVisualStyleBackColor = $True
	#
	# button_getadvertisedsoftware
	#
	$button_getadvertisedsoftware.Location = '8, 65'
	$button_getadvertisedsoftware.Name = "button_getadvertisedsoftware"
	$button_getadvertisedsoftware.Size = '258, 23'
	$button_getadvertisedsoftware.TabIndex = 2
	$button_getadvertisedsoftware.Text = "Get Advertised Software"
	$button_getadvertisedsoftware.UseVisualStyleBackColor = $True
	$button_getadvertisedsoftware.add_Click($button_getadvertisedsoftware_Click)
	#
	# button_softwareinventory
	#
	$button_softwareinventory.Location = '8, 36'
	$button_softwareinventory.Name = "button_softwareinventory"
	$button_softwareinventory.Size = '258, 23'
	$button_softwareinventory.TabIndex = 1
	$button_softwareinventory.Text = "Softwareinventurzyklus"
	$button_softwareinventory.UseVisualStyleBackColor = $True
	$button_softwareinventory.add_Click($button_softwareinventory_Click)
	#
	# button_machinepolicy
	#
	$button_machinepolicy.Location = '8, 7'
	$button_machinepolicy.Name = "button_machinepolicy"
	$button_machinepolicy.Size = '258, 23'
	$button_machinepolicy.TabIndex = 0
	$button_machinepolicy.Text = "Computerrichtlinienabruf und Auswertungszyklus"
	$button_machinepolicy.UseVisualStyleBackColor = $True
	$button_machinepolicy.add_Click($button_machinepolicy_Click)
	#
	# tabpage_debug
	#
	$tabpage_debug.Controls.Add($button_listvariables)
	$tabpage_debug.Controls.Add($textbox_debug)
	$tabpage_debug.Controls.Add($button_debug)
	$tabpage_debug.Location = '4, 22'
	$tabpage_debug.Name = "tabpage_debug"
	$tabpage_debug.Padding = '3, 3, 3, 3'
	$tabpage_debug.Size = '1180, 107'
	$tabpage_debug.TabIndex = 11
	$tabpage_debug.Text = "Debug"
	$tabpage_debug.UseVisualStyleBackColor = $True
	#
	# button_listvariables
	#
	$button_listvariables.Location = '608, 7'
	$button_listvariables.Name = "button_listvariables"
	$button_listvariables.Size = '92, 20'
	$button_listvariables.TabIndex = 3
	$button_listvariables.Text = "Get Variables"
	$button_listvariables.UseVisualStyleBackColor = $True
	$button_listvariables.add_Click($button_listvariables_Click)
	#
	# textbox_debug
	#
	$textbox_debug.BackColor = 'WindowText'
	$textbox_debug.Font = "Lucida Console, 8.25pt"
	$textbox_debug.ForeColor = 'Info'
	$textbox_debug.Location = '9, 7'
	$textbox_debug.Name = "textbox_debug"
	$textbox_debug.Size = '512, 18'
	$textbox_debug.TabIndex = 2
	$textbox_debug.add_KeyPress($textbox_debug_KeyPress)
	#
	# button_debug
	#
	$button_debug.Location = '527, 7'
	$button_debug.Name = "button_debug"
	$button_debug.Size = '75, 20'
	$button_debug.TabIndex = 1
	$button_debug.Text = "Run"
	$button_debug.UseVisualStyleBackColor = $True
	$button_debug.add_Click($button_debug_Click)
	#
	# statusbar1
	#
	$statusbar1.Location = '0, 787'
	$statusbar1.Name = "statusbar1"
	$statusbar1.Size = '1188, 20'
	$statusbar1.TabIndex = 7
	$statusbar1.Text = "statusbar1"
	#
	# toolstrip2
	#
	$toolstrip2.CanOverflow = $False
	$toolstrip2.GripMargin = '0, 0, 0, 0'
	$toolstrip2.GripStyle = 'Hidden'
	[void]$toolstrip2.Items.Add($Toolstrip_OS)
	[void]$toolstrip2.Items.Add($Toolstrip_OSStatus)
	[void]$toolstrip2.Items.Add($toolstripseparator6)
	[void]$toolstrip2.Items.Add($Toolstrip_Uptime)
	[void]$toolstrip2.Items.Add($Toolstrip_UptimeStatus)
	[void]$toolstrip2.Items.Add($toolstripseparator8)
	[void]$toolstrip2.Items.Add($toolstrip_User)
	[void]$toolstrip2.Items.Add($toolstrip_user_status)
	[void]$toolstrip2.Items.Add($toolstripseparator9)
	[void]$toolstrip2.Items.Add($toolstrip_home)
	[void]$toolstrip2.Items.Add($toolstrip_home_status)
	$toolstrip2.LayoutStyle = 'Flow'
	$toolstrip2.Location = '0, 60'
	$toolstrip2.Name = "toolstrip2"
	$toolstrip2.Padding = '5, 0, 1, 0'
	$toolstrip2.RenderMode = 'Professional'
	$toolstrip2.Size = '1188, 3'
	$toolstrip2.TabIndex = 8
	$toolstrip2.Text = "toolstrip2"
	#
	# toolstrip1
	#
	$toolstrip1.BackgroundImageLayout = 'None'
	$toolstrip1.CanOverflow = $False
	$toolstrip1.GripMargin = '0, 0, 0, 0'
	$toolstrip1.GripStyle = 'Hidden'
	[void]$toolstrip1.Items.Add($textbox_computername)
	[void]$toolstrip1.Items.Add($toolstripseparator5)
	[void]$toolstrip1.Items.Add($button_Check)
	[void]$toolstrip1.Items.Add($toolstriplabel2)
	[void]$toolstrip1.Items.Add($toolstripseparator7)
	[void]$toolstrip1.Items.Add($textbox_username)
	[void]$toolstrip1.Items.Add($toolstripseparator10)
	[void]$toolstrip1.Items.Add($button_GetPC)
	[void]$toolstrip1.Items.Add($toolstripseparator4)
	[void]$toolstrip1.Items.Add($button_WLAN)
	[void]$toolstrip1.Items.Add($toolstripseparator3)
	[void]$toolstrip1.Items.Add($toolstriplabel_WLANon)
	$toolstrip1.Location = '0, 24'
	$toolstrip1.Name = "toolstrip1"
	$toolstrip1.Padding = '5, 0, 5, 0'
	$toolstrip1.RenderMode = 'Professional'
	$toolstrip1.Size = '1188, 36'
	$toolstrip1.TabIndex = 6
	$toolstrip1.Text = "toolstrip1"
	#
	# menustrip1
	#
	[void]$menustrip1.Items.Add($FileToolStripMenuItem)
	[void]$menustrip1.Items.Add($toolstripmenuitem1)
	$menustrip1.Location = '0, 0'
	$menustrip1.Name = "menustrip1"
	$menustrip1.Padding = '5, 2, 0, 2'
	$menustrip1.RenderMode = 'Professional'
	$menustrip1.Size = '1188, 24'
	$menustrip1.TabIndex = 0
	$menustrip1.Text = "menustrip1"
	#
	# textbox_computername
	#
	$textbox_computername.AcceptsReturn = $True
	$textbox_computername.AcceptsTab = $True
	$textbox_computername.BackColor = '255, 203, 26'
	$textbox_computername.BorderStyle = 'FixedSingle'
	$textbox_computername.Font = "Consolas, 18pt"
	$textbox_computername.Name = "textbox_computername"
	$textbox_computername.Size = '200, 36'
	$textbox_computername.Text = "Localhost"
	$textbox_computername.TextBoxTextAlign = 'Center'
	$textbox_computername.ToolTipText = "Geben Sie einen Computernamen ein"
	$textbox_computername.add_KeyPress($textbox_computername_KeyPress)
	$textbox_computername.add_Click($textbox_computername_Click)
	$textbox_computername.add_TextChanged($textbox_computername_TextChanged)
	#
	# toolstriplabel2
	#
	$toolstriplabel2.Name = "toolstriplabel2"
	$toolstriplabel2.Size = '0, 33'
	#
	# Toolstrip_OS
	#
	$Toolstrip_OS.Font = "Segoe UI, 9pt, style=Bold"
	$Toolstrip_OS.Name = "Toolstrip_OS"
	$Toolstrip_OS.Size = '0, 0'
	#
	# Toolstrip_OSStatus
	#
	$Toolstrip_OSStatus.Name = "Toolstrip_OSStatus"
	$Toolstrip_OSStatus.Size = '0, 0'
	#
	# Toolstrip_Uptime
	#
	$Toolstrip_Uptime.Font = "Segoe UI, 9pt, style=Bold"
	$Toolstrip_Uptime.Name = "Toolstrip_Uptime"
	$Toolstrip_Uptime.Size = '0, 0'
	#
	# Toolstrip_UptimeStatus
	#
	$Toolstrip_UptimeStatus.Name = "Toolstrip_UptimeStatus"
	$Toolstrip_UptimeStatus.Size = '0, 0'
	#
	# toolstripseparator7
	#
	$toolstripseparator7.Name = "toolstripseparator7"
	$toolstripseparator7.Size = '6, 36'
	#
	# toolstripseparator6
	#
	$toolstripseparator6.Name = "toolstripseparator6"
	$toolstripseparator6.Size = '6, 23'
	$toolstripseparator6.Visible = $False
	#
	# toolstrip_User
	#
	$toolstrip_User.Font = "Segoe UI, 9pt, style=Bold"
	$toolstrip_User.Name = "toolstrip_User"
	$toolstrip_User.Size = '0, 0'
	#
	# toolstrip_user_status
	#
	$toolstrip_user_status.IsLink = $True
	$toolstrip_user_status.Name = "toolstrip_user_status"
	$toolstrip_user_status.Size = '0, 0'
	$toolstrip_user_status.add_Click($toolstrip_user_status_Click)
	#
	# toolstripseparator8
	#
	$toolstripseparator8.Name = "toolstripseparator8"
	$toolstripseparator8.Size = '6, 23'
	$toolstripseparator8.Visible = $False
	#
	# toolstrip_home
	#
	$toolstrip_home.Font = "Segoe UI, 9pt, style=Bold"
	$toolstrip_home.Name = "toolstrip_home"
	$toolstrip_home.Size = '0, 0'
	#
	# toolstrip_home_status
	#
	$toolstrip_home_status.Name = "toolstrip_home_status"
	$toolstrip_home_status.Size = '0, 0'
	$toolstrip_home_status.add_Click($toolstrip_home_status_Click)
	#
	# toolstripseparator9
	#
	$toolstripseparator9.Name = "toolstripseparator9"
	$toolstripseparator9.Size = '6, 23'
	$toolstripseparator9.Visible = $False
	#
	# FileToolStripMenuItem
	#
	[void]$FileToolStripMenuItem.DropDownItems.Add($toolsToolStripMenuItem)
	[void]$FileToolStripMenuItem.DropDownItems.Add($exportLogToolStripMenuItem)
	[void]$FileToolStripMenuItem.DropDownItems.Add($optionsToolStripMenuItem)
	[void]$FileToolStripMenuItem.DropDownItems.Add($quitToolStripMenuItem)
	$FileToolStripMenuItem.Name = "FileToolStripMenuItem"
	$FileToolStripMenuItem.Size = '37, 20'
	$FileToolStripMenuItem.Text = "File"
	#
	# button_Check
	#
	$button_Check.BackColor = 'Transparent'
	$button_Check.BackgroundImageLayout = 'None'
	$button_Check.DisplayStyle = 'Text'
	$button_Check.ForeColor = 'Desktop'
	$button_Check.ImageTransparentColor = 'White'
	$button_Check.Name = "button_Check"
	$button_Check.Size = '44, 33'
	$button_Check.Text = "Check"
	$button_Check.add_Click($button_check_click)
	#
	# toolstripmenuitem1
	#
	[void]$toolstripmenuitem1.DropDownItems.Add($aboutToolStripMenuItem)
	[void]$toolstripmenuitem1.DropDownItems.Add($changelogToolStripMenuItem)
	[void]$toolstripmenuitem1.DropDownItems.Add($requestFeatureToolStripMenuItem)
	$toolstripmenuitem1.Name = "toolstripmenuitem1"
	$toolstripmenuitem1.Size = '24, 20'
	$toolstripmenuitem1.Text = "?"
	#
	# aboutToolStripMenuItem
	#
	$aboutToolStripMenuItem.Name = "aboutToolStripMenuItem"
	$aboutToolStripMenuItem.Size = '132, 22'
	$aboutToolStripMenuItem.Text = "About"
	$aboutToolStripMenuItem.add_Click($aboutToolStripMenuItem_Click)
	#
	# textbox_username
	#
	$textbox_username.Name = "textbox_username"
	$textbox_username.Size = '100, 36'
	$textbox_username.Text = "Username"
	$textbox_username.TextBoxTextAlign = 'Center'
	$textbox_username.add_KeyPress($textbox_username_KeyPress)
	$textbox_username.add_Click($textbox_username_Click)
	#
	# button_GetPC
	#
	$button_GetPC.DisplayStyle = 'Text'
	#region Binary Data
	$button_GetPC.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAIDSURBVDhPpZLrS5NhGMb3j4SWh0oRQVExD4go
nkDpg4hGYKxG6WBogkMZKgPNCEVJFBGdGETEvgwyO9DJE5syZw3PIlPEE9pgBCLZ5XvdMB8Ew8gX
bl54nuf63dd90OGSnwCahxbPRNPAPMw9Xpg6ZmF46kZZ0xSKzJPIrhpDWsVnpBhGkKx3nAX8Pv7z
1zg8OoY/cITdn4fwbf/C0kYAN3Ma/w3gWfZL5kzTKBxjWyK2DftwI9tyMYCZKXbNHaD91bLYJrDX
sYbrWfUKwJrPE9M2M1OcVzOOpHI7Jr376Hi9ogHqFIANO0/MmmmbmSmm9a8ze+I4MrNWAdjtoJgW
cx+PSzg166yZZ8xM8XvXDix9c4jIqFYAjoriBV9AhEPv1mH/sonogha0afbZMMZz+yreTGyhpusH
wtNNCsA5U1zS4BLxzJIfg299qO32Ir7UJtZfftyATqeT+8o2D8JSjQrAJblrncYL7ZJ2+bfaFnC/
1S1NjL3diRat7qrO7wLRP3HjWsojBeComDEo5mNjuweFGvjWg2EBhCbpkW78htSHHwRyNdmgAFzP
Eee2iFkzayy2OLXzT4gr6UdUnlXrullsxxQ+kx0g8BTA3aZlButjSTyjODq/WcQcW/B/Je4OQhLv
KQDnzN1mp0nnkvAhR8VuMzNrpm1mpjgkoVwB/v8DTgDQASA1MVpwzwAAAABJRU5ErkJggg==')
	#endregion
	$button_GetPC.ImageTransparentColor = 'Magenta'
	$button_GetPC.Name = "button_GetPC"
	$button_GetPC.Size = '47, 33'
	$button_GetPC.Text = "Get PC"
	$button_GetPC.add_Click($button_GetPC_Click)
	#
	# toolstripseparator10
	#
	$toolstripseparator10.Name = "toolstripseparator10"
	$toolstripseparator10.Size = '6, 36'
	#
	# toolstripseparator5
	#
	$toolstripseparator5.Name = "toolstripseparator5"
	$toolstripseparator5.Size = '6, 36'
	#
	# requestFeatureToolStripMenuItem
	#
	$requestFeatureToolStripMenuItem.Name = "requestFeatureToolStripMenuItem"
	$requestFeatureToolStripMenuItem.Size = '158, 22'
	$requestFeatureToolStripMenuItem.Text = "Request Feature"
	$requestFeatureToolStripMenuItem.add_Click($requestFeatureToolStripMenuItem_Click)
	#
	# quitToolStripMenuItem
	#
	$quitToolStripMenuItem.Name = "quitToolStripMenuItem"
	$quitToolStripMenuItem.Size = '152, 22'
	$quitToolStripMenuItem.Text = "Beenden"
	$quitToolStripMenuItem.add_Click($quitToolStripMenuItem_Click)
	#
	# toolstripseparator4
	#
	$toolstripseparator4.Name = "toolstripseparator4"
	$toolstripseparator4.Size = '6, 36'
	#
	# toolstriplabel_WLANon
	#
	$toolstriplabel_WLANon.Name = "toolstriplabel_WLANon"
	$toolstriplabel_WLANon.Size = '0, 33'
	#
	# button_WLAN
	#
	$button_WLAN.DisplayStyle = 'Text'
	$button_WLAN.Enabled = $False
	$button_WLAN.ImageAlign = 'TopCenter'
	$button_WLAN.ImageScaling = 'None'
	$button_WLAN.ImageTransparentColor = 'Magenta'
	$button_WLAN.Name = "button_WLAN"
	$button_WLAN.Size = '23, 33'
	$button_WLAN.add_Click($button_WLAN_Click)
	#
	# toolstripseparator3
	#
	$toolstripseparator3.Name = "toolstripseparator3"
	$toolstripseparator3.Size = '6, 36'
	$toolstripseparator3.Visible = $False
	#
	# changelogToolStripMenuItem
	#
	$changelogToolStripMenuItem.Name = "changelogToolStripMenuItem"
	$changelogToolStripMenuItem.Size = '132, 22'
	$changelogToolStripMenuItem.Text = "Changelog"
	$changelogToolStripMenuItem.add_Click($changelogToolStripMenuItem_Click)
	#
	# exportLogToolStripMenuItem
	#
	$exportLogToolStripMenuItem.Name = "exportLogToolStripMenuItem"
	$exportLogToolStripMenuItem.Size = '130, 22'
	$exportLogToolStripMenuItem.Text = "Export Log"
	$exportLogToolStripMenuItem.add_Click($exportLogToolStripMenuItem_Click)
	#
	# toolsToolStripMenuItem
	#
	[void]$toolsToolStripMenuItem.DropDownItems.Add($aDExplorerToolStripMenuItem)
	[void]$toolsToolStripMenuItem.DropDownItems.Add($nirLauncherToolStripMenuItem1)
	[void]$toolsToolStripMenuItem.DropDownItems.Add($procexpToolStripMenuItem)
	[void]$toolsToolStripMenuItem.DropDownItems.Add($procmonToolStripMenuItem)
	$toolsToolStripMenuItem.Name = "toolsToolStripMenuItem"
	$toolsToolStripMenuItem.Size = '130, 22'
	$toolsToolStripMenuItem.Text = "Tools"
	#
	# aDExplorerToolStripMenuItem
	#
	$aDExplorerToolStripMenuItem.Name = "aDExplorerToolStripMenuItem"
	$aDExplorerToolStripMenuItem.Size = '139, 22'
	$aDExplorerToolStripMenuItem.Text = "ADExplorer"
	$aDExplorerToolStripMenuItem.add_Click($aDExplorerToolStripMenuItem_Click)
	#
	# procexpToolStripMenuItem
	#
	$procexpToolStripMenuItem.Name = "procexpToolStripMenuItem"
	$procexpToolStripMenuItem.Size = '139, 22'
	$procexpToolStripMenuItem.Text = "Procexp"
	$procexpToolStripMenuItem.add_Click($procexpToolStripMenuItem_Click)
	#
	# procmonToolStripMenuItem
	#
	$procmonToolStripMenuItem.Name = "procmonToolStripMenuItem"
	$procmonToolStripMenuItem.Size = '152, 22'
	$procmonToolStripMenuItem.Text = "Procmon"
	$procmonToolStripMenuItem.add_Click($procmonToolStripMenuItem_Click)
	#
	# nirLauncherToolStripMenuItem1
	#
	$nirLauncherToolStripMenuItem1.Name = "nirLauncherToolStripMenuItem1"
	$nirLauncherToolStripMenuItem1.Size = '139, 22'
	$nirLauncherToolStripMenuItem1.Text = "NirLauncher"
	$nirLauncherToolStripMenuItem1.add_Click($nirLauncherToolStripMenuItem1_Click)
	#
	# optionsToolStripMenuItem
	#
	$optionsToolStripMenuItem.Name = "optionsToolStripMenuItem"
	$optionsToolStripMenuItem.Size = '130, 22'
	$optionsToolStripMenuItem.Text = "Optionen"
	$optionsToolStripMenuItem.add_Click($optionsToolStripMenuItem_Click)
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $MainForm.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$MainForm.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$MainForm.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$MainForm.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $MainForm.ShowDialog()

}
#endregion Source: MainForm.pff

#region Source: Globals.ps1
	#--------------------------------------------
	# Declare Global Variables and Functions here
	#--------------------------------------------
	
	#Configuration
	
	#region Configuration	
	############################################################################################
	#!!!!!!!!!!!!!!!!!!!!!!!!!!!!C O N F I G U R A T I O N!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	############################################################################################
	
		# Snapins
		Add-PSSnapin Quest.ActiveRoles.ADManagement
	
		# LazyAfiToolkit information
		$ApplicationName		= "Powershell Toolkit"
		$ApplicationVersion		= "2.0"
		$ApplicationLastUpdate	= "01.01.2015"
		
		# Author Information
		$AuthorName			= "Renato Bacchi"
		$AuthorEmail 		= "admin@renatobacchi.ch"
		$AuthorWWW			= "www.renatobacchi.ch/blog"
		
		# Text to show in the Status Bar when the form load 
		$StatusBarStartUp	= "$ApplicationName - $ApplicationVersion - (c) Renato Bacchi - $AuthorWWW"
		
		# Title of the MainForm / Mainform Titel
		$domain				= $env:userdomain.ToUpper()
		$MainFormTitle 		= "$ApplicationName $ApplicationVersion - Last Update: $ApplicationLastUpdate - $domain\$env:username"
		
		# Font Styles / Schrift Stile
		$bold = New-Object Drawing.Font("Lucida Console", 8, [Drawing.Fontstyle]::Bold)
	 	$norm = New-Object Drawing.Font("Lucida Console", 8, [Drawing.Fontstyle]::Regular)
		$log = New-Object Drawing.Font("Lucida Console", 1, [Drawing.Fontstyle]::Regular)
		[Drawing.Color]$gray = "Control"
		[Drawing.Color]$green = "Green"
		[Drawing.Color]$red = "Red"
		[Drawing.Color]$black = "Black"
	
		## Environment Variables / Umgebungsvariablen
		if (Test-Path "C:\Program Files (x86)"){$global:Programfiles = "C:\Program Files (x86)"}
		else {$global:Programfiles = "C:\Program Files"}
	
		# Folder / Ordner
		$global:Profilefolder ="\\na-afi01\profile$\"
		$global:Homefolder ="\\kt.ur.ch\kt\home\"
		$global:Outfile = $pwd
		$global:Confpath = $env:APPDATA += "\Powershell Toolkit\"
	
		# SCCM
		$global:SCCMEnabled = "true"
		$global:SiteName="V01"
	   	$global:SCCMServer="srv-sccm12.kt.ur.ch"
	    $global:SCCMNameSpace="root\sms\site_$SiteName"
		$global:CmRCViewer= "$global:Programfiles\ConfigMgr\bin\i386\CmRcViewer.exe"
	
		# External Tools
		$global:Nirlauncher = "$global:Programfiles\Nirsoft"
		$global:Sysinternals = "$global:Programfiles\Sysinternals"
		
		# Language / Sprache
		$global:Language = "English"
	
		# Changelog
		$changelog1_2 = "Version 1.2 `n- Einführung Changelog`n- Optimierung Resizing der Textbox`n- Loggingoption aktiviert (Datei - Export Log)`n- Timestamps eingeführt`n- Rechte Anzeigen für Home und Profile`n- Codeoptimierung und Bugfixes`n- Optimierung Debugger`n- Optimierung Layout`n`n"
		$changelog1_3 = "Version 1.3 `nBugs Behoben: `n`t- Autostart richtig formatiert`n`t- Mapped Drives werden richtig angezeigt`n`t- Installierte Software nach Softwarenamen sortiert`n`t- Uptime für 8.1 deaktiviert`n`t- User Unlock gefixt`n`t- Read Hostsfile eingerichtet`n`t- Computerverwaltung hinzugefügt`n`t Get Local Admins Hinzugefügt"
		$changelog = $changelog1_2 += $changelog1_3
	
	
	############################################################################################
	#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
	############################################################################################
	#endregion Configuration
	
	# Adder Functions / Funktionen
	
	#region Add-RichTextBox
		# Function - Add Text to RichTextBox
		function Add-RichTextBox{
			[CmdletBinding()]
			param ($text)
	
			$Newline = "`n-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=`n"
			#$richtextbox_output.Text += "`tCOMPUTERNAME: $ComputerName`n"
			$richtextbox_output.SelectionFont = $log
			$richtextbox_output.SelectionColor = $Gray
			$timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss`n"
			$richtextbox_output.AppendText($timestamp)
			$richtextbox_output.SelectionFont = $norm
			$richtextbox_output.SelectionColor = $Black
			$richtextbox_output.AppendText($text)
			$richtextbox_output.SelectionFont = $bold
			$richtextbox_output.AppendText($Newline)
		}
		#Set-Alias artb Add-RichTextBox -Description "Add content to the RichTextBox"
		#endregion
	
	#region Add-RichtextBoxOK
		function Add-RichTextBoxOK{
			[CmdletBinding()]
			param ($text)
	
			$Newline = "`n°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°`n"
			#$richtextbox_output.Text += "`tCOMPUTERNAME: $ComputerName`n"
			$richtextbox_output.SelectionFont = $log
			$richtextbox_output.SelectionColor = $Gray
			$timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss`n"
			$richtextbox_output.SelectionFont = $norm
			$richtextbox_output.SelectionColor = $Green
			$richtextbox_output.AppendText($text)
			$richtextbox_output.SelectionColor = $Black
			$richtextbox_output.AppendText($Newline)	
	}
	#endregion RichtextBoxOK
	
	#region Add-RichtextBoxTitle
		function Add-RichTextBoxTitle{
			[CmdletBinding()]
			param ($text)
	
			$Newline = "`n------------------------------------------------------------------------------------------------------------------------------------------------`n"
			#$richtextbox_output.Text += "`tCOMPUTERNAME: $ComputerName`n"
			$richtextbox_output.SelectionFont = $log
			$richtextbox_output.SelectionColor = $Gray
			$timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss`n"
			$richtextbox_output.SelectionFont = $bold
			$richtextbox_output.SelectionColor = $Black
			$richtextbox_output.AppendText($Newline)	
			$richtextbox_output.SelectionFont = $bold	
			$richtextbox_output.AppendText($text)
			$richtextbox_output.SelectionFont = $bold
			$richtextbox_output.AppendText($Newline)	
	}
	#endregion RichtextBoxWarn
	
	#region Add-RichtextBoxWarn
		function Add-RichTextBoxWarn{
			[CmdletBinding()]
			param ($text)
	
			$Newline = "`n°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°`n"
			#$richtextbox_output.Text += "`tCOMPUTERNAME: $ComputerName`n"
			$richtextbox_output.SelectionFont = $log
			$richtextbox_output.SelectionColor = $Gray
			$timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss`n"
			$richtextbox_output.SelectionFont = $norm
			$richtextbox_output.SelectionColor = $Red
			$richtextbox_output.AppendText($text)
			$richtextbox_output.SelectionColor = $Black
			$richtextbox_output.SelectionFont = $bold
			$richtextbox_output.AppendText($Newline)	
	}
	#endregion RichtextBoxWarn
	
	# Getter Functions Funktionen
	
	#region Get-ComputerTxtBox
	function Get-ComputerTxtBox
	{	$global:ComputerName = $textbox_computername.Text}
	#endregion
	
	#region Get-DiskSpace
		
		function Get-DiskSpace 
		{
		        
		    <#
		        .Synopsis  
		            Gets the disk space for specified host
		            
		        .Description
		            Gets the disk space for specified host
		            
		        .Parameter ComputerName
		            Name of the Computer to get the diskspace from (Default is localhost.)
		            
		        .Example
		            Get-Diskspace
		            # Gets diskspace from local machine
		    
		        .Example
		            Get-Diskspace -ComputerName MyServer
		            Description
		            -----------
		            Gets diskspace from MyServer
		            
		        .Example
		            $Servers | Get-Diskspace
		            Description
		            -----------
		            Gets diskspace for each machine in the pipeline
		            
		        .OUTPUTS
		            PSCustomObject
		            
		        .Notes
		            NAME:      Get-DiskSpace 
		            AUTHOR:    YetiCentral\bshell
		            Website:   www.bsonposh.com
		            #Requires -Version 2.0
		    #>
		    
		    [Cmdletbinding()]
		    Param(
		        [alias('dnsHostName')]
		        [Parameter(ValueFromPipelineByPropertyName=$true,ValueFromPipeline=$true)]
		        [string]$ComputerName = $Env:COMPUTERNAME
		    )
		    
		    Begin 
		    {
		        Write-Verbose " [Get-DiskSpace] :: Start Begin"
		        $Culture = New-Object System.Globalization.CultureInfo("en-US") 
		        Write-Verbose " [Get-DiskSpace] :: End Begin"
		    }
		    
		    Process 
		    {
		        Write-Verbose " [Get-DiskSpace] :: Start Process"
		        if($ComputerName -match "(.*)(\$)$")
		        {
		            $ComputerName = $ComputerName -replace "(.*)(\$)$",'$1'
		            
		        }
		        Write-Verbose " [Get-DiskSpace] :: `$ComputerName - $ComputerName"
		        Write-Verbose " [Get-DiskSpace] :: Testing Connectivity"
		        if(Test-Host $ComputerName -TCPPort 135)
		        {
		            Write-Verbose " [Get-DiskSpace] :: Connectivity Passed"
		            try
		            {
		                Write-Verbose " [Get-DiskSpace] :: Getting Operating System Version using - Get-WmiObject Win32_OperatingSystem -ComputerName $ComputerName -Property Version"
		                $OSVersionInfo = Get-WmiObject Win32_OperatingSystem -ComputerName $ComputerName -Property Version -ea STOP
		                Write-Verbose " [Get-DiskSpace] :: Getting Operating System returned $($OSVersionInfo.Version)"
		                if($OSVersionInfo.Version -gt 5.2)
		                {
		                    Write-Verbose " [Get-DiskSpace] :: Version high enough to use Win32_Volume"
		                    Write-Verbose " [Get-DiskSpace] :: Calling Get-WmiObject -class Win32_Volume -ComputerName $ComputerName -Property `"Name`",`"FreeSpace`",`"Capacity`" -filter `"DriveType=3`""
		                    $DiskInfos = Get-WmiObject -class Win32_Volume                          `
		                                            -ComputerName $ComputerName                  `
		                                            -Property "Name","FreeSpace","Capacity"      `
		                                            -filter "DriveType=3" -ea STOP
		                    Write-Verbose " [Get-DiskSpace] :: Win32_Volume returned $($DiskInfos.count) disks"
		                    foreach($DiskInfo in $DiskInfos)
		                    {
		                        $myobj = @{}
		                        $myobj.ComputerName = $ComputerName
		                        $myobj.OSVersion    = $OSVersionInfo.Version
		                        $Myobj.Drive        = $DiskInfo.Name
		                        $Myobj.CapacityGB   = [float]($DiskInfo.Capacity/1GB).ToString("n2",$Culture)
		                        $Myobj.FreeSpaceGB  = [float]($DiskInfo.FreeSpace/1GB).ToString("n2",$Culture)
		                        $Myobj.PercentFree  = "{0:P2}" -f ($DiskInfo.FreeSpace / $DiskInfo.Capacity)
		                        $obj = New-Object PSObject -Property $myobj
		                        $obj.PSTypeNames.Clear()
		                        $obj.PSTypeNames.Add('BSonPosh.DiskSpace')
		                        $obj
		                    }
		                }
		                else
		                {
		                    Write-Verbose " [Get-DiskSpace] :: Version not high enough to use Win32_Volume using Win32_LogicalDisk"
		                    $DiskInfos = Get-WmiObject -class Win32_LogicalDisk                       `
		                                            -ComputerName $ComputerName                       `
		                                            -Property SystemName, DeviceID, FreeSpace, Size   `
		                                            -filter "DriveType=3" -ea STOP
		                    foreach($DiskInfo in $DiskInfos)
		                    {
		                        $myobj = @{}
		                        $myobj.ComputerName = $ComputerName
		                        $myobj.OSVersion    = $OSVersionInfo.Version
		                        $Myobj.Drive       = "{0}\" -f $DiskInfo.DeviceID
		                        $Myobj.CapacityGB   = [float]($DiskInfo.Capacity/1GB).ToString("n2",$Culture)
		                        $Myobj.FreeSpaceGB  = [float]($DiskInfo.FreeSpace/1GB).ToString("n2",$Culture)
		                        $Myobj.PercentFree  = "{0:P2}" -f ($DiskInfo.FreeSpace / $DiskInfo.Capacity)
		                        $obj = New-Object PSObject -Property $myobj
		                        $obj.PSTypeNames.Clear()
		                        $obj.PSTypeNames.Add('BSonPosh.DiskSpace')
		                        $obj
		                    }
		                }
		            }
		            catch
		            {
		                Write-Host " Host [$ComputerName] Failed with Error: $($Error[0])" -ForegroundColor Red
		            }
		        }
		        else
		        {
		            Write-Host " Host [$ComputerName] Failed Connectivity Test " -ForegroundColor Red
		        }
		        Write-Verbose " [Get-DiskSpace] :: End Process"
		    
		    }
		}
		    
		#endregion 
	
	#region Get-InstalledSoftware
		
		function Get-InstalledSoftware
		{
		
		    <#
		        .Synopsis
		            Gets the installed software using Uninstall regkey for specified host.
		
		        .Description
		            Gets the installed software using Uninstall regkey for specified host.
		
		        .Parameter ComputerName
		            Name of the Computer to get the installed software from (Default is localhost.)
		
		        .Example
		            Get-InstalledSoftware
		            Description
		            -----------
		            Gets installed software from local machine
		
		        .Example
		            Get-InstalledSoftware -ComputerName MyServer
		            Description
		            -----------
		            Gets installed software from MyServer
		
		        .Example
		            $Servers | Get-InstalledSoftware
		            Description
		            -----------
		            Gets installed software for each machine in the pipeline
		
		        .OUTPUTS
		            PSCustomObject
		
		        .Notes
		            NAME:      Get-InstalledSoftware
		            AUTHOR:    YetiCentral\bshell
		            Website:   www.bsonposh.com
		            #Requires -Version 2.0
		    #>
		
		    [Cmdletbinding()]
		    Param(
		        [alias('dnsHostName')]
		        [Parameter(ValueFromPipelineByPropertyName=$true,ValueFromPipeline=$true)]
		        [string]$ComputerName = $Env:COMPUTERNAME
		    )
		    begin 
		    {
		
		            Write-Verbose " [Get-InstalledPrograms] :: Start Begin"
		            $Culture = New-Object System.Globalization.CultureInfo("en-US")
		            Write-Verbose " [Get-InstalledPrograms] :: End Begin"
		
		    }
		    process 
		    {
		
		        Write-Verbose " [Get-InstalledPrograms] :: Start Process"
		        if($ComputerName -match "(.*)(\$)$")
		        {
		            $ComputerName = $ComputerName -replace "(.*)(\$)$",'$1'
		
		        }
		        Write-Verbose " [Get-InstalledPrograms] :: `$ComputerName - $ComputerName"
		        Write-Verbose " [Get-InstalledPrograms] :: Testing Connectivity"
		        if(Test-Host $ComputerName -TCPPort 135)
		        {
		            try
		            {
		                $RegKey = Get-RegistryKey -Path "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall" -ComputerName $ComputerName
		                foreach($key in $RegKey.GetSubKeyNames())   
		                {   
		                    $SubKey = $RegKey.OpenSubKey($key)
		                    if($SubKey.GetValue("DisplayName"))
		                    {
		                        $myobj = @{
		                            Name    = $SubKey.GetValue("DisplayName")   
		                            Version = $SubKey.GetValue("DisplayVersion")   
		                            Vendor  = $SubKey.GetValue("Publisher")
		                        }
		                        $obj = New-Object PSObject -Property $myobj
		                        $obj.PSTypeNames.Clear()
		                        $obj.PSTypeNames.Add('BSonPosh.SoftwareInfo')
		                        $obj
		                    }
		                }   
		            }
		            catch
		            {
		                Write-Host " Host [$ComputerName] Failed with Error: $($Error[0])" -ForegroundColor Red
		            }
		        }
		        else
		        {
		            Write-Host " Host [$ComputerName] Failed Connectivity Test " -ForegroundColor Red
		        }
		        Write-Verbose " [Get-InstalledPrograms] :: End Process"
		
		    }
		}
		
		#endregion 	
	
	#region Get-IP 
		
		function Get-IP
		{
		        
		    <#
		        .Synopsis 
		            Get the IP of the specified host.
		            
		        .Description
		            Get the IP of the specified host.
		            
		        .Parameter ComputerName
		            Name of the Computer to get IP (Default localhost.)
		                
		        .Example
		            Get-IP
		            Description
		            -----------
		            Get IP information the localhost
		            
		            
		        .OUTPUTS
		            PSCustomObject
		            
		        .INPUTS
		            System.String
		        
		        .Notes
		            NAME:      Get-IP
		            AUTHOR:    YetiCentral\bshell
		            Website:   www.bsonposh.com
		            #Requires -Version 2.0
		    #>
		    
		    [Cmdletbinding()]
		    Param(
		        [alias('dnsHostName')]
		        [Parameter(ValueFromPipelineByPropertyName=$true,ValueFromPipeline=$true)]
		        [string]$ComputerName = $Env:COMPUTERNAME
		    )
		    Process
		    {
		        $NICs = Get-WmiObject Win32_NetworkAdapterConfiguration -Filter "IPEnabled='$True'" -ComputerName $ComputerName
		        foreach($Nic in $NICs)
		        {
		            $myobj = @{
		                Name          = $Nic.Description
		                MacAddress    = $Nic.MACAddress
		                IP4           = $Nic.IPAddress | where{$_ -match "\d+\.\d+\.\d+\.\d+"}
		                IP6           = $Nic.IPAddress | where{$_ -match "\:\:"}
		                IP4Subnet     = $Nic.IPSubnet  | where{$_ -match "\d+\.\d+\.\d+\.\d+"}
		                DefaultGWY    = $Nic.DefaultIPGateway | Select -First 1
		                DNSServer     = $Nic.DNSServerSearchOrder
		                WINSPrimary   = $Nic.WINSPrimaryServer
		                WINSSecondary = $Nic.WINSSecondaryServer
		            }
		            $obj = New-Object PSObject -Property $myobj
		            $obj.PSTypeNames.Clear()
		            $obj.PSTypeNames.Add('BSonPosh.IPInfo')
		            $obj
		        }
		    }
		}
		    
		#endregion 
	
	#region Get-MemoryConfiguration 
		
		function Get-MemoryConfiguration
		{
		        
		    <#
		        .Synopsis 
		            Gets the Memory Config for specified host.
		            
		        .Description
		            Gets the Memory Config for specified host.
		            
		        .Parameter ComputerName
		            Name of the Computer to get the Memory Config from (Default is localhost.)
		            
		        .Example
		            Get-MemoryConfiguration
		            Description
		            -----------
		            Gets Memory Config from local machine
		    
		        .Example
		            Get-MemoryConfiguration -ComputerName MyServer
		            Description
		            -----------
		            Gets Memory Config from MyServer
		            
		        .Example
		            $Servers | Get-MemoryConfiguration
		            Description
		            -----------
		            Gets Memory Config for each machine in the pipeline
		            
		        .OUTPUTS
		            PSCustomObject
		            
		        .Notes
		            NAME:      Get-MemoryConfiguration 
		            AUTHOR:    YetiCentral\bshell
		            Website:   www.bsonposh.com
		            #Requires -Version 2.0
		    #>
		    
		    [Cmdletbinding()]
		    Param(
		        [alias('dnsHostName')]
		        [Parameter(ValueFromPipelineByPropertyName=$true,ValueFromPipeline=$true)]
		        [string]$ComputerName = $Env:COMPUTERNAME
		    )
		    
		    Process 
		    {
		    
		        Write-Verbose " [Get-MemoryConfiguration] :: Begin Process"
		        if($ComputerName -match "(.*)(\$)$")
		        {
		            $ComputerName = $ComputerName -replace "(.*)(\$)$",'$1'
		        }
		        if(Test-Host $ComputerName -TCPPort 135)
		        {
		            Write-Verbose " [Get-MemoryConfiguration] :: Processing $ComputerName"
		            try
		            {
		                $MemorySlots = Get-WmiObject Win32_PhysicalMemory -ComputerName $ComputerName -ea STOP
		                foreach($Dimm in $MemorySlots)
		                {
		                    $myobj = @{}
		                    $myobj.ComputerName = $ComputerName
		                    $myobj.Description  = $Dimm.Tag
		                    $myobj.Slot         = $Dimm.DeviceLocator
		                    $myobj.Speed        = $Dimm.Speed
		                    $myobj.SizeGB       = $Dimm.Capacity/1gb
		                    
		                    $obj = New-Object PSObject -Property $myobj
		                    $obj.PSTypeNames.Clear()
		                    $obj.PSTypeNames.Add('BSonPosh.MemoryConfiguration')
		                    $obj
		                }
		            }
		            catch
		            {
		                Write-Host " Host [$ComputerName] Failed with Error: $($Error[0])" -ForegroundColor Red
		            }    
		        }
		        else
		        {
		            Write-Host " Host [$ComputerName] Failed Connectivity Test " -ForegroundColor Red
		        }
		        Write-Verbose " [Get-MemoryConfiguration] :: End Process"
		    
		    }
		}
		    
		#endregion 
	
	#region Get-MotherBoard
		
		function Get-MotherBoard
		{
		        
		    <#
		        .Synopsis 
		            Gets the Mother Board info for specified host.
		            
		        .Description
		            Gets the Mother Board info for specified host.
		            
		        .Parameter ComputerName
		            Name of the Computer to get the Mother Board info from (Default is localhost.) 
		            
		        .Example
		            Get-MotherBoard
		            Description
		            -----------
		            Gets Mother Board info from local machine
		    
		        .Example
		            Get-MotherBoard -ComputerName MyOtherDesktop
		            Description
		            -----------
		            Gets Mother Board info from MyOtherDesktop
		            
		        .Example
		            $Windows7Machines | Get-MotherBoard
		            Description
		            -----------
		            Gets Mother Board info for each machine in the pipeline
		            
		        .OUTPUTS
		            PSCustomObject
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            N/A
		            
		        .Notes
		            NAME:      Get-MotherBoard
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		    
		    [Cmdletbinding()]
		    Param(
		        [alias('dnsHostName')]
		        [Parameter(ValueFromPipelineByPropertyName=$true,ValueFromPipeline=$true)]
		        [string]$ComputerName = $Env:COMPUTERNAME
		    )
		    
		    Process 
		    {
		    
		        if($ComputerName -match "(.*)(\$)$")
		        {
		            $ComputerName = $ComputerName -replace "(.*)(\$)$",'$1'
		        }
		        if(Test-Host -ComputerName $ComputerName -TCPPort 135)
		        {
		            try
		            {
		                $MBInfo = Get-WmiObject Win32_BaseBoard -ComputerName $ComputerName -ea STOP
		                $myobj = @{
		                    ComputerName     = $ComputerName
		                    Name             = $MBInfo.Product
		                    Manufacturer     = $MBInfo.Manufacturer
		                    Version          = $MBInfo.Version
		                    SerialNumber     = $MBInfo.SerialNumber
		                 }
		                
		                $obj = New-Object PSObject -Property $myobj
		                $obj.PSTypeNames.Clear()
		                $obj.PSTypeNames.Add('BSonPosh.Computer.MotherBoard')
		                $obj
		            }
		            catch
		            {
		                Write-Host " Host [$ComputerName] Failed with Error: $($Error[0])" -ForegroundColor Red
		            }
		        }
		        else
		        {
		            Write-Host " Host [$ComputerName] Failed Connectivity Test " -ForegroundColor Red
		        }
		    
		    }
		}
		    
		#endregion # Get-MotherBoard
	
	#region Get-NicInfo 
		
		function Get-NICInfo
		{
		
		    <#
		        .Synopsis  
		            Gets the NIC info for specified host
		            
		        .Description
		            Gets the NIC info for specified host
		            
		        .Parameter ComputerName
		            Name of the Computer to get the NIC info from (Default is localhost.)
		            
		        .Example
		            Get-NicInfo
		            # Gets NIC info from local machine
		    
		        .Example
		            Get-NicInfo -ComputerName MyServer
		            Description
		            -----------
		            Gets NIC info from MyServer
		            
		        .Example
		            $Servers | Get-NicInfo
		            Description
		            -----------
		            Gets NIC info for each machine in the pipeline
		            
		        .OUTPUTS
		            PSCustomObject
		            
		        .Notes
		            NAME:      Get-NicInfo 
		            AUTHOR:    YetiCentral\bshell
		            Website:   www.bsonposh.com
		            #Requires -Version 2.0
		    #>
		    
			[Cmdletbinding()]
			Param(
			    [alias('dnsHostName')]
				[Parameter(ValueFromPipelineByPropertyName=$true,ValueFromPipeline=$true)]
				[string]$ComputerName = $Env:COMPUTERNAME
			)
		
			Process
			{
				if($ComputerName -match "(.*)(\$)$")
				{
					$ComputerName = $ComputerName -replace "(.*)(\$)$",'$1'
				}
				
				if(Test-Host -ComputerName $ComputerName -TCPPort 135)
				{
					try
					{
						$NICS = Get-WmiObject -class Win32_NetworkAdapterConfiguration -ComputerName $ComputerName
						
						foreach($NIC in $NICS)
						{
							$Query = "Select Name,NetConnectionID FROM Win32_NetworkAdapter WHERE Index='$($NIC.Index)'"
							$NetConnnectionID = Get-WmiObject -Query $Query -ComputerName $ComputerName
							
							$myobj = @{
		                        ComputerName = $ComputerName
								Name         = $NetConnnectionID.Name
								NetID        = $NetConnnectionID.NetConnectionID
								MacAddress   = $NIC.MacAddress
								IP           = $NIC.IPAddress | ?{$_ -match "\d*\.\d*\.\d*\."}
								Subnet       = $NIC.IPSubnet  | ?{$_ -match "\d*\.\d*\.\d*\."}
								Enabled      = $NIC.IPEnabled
								Index        = $NIC.Index
							}
							
							$obj = New-Object PSObject -Property $myobj
							$obj.PSTypeNames.Clear()
							$obj.PSTypeNames.Add('BSonPosh.NICInfo')
							$obj
						}
					}
					catch
					{
						Add-RichTextBoxWarn -text "Host $ComputerName Failed"
					}
				}
				else
				{
					Add-RichTextBoxWarn -text "Host $ComputerName Failed Connectivity Test"
				}
			}
		} 
		
		#endregion 
	
	#region Get-Processor
		
		function Get-Processor
		{
		        
		    <#
		        .Synopsis 
		            Gets the Computer Processor info for specified host.
		            
		        .Description
		            Gets the Computer Processor info for specified host.
		            
		        .Parameter ComputerName
		            Name of the Computer to get the Computer Processor info from (Default is localhost.)
		            
		        .Example
		            Get-Processor
		            Description
		            -----------
		            Gets Computer Processor info from local machine
		    
		        .Example
		            Get-Processor -ComputerName MyServer
		            Description
		            -----------
		            Gets Computer Processor info from MyServer
		            
		        .Example
		            $Servers | Get-Processor
		            Description
		            -----------
		            Gets Computer Processor info for each machine in the pipeline
		            
		        .OUTPUTS
		            PSCustomObject
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            N/A
		            
		        .Notes
		            NAME:      Get-Processor
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		    
		    [Cmdletbinding()]
		    Param(
		        [alias('dnsHostName')]
		        [Parameter(ValueFromPipelineByPropertyName=$true,ValueFromPipeline=$true)]
		        [string]$ComputerName = $Env:COMPUTERNAME
		    )
		    
		    Process 
		    {
		    
		        if($ComputerName -match "(.*)(\$)$")
		        {
		            $ComputerName = $ComputerName -replace "(.*)(\$)$",'$1'
		        }
		        if(Test-Host -ComputerName $ComputerName -TCPPort 135)
		        {
		            try
		            {
		                $CPUS = Get-WmiObject Win32_Processor -ComputerName $ComputerName -ea STOP
		                foreach($CPU in $CPUs)
		                {
		                    $myobj = @{
		                        ComputerName = $ComputerName
		                        Name         = $CPU.Name
		                        Manufacturer = $CPU.Manufacturer
		                        Speed        = $CPU.MaxClockSpeed
		                        Cores        = $CPU.NumberOfCores
		                        L2Cache      = $CPU.L2CacheSize
		                        Stepping     = $CPU.Stepping
		                    }
		                }
		                $obj = New-Object PSObject -Property $myobj
		                $obj.PSTypeNames.Clear()
		                $obj.PSTypeNames.Add('BSonPosh.Computer.Processor')
		                $obj
		            }
		            catch
		            {
		                Write-Host " Host [$ComputerName] Failed with Error: $($Error[0])" -ForegroundColor Red
		            }
		        }
		        else
		        {
		            Write-Host " Host [$ComputerName] Failed Connectivity Test " -ForegroundColor Red
		        }
		    
		    }
		}
		    
		#endregion
	
	#region Get-RegistryHive 
		
		function Get-RegistryHive 
		{
		    param($HiveName)
		    Switch -regex ($HiveName)
		    {
		        "^(HKCR|ClassesRoot|HKEY_CLASSES_ROOT)$"               {[Microsoft.Win32.RegistryHive]"ClassesRoot";continue}
		        "^(HKCU|CurrentUser|HKEY_CURRENTt_USER)$"              {[Microsoft.Win32.RegistryHive]"CurrentUser";continue}
		        "^(HKLM|LocalMachine|HKEY_LOCAL_MACHINE)$"          {[Microsoft.Win32.RegistryHive]"LocalMachine";continue} 
		        "^(HKU|Users|HKEY_USERS)$"                          {[Microsoft.Win32.RegistryHive]"Users";continue}
		        "^(HKCC|CurrentConfig|HKEY_CURRENT_CONFIG)$"          {[Microsoft.Win32.RegistryHive]"CurrentConfig";continue}
		        "^(HKPD|PerformanceData|HKEY_PERFORMANCE_DATA)$"    {[Microsoft.Win32.RegistryHive]"PerformanceData";continue}
		        Default                                                {1;continue}
		    }
		}
		    
		#endregion 
		
	#region Get-RegistryKey 
		
		function Get-RegistryKey 
		{
		        
		    <#
		        .Synopsis 
		            Gets the registry key provide by Path.
		            
		        .Description
		            Gets the registry key provide by Path.
		                        
		        .Parameter Path 
		            Path to the key.
		            
		        .Parameter ComputerName 
		            Computer to get the registry key from.
		            
		        .Parameter Recurse 
		            Recursively returns registry keys starting from the Path.
		        
		        .Parameter ReadWrite
		            Returns the Registry key in Read Write mode.
		            
		        .Example
		            Get-registrykey HKLM\Software\Adobe
		            Description
		            -----------
		            Returns the Registry key for HKLM\Software\Adobe
		            
		        .Example
		            Get-registrykey HKLM\Software\Adobe -ComputerName MyServer1
		            Description
		            -----------
		            Returns the Registry key for HKLM\Software\Adobe on MyServer1
		        
		        .Example
		            Get-registrykey HKLM\Software\Adobe -Recurse
		            Description
		            -----------
		            Returns the Registry key for HKLM\Software\Adobe and all child keys
		                    
		        .OUTPUTS
		            Microsoft.Win32.RegistryKey
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            New-RegistryKey
		            Remove-RegistryKey
		            Test-RegistryKey
		        .Notes
		            NAME:      Get-RegistryKey
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		        
		    [Cmdletbinding()]
		    Param(
		    
		        [Parameter(mandatory=$true)]
		        [string]$Path,
		        
		        [Alias("Server")]
		        [Parameter(ValueFromPipeline=$true)]
		        [string]$ComputerName = $Env:ComputerName,
		        
		        [Parameter()]
		        [switch]$Recurse,
		        
		        [Alias("RW")]
		        [Parameter()]
		        [switch]$ReadWrite
		        
		    )
		    
		    Begin 
		    {
		        
		        Write-Verbose " [Get-RegistryKey] :: Start Begin"
		        Write-Verbose " [Get-RegistryKey] :: `$Path = $Path"
		        Write-Verbose " [Get-RegistryKey] :: Getting `$Hive and `$KeyPath from $Path "
		        $PathParts = $Path -split "\\|/",0,"RegexMatch"
		        $Hive = $PathParts[0]
		        $KeyPath = $PathParts[1..$PathParts.count] -join "\"
		        Write-Verbose " [Get-RegistryKey] :: `$Hive = $Hive"
		        Write-Verbose " [Get-RegistryKey] :: `$KeyPath = $KeyPath"
		        
		        Write-Verbose " [Get-RegistryKey] :: End Begin"
		        
		    }
		    
		    Process 
		    {
		    
		        Write-Verbose " [Get-RegistryKey] :: Start Process"
		        Write-Verbose " [Get-RegistryKey] :: `$ComputerName = $ComputerName"
		        
		        $RegHive = Get-RegistryHive $hive
		        
		        if($RegHive -eq 1)
		        {
		            Write-Host "Invalid Path: $Path, Registry Hive [$hive] is invalid!" -ForegroundColor Red
		        }
		        else
		        {
		            Write-Verbose " [Get-RegistryKey] :: `$RegHive = $RegHive"
		            
		            $BaseKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($RegHive,$ComputerName)
		            Write-Verbose " [Get-RegistryKey] :: `$BaseKey = $BaseKey"
		    
		            if($ReadWrite)
		            {
		                try
		                {
		                    $Key = $BaseKey.OpenSubKey($KeyPath,$true)
		                    $Key = $Key | Add-Member -Name "ComputerName" -MemberType NoteProperty -Value $ComputerName -PassThru
		                    $Key = $Key | Add-Member -Name "Hive" -MemberType NoteProperty -Value $RegHive -PassThru 
		                    $Key = $Key | Add-Member -Name "Path" -MemberType NoteProperty -Value $KeyPath -PassThru
		                    $Key.PSTypeNames.Clear()
		                    $Key.PSTypeNames.Add('BSonPosh.Registry.Key')
		                    $Key
		                }
		                catch
		                {
		                    Write-Verbose " [Get-RegistryKey] ::  ERROR :: Unable to Open Key:$KeyPath in $KeyPath with RW Access"
		                }
		                
		            }
		            else
		            {
		                try
		                {
		                    $Key = $BaseKey.OpenSubKey("$KeyPath")
		                    if($Key)
		                    {
		                        $Key = $Key | Add-Member -Name "ComputerName" -MemberType NoteProperty -Value $ComputerName -PassThru
		                        $Key = $Key | Add-Member -Name "Hive" -MemberType NoteProperty -Value $RegHive -PassThru 
		                        $Key = $Key | Add-Member -Name "Path" -MemberType NoteProperty -Value $KeyPath -PassThru
		                        $Key.PSTypeNames.Clear()
		                        $Key.PSTypeNames.Add('BSonPosh.Registry.Key')
		                        $Key
		                    }
		                }
		                catch
		                {
		                    Write-Verbose " [Get-RegistryKey] ::  ERROR :: Unable to Open SubKey:$Name in $KeyPath"
		                }
		            }
		            
		            if($Recurse)
		            {
		                Write-Verbose " [Get-RegistryKey] :: Recurse Passed: Processing Subkeys of [$($Key.Name)]"
		                $Key
		                $SubKeyNames = $Key.GetSubKeyNames()
		                foreach($Name in $SubKeyNames)
		                {
		                    try
		                    {
		                        $SubKey = $Key.OpenSubKey($Name)
		                        if($SubKey.GetSubKeyNames())
		                        {
		                            Write-Verbose " [Get-RegistryKey] :: Calling [Get-RegistryKey] for [$($SubKey.Name)]"
		                            Get-RegistryKey -ComputerName $ComputerName -Path $SubKey.Name -Recurse
		                        }
		                        else
		                        {
		                            Get-RegistryKey -ComputerName $ComputerName -Path $SubKey.Name 
		                        }
		                    }
		                    catch
		                    {
		                        Write-Verbose " [Get-RegistryKey] ::  ERROR :: Write-Host Unable to Open SubKey:$Name in $($Key.Name)"
		                    }
		                }
		            }
		        }
		        Write-Verbose " [Get-RegistryKey] :: End Process"
		    
		    }
		}
		    
		#endregion 
		
	#region Get-RegistryValue 
		
		function Get-RegistryValue
		{
		    
		    <#
		        .Synopsis 
		            Get the value for given the registry value.
		            
		        .Description
		            Get the value for given the registry value.
		                        
		        .Parameter Path 
		            Path to the key that contains the value.
		            
		        .Parameter Name 
		            Name of the Value to check.
		            
		        .Parameter ComputerName 
		            Computer to get value.
		            
		        .Parameter Recurse 
		            Recursively gets the Values on the given key.
		            
		        .Parameter Default 
		            Returns the default value for the Value.
		        
		        .Example
		            Get-RegistryValue HKLM\SOFTWARE\Adobe\SwInstall -Name State 
		            Description
		            -----------
		            Returns value of State under HKLM\SOFTWARE\Adobe\SwInstall.
		            
		        .Example
		            Get-RegistryValue HKLM\Software\Adobe -Name State -ComputerName MyServer1
		            Description
		            -----------
		            Returns value of State under HKLM\SOFTWARE\Adobe\SwInstall on MyServer1
		            
		        .Example
		            Get-RegistryValue HKLM\Software\Adobe -Recurse
		            Description
		            -----------
		            Returns all the values under HKLM\SOFTWARE\Adobe.
		    
		        .Example
		            Get-RegistryValue HKLM\Software\Adobe -ComputerName MyServer1 -Recurse
		            Description
		            -----------
		            Returns all the values under HKLM\SOFTWARE\Adobe on MyServer1
		            
		        .Example
		            Get-RegistryValue HKLM\Software\Adobe -Default
		            Description
		            -----------
		            Returns the default value for HKLM\SOFTWARE\Adobe.
		                    
		        .OUTPUTS
		            PSCustomObject
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            New-RegistryValue
		            Remove-RegistryValue
		            Test-RegistryValue
		            
		        .Notes    
		            NAME:      Get-RegistryValue
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		    
		    [Cmdletbinding()]
		    Param(
		        [Parameter(mandatory=$true)]
		        [string]$Path,
		    
		        [Parameter()]
		        [string]$Name,
		        
		        [Alias("dnsHostName")]
		        [Parameter(ValueFromPipeline=$true)]
		        [string]$ComputerName = $Env:ComputerName,
		        
		        [Parameter()]
		        [switch]$Recurse,
		        
		        [Parameter()]
		        [switch]$Default
		    )
		    
		    Process
		    {
		    
		        Write-Verbose " [Get-RegistryValue] :: Begin Process"
		        Write-Verbose " [Get-RegistryValue] :: Calling Get-RegistryKey -Path $path -ComputerName $ComputerName"
		        
		        if($Recurse)
		        {
		            $Keys = Get-RegistryKey -Path $path -ComputerName $ComputerName -Recurse
		            foreach($Key in $Keys)
		            {
		                if($Name)
		                {
		                    try
		                    {
		                        Write-Verbose " [Get-RegistryValue] :: Getting Value for [$Name]"
		                        $myobj = @{} #| Select ComputerName,Name,Value,Type,Path
		                        $myobj.ComputerName = $ComputerName
		                        $myobj.Name = $Name
		                        $myobj.value = $Key.GetValue($Name)
		                        $myobj.Type = $Key.GetValueKind($Name)
		                        $myobj.path = $Key
		                        
		                        $obj = New-Object PSCustomObject -Property $myobj
		                        $obj.PSTypeNames.Clear()
		                        $obj.PSTypeNames.Add('BSonPosh.Registry.Value')
		                        $obj
		                    }
		                    catch
		                    {
		                        Write-Verbose " [Get-RegistryValue] ::  ERROR :: Unable to Get Value for:$Name in $($Key.Name)"
		                    }
		                
		                }
		                elseif($Default)
		                {
		                    try
		                    {
		                        Write-Verbose " [Get-RegistryValue] :: Getting Value for [(Default)]"
		                        $myobj = @{} #"" | Select ComputerName,Name,Value,Type,Path
		                        $myobj.ComputerName = $ComputerName
		                        $myobj.Name = "(Default)"
		                        $myobj.value = if($Key.GetValue("")){$Key.GetValue("")}else{"EMPTY"}
		                        $myobj.Type = if($Key.GetValue("")){$Key.GetValueKind("")}else{"N/A"}
		                        $myobj.path = $Key
		                        
		                        $obj = New-Object PSCustomObject -Property $myobj
		                        $obj.PSTypeNames.Clear()
		                        $obj.PSTypeNames.Add('BSonPosh.Registry.Value')
		                        $obj
		                    }
		                    catch
		                    {
		                        Write-Verbose " [Get-RegistryValue] ::  ERROR :: Unable to Get Value for:(Default) in $($Key.Name)"
		                    }
		                }
		                else
		                {
		                    try
		                    {
		                        Write-Verbose " [Get-RegistryValue] :: Getting all Values for [$Key]"
		                        foreach($ValueName in $Key.GetValueNames())
		                        {
		                            Write-Verbose " [Get-RegistryValue] :: Getting all Value for [$ValueName]"
		                            $myobj = @{} #"" | Select ComputerName,Name,Value,Type,Path
		                            $myobj.ComputerName = $ComputerName
		                            $myobj.Name = if($ValueName -match "^$"){"(Default)"}else{$ValueName}
		                            $myobj.value = $Key.GetValue($ValueName)
		                            $myobj.Type = $Key.GetValueKind($ValueName)
		                            $myobj.path = $Key
		                            
		                            $obj = New-Object PSCustomObject -Property $myobj
		                            $obj.PSTypeNames.Clear()
		                            $obj.PSTypeNames.Add('BSonPosh.Registry.Value')
		                            $obj
		                        }
		                    }
		                    catch
		                    {
		                        Write-Verbose " [Get-RegistryValue] ::  ERROR :: Unable to Get Value for:$ValueName in $($Key.Name)"
		                    }
		                }
		            }
		        }
		        else
		        {
		            $Key = Get-RegistryKey -Path $path -ComputerName $ComputerName 
		            Write-Verbose " [Get-RegistryValue] :: Get-RegistryKey returned $Key"
		            if($Name)
		            {
		                try
		                {
		                    Write-Verbose " [Get-RegistryValue] :: Getting Value for [$Name]"
		                    $myobj = @{} # | Select ComputerName,Name,Value,Type,Path
		                    $myobj.ComputerName = $ComputerName
		                    $myobj.Name = $Name
		                    $myobj.value = $Key.GetValue($Name)
		                    $myobj.Type = $Key.GetValueKind($Name)
		                    $myobj.path = $Key
		                    
		                    $obj = New-Object PSCustomObject -Property $myobj
		                    $obj.PSTypeNames.Clear()
		                    $obj.PSTypeNames.Add('BSonPosh.Registry.Value')
		                    $obj
		                }
		                catch
		                {
		                    Write-Verbose " [Get-RegistryValue] ::  ERROR :: Unable to Get Value for:$Name in $($Key.Name)"
		                }
		            }
		            elseif($Default)
		            {
		                try
		                {
		                    Write-Verbose " [Get-RegistryValue] :: Getting Value for [(Default)]"
		                    $myobj = @{} #"" | Select ComputerName,Name,Value,Type,Path
		                    $myobj.ComputerName = $ComputerName
		                    $myobj.Name = "(Default)"
		                    $myobj.value = if($Key.GetValue("")){$Key.GetValue("")}else{"EMPTY"}
		                    $myobj.Type = if($Key.GetValue("")){$Key.GetValueKind("")}else{"N/A"}
		                    $myobj.path = $Key
		                    
		                    $obj = New-Object PSCustomObject -Property $myobj
		                    $obj.PSTypeNames.Clear()
		                    $obj.PSTypeNames.Add('BSonPosh.Registry.Value')
		                    $obj
		                }
		                catch
		                {
		                    Write-Verbose " [Get-RegistryValue] ::  ERROR :: Unable to Get Value for:$Name in $($Key.Name)"
		                }
		            }
		            else
		            {
		                Write-Verbose " [Get-RegistryValue] :: Getting all Values for [$Key]"
		                foreach($ValueName in $Key.GetValueNames())
		                {
		                    Write-Verbose " [Get-RegistryValue] :: Getting all Value for [$ValueName]"
		                    $myobj = @{} #"" | Select ComputerName,Name,Value,Type,Path
		                    $myobj.ComputerName = $ComputerName
		                    $myobj.Name = if($ValueName -match "^$"){"(Default)"}else{$ValueName}
		                    $myobj.value = $Key.GetValue($ValueName)
		                    $myobj.Type = $Key.GetValueKind($ValueName)
		                    $myobj.path = $Key
		                    
		                    $obj = New-Object PSCustomObject -Property $myobj
		                    $obj.PSTypeNames.Clear()
		                    $obj.PSTypeNames.Add('BSonPosh.Registry.Value')
		                    $obj
		                }
		            }
		        }
		        
		        Write-Verbose " [Get-RegistryValue] :: End Process"
		    
		    }
		}
		    
		#endregion 
	
	#region Get-Routetable 
		
		function Get-Routetable
		{
		    
		    <#
		        .Synopsis 
		            Gets the route table for specified host.
		            
		        .Description
		            Gets the route table for specified host.
		            
		        .Parameter ComputerName
		            Name of the Computer to get the route table from (Default is localhost.)
		            
		        .Example
		            Get-RouteTable
		            Description
		            -----------
		            Gets route table from local machine
		    
		        .Example
		            Get-RouteTable -ComputerName MyServer
		            Description
		            -----------
		            Gets route table from MyServer
		            
		        .Example
		            $Servers | Get-RouteTable
		            Description
		            -----------
		            Gets route table for each machine in the pipeline
		            
		        .OUTPUTS
		            PSCustomObject
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            N/A
		            
		        .Notes
		            NAME:      Get-RouteTable
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		    
		    [Cmdletbinding()]
		    Param(
		        [alias('dnsHostName')]
		        [Parameter(ValueFromPipelineByPropertyName=$true,ValueFromPipeline=$true)]
		        [string]$ComputerName = $Env:COMPUTERNAME
		    )
		    process 
		    {
		    
		        if($ComputerName -match "(.*)(\$)$")
		        {
		            $ComputerName = $ComputerName -replace "(.*)(\$)$",'$1'
		        }
		        if(Test-Host $ComputerName -TCPPort 135)
		        {
		            $Routes = Get-WMIObject Win32_IP4RouteTable -ComputerName $ComputerName -Property Name,Mask,NextHop,Metric1,Type
		            foreach($Route in $Routes)
		            {
		                $myobj = @{}
		                $myobj.ComputerName = $ComputerName
		                $myobj.Name = $Route.Name
		                $myobj.NetworkMask = $Route.mask
		                $myobj.Gateway = if($Route.NextHop -eq "0.0.0.0"){"On-Link"}else{$Route.NextHop}
		                $myobj.Metric = $Route.Metric1
		                
		                $obj = New-Object PSObject -Property $myobj
		                $obj.PSTypeNames.Clear()
		                $obj.PSTypeNames.Add('BSonPosh.RouteTable')
		                $obj
		            }
		        }
		        else
		        {
		            Write-Host " Host [$ComputerName] Failed Connectivity Test " -ForegroundColor Red
		        }
		    
		    }
		}
		    
		#endregion 
	
	#region Get-SystemType 
		
		function Get-SystemType
		{
		        
		    <#
		        .Synopsis 
		            Gets the system type for specified host
		            
		        .Description
		            Gets the system type info for specified host
		            
		        .Parameter ComputerName
		            Name of the Computer to get the System Type from (Default is localhost.)
		            
		        .Example
		            Get-SystemType
		            Description
		            -----------
		            Gets System Type from local machine
		    
		        .Example
		            Get-SystemType -ComputerName MyServer
		            Description
		            -----------
		            Gets System Type from MyServer
		            
		        .Example
		            $Servers | Get-SystemType
		            Description
		            -----------
		            Gets System Type for each machine in the pipeline
		            
		        .OUTPUTS
		            PSObject
		            
		        .Notes
		            NAME:      Get-SystemType 
		            AUTHOR:    YetiCentral\bshell
		            Website:   www.bsonposh.com
		            #Requires -Version 2.0
		    #>
		    
		    [Cmdletbinding()]
		    Param(
		        [alias('dnsHostName')]
		        [Parameter(ValueFromPipelineByPropertyName=$true,ValueFromPipeline=$true)]
		        [string]$ComputerName = $Env:COMPUTERNAME
		    )
		    
		    Begin 
		    {
		    
		        function ConvertTo-ChassisType($Type)
		        {
		            switch ($Type)
		            {
		                1    {"Other"}
		                2    {"Unknown"}
		                3    {"Desktop"}
		                4    {"Low Profile Desktop"}
		                5    {"Pizza Box"}
		                6    {"Mini Tower"}
		                7    {"Tower"}
		                8    {"Portable"}
		                9    {"Laptop"}
		                10    {"Notebook"}
		                11    {"Hand Held"}
		                12    {"Docking Station"}
		                13    {"All in One"}
		                14    {"Sub Notebook"}
		                15    {"Space-Saving"}
		                16    {"Lunch Box"}
		                17    {"Main System Chassis"}
		                18    {"Expansion Chassis"}
		                19    {"SubChassis"}
		                20    {"Bus Expansion Chassis"}
		                21    {"Peripheral Chassis"}
		                22    {"Storage Chassis"}
		                23    {"Rack Mount Chassis"}
		                24    {"Sealed-Case PC"}
		            }
		        }
		        function ConvertTo-SecurityStatus($Status)
		        {
		            switch ($Status)
		            {
		                1    {"Other"}
		                2    {"Unknown"}
		                3    {"None"}
		                4    {"External Interface Locked Out"}
		                5    {"External Interface Enabled"}
		            }
		        }
		    
		    }
		    Process 
		    {
		    
		        Write-Verbose " [Get-SystemType] :: Process Start"
		        if($ComputerName -match "(.*)(\$)$")
		        {
		            $ComputerName = $ComputerName -replace "(.*)(\$)$",'$1'
		        }
		        if(Test-Host $ComputerName -TCPPort 135)
		        {
		            try
		            {
		                Write-Verbose " [Get-SystemType] :: Getting System (Enclosure) Type info use WMI"
		                $SystemInfo = Get-WmiObject Win32_SystemEnclosure -ComputerName $ComputerName
		                $CSInfo = Get-WmiObject -Query "Select Model FROM Win32_ComputerSystem" -ComputerName $ComputerName
		                
		                Write-Verbose " [Get-SystemType] :: Creating Hash Table"
		                $myobj = @{}
		                Write-Verbose " [Get-SystemType] :: Setting ComputerName   - $ComputerName"
		                $myobj.ComputerName = $ComputerName
		                
		                Write-Verbose " [Get-SystemType] :: Setting Manufacturer   - $($SystemInfo.Manufacturer)"
		                $myobj.Manufacturer = $SystemInfo.Manufacturer
		                
		                Write-Verbose " [Get-SystemType] :: Setting Module   - $($CSInfo.Model)"
		                $myobj.Model = $CSInfo.Model
		                
		                Write-Verbose " [Get-SystemType] :: Setting SerialNumber   - $($SystemInfo.SerialNumber)"
		                $myobj.SerialNumber = $SystemInfo.SerialNumber
		                
		                Write-Verbose " [Get-SystemType] :: Setting SecurityStatus - $($SystemInfo.SecurityStatus)"
		                $myobj.SecurityStatus = ConvertTo-SecurityStatus $SystemInfo.SecurityStatus
		                
		                Write-Verbose " [Get-SystemType] :: Setting Type           - $($SystemInfo.ChassisTypes)"
		                $myobj.Type = ConvertTo-ChassisType $SystemInfo.ChassisTypes
		                
		                Write-Verbose " [Get-SystemType] :: Creating Custom Object"
		                $obj = New-Object PSCustomObject -Property $myobj
		                $obj.PSTypeNames.Clear()
		                $obj.PSTypeNames.Add('BSonPosh.SystemType')
		                $obj
		            }
		            catch
		            {
		                Write-Verbose " [Get-SystemType] :: [$ComputerName] Failed with Error: $($Error[0])" 
		            }
		        }
		    
		    }
		    
		}
		    
		#endregion 
	
	#region Get-USB
		
		function Get-USB {
		    <#
		    .Synopsis
		        Gets USB devices attached to the system
		    .Description
		        Uses WMI to get the USB Devices attached to the system
		    .Example
		        Get-USB
		    .Example
		        Get-USB | Group-Object Manufacturer  
		    .Parameter ComputerName
		        The name of the computer to get the USB devices from
		    #>
		    param($computerName = "localhost")
		    Get-WmiObject Win32_USBControllerDevice -ComputerName $ComputerName `
		        -Impersonation Impersonate -Authentication PacketPrivacy | 
		        Foreach-Object { [Wmi]$_.Dependent }
		}
		#endregion
	
	#region Get-UserTxtBox
	function Get-UserTxtBox
	{	$global:UserName_Txt = $usertextbox.Text}
	#endregion
	
	#region Get-LocalAdmins
	function get-localadmins{
	  [cmdletbinding()]
	  Param(
	  [string]$computerName
	  )
	  $group = get-wmiobject win32_group -ComputerName $computerName -Filter "LocalAccount=True AND SID='S-1-5-32-544'"
	  $query = "GroupComponent = `"Win32_Group.Domain='$($group.domain)'`,Name='$($group.name)'`""
	  $list = Get-WmiObject win32_groupuser -ComputerName $computerName -Filter $query
	  $list | %{$_.PartComponent} | % {$_.substring($_.lastindexof("Domain=") + 7).replace("`",Name=`"","\")}
	}
	#endregion Get-LocalAdmins
	
	# New Funktionen
	
	#region New-RegistryKey 
		
		function New-RegistryKey
		{
		    
		    <#
		        .Synopsis 
		            Creates a new key in the provide by Path.
		            
		        .Description
		            Creates a new key in the provide by Path.
		                        
		        .Parameter Path 
		            Path to create the key in.
		            
		        .Parameter ComputerName 
		            Computer to the create registry key on.
		            
		        .Parameter Name 
		            Name of the Key to create
		        
		        .Example
		            New-registrykey HKLM\Software\Adobe -Name DeleteMe
		            Description
		            -----------
		            Creates a key called DeleteMe under HKLM\Software\Adobe
		            
		        .Example
		            New-registrykey HKLM\Software\Adobe -Name DeleteMe -ComputerName MyServer1
		            Description
		            -----------
		            Creates a key called DeleteMe under HKLM\Software\Adobe on MyServer1
		                    
		        .OUTPUTS
		            Microsoft.Win32.RegistryKey
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            Get-RegistryKey
		            Remove-RegistryKey
		            Test-RegistryKey
		            
		        NAME:      New-RegistryKey
		        AUTHOR:    bsonposh
		        Website:   http://www.bsonposh.com
		        Version:   1
		        #Requires -Version 2.0
		    #>
		    [Cmdletbinding(SupportsShouldProcess=$true)]
		    Param(
		        [Parameter(mandatory=$true)]
		        [string]$Path,
		        
		        [Parameter(mandatory=$true)]
		        [string]$Name,
		        
		        [Alias("Server")]
		        [Parameter(ValueFromPipeline=$true)]
		        [string]$ComputerName = $Env:ComputerName
		    )
		    Begin 
		    {
		    
		        Write-Verbose " [New-RegistryKey] :: Start Begin"
		        $ReadWrite = [Microsoft.Win32.RegistryKeyPermissionCheck]::ReadWriteSubTree
		        
		        Write-Verbose " [New-RegistryKey] :: `$Path = $Path"
		        Write-Verbose " [New-RegistryKey] :: Getting `$Hive and `$KeyPath from $Path "
		        $PathParts = $Path -split "\\|/",0,"RegexMatch"
		        $Hive = $PathParts[0]
		        $KeyPath = $PathParts[1..$PathParts.count] -join "\"
		        Write-Verbose " [New-RegistryKey] :: `$Hive = $Hive"
		        Write-Verbose " [New-RegistryKey] :: `$KeyPath = $KeyPath"
		        
		        Write-Verbose " [New-RegistryKey] :: End Begin"
		        
		    }
		    Process 
		    {
		    
		        Write-Verbose " [Get-RegistryKey] :: Start Process"
		        Write-Verbose " [Get-RegistryKey] :: `$ComputerName = $ComputerName"
		        
		        $RegHive = Get-RegistryHive $hive
		        
		        if($RegHive -eq 1)
		        {
		            Write-Host "Invalid Path: $Path, Registry Hive [$hive] is invalid!" -ForegroundColor Red
		        }
		        else
		        {
		            Write-Verbose " [Get-RegistryKey] :: `$RegHive = $RegHive"
		            $BaseKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($RegHive,$ComputerName)
		            Write-Verbose " [Get-RegistryKey] :: `$BaseKey = $BaseKey"
		            $Key = $BaseKey.OpenSubKey($KeyPath,$True)
		            if($PSCmdlet.ShouldProcess($ComputerName,"Creating Key [$Name] under $Path"))
		            {
		                $Key.CreateSubKey($Name,$ReadWrite)
		            }
		        }
		        Write-Verbose " [Get-RegistryKey] :: End Process"
		    
		    }
		}
		    
		#endregion 
		
	#region New-RegistryValue 
		
		function New-RegistryValue
		{
		    
		    <#
		        .Synopsis 
		            Create a value under the registry key.
		            
		        .Description
		            Create a value under the registry key.
		                        
		        .Parameter Path 
		            Path to the key.
		            
		        .Parameter Name 
		            Name of the Value to create.
		            
		        .Parameter Value 
		            Value to for the new Value.
		            
		        .Parameter Type
		            Type for the new Value. Valid Types: Unknown, String (default,) ExpandString, Binary, DWord, MultiString, a
		    nd Qword
		            
		        .Parameter ComputerName 
		            Computer to create the Value on.
		            
		        .Example
		            New-RegistryValue HKLM\SOFTWARE\Adobe\MyKey -Name State -Value "Hi There"
		            Description
		            -----------
		            Creates the Value State and sets the value to "Hi There" under HKLM\SOFTWARE\Adobe\MyKey.
		            
		        .Example
		            New-RegistryValue HKLM\SOFTWARE\Adobe\MyKey -Name State -Value 0 -ComputerName MyServer1
		            Description
		            -----------
		            Creates the Value State and sets the value to "Hi There" under HKLM\SOFTWARE\Adobe\MyKey on MyServer1.
		            
		        .Example
		            New-RegistryValue HKLM\SOFTWARE\Adobe\MyKey -Name MyDWord -Value 0 -Type DWord
		            Description
		            -----------
		            Creates the DWORD Value MyDWord and sets the value to 0 under HKLM\SOFTWARE\Adobe\MyKey.
		                    
		        .OUTPUTS
		            System.Boolean
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            New-RegistryValue
		            Remove-RegistryValue
		            Get-RegistryValue
		            
		        NAME:      Test-RegistryValue
		        AUTHOR:    bsonposh
		        Website:   http://www.bsonposh.com
		        Version:   1
		        #Requires -Version 2.0
		    #>
		    
		    [Cmdletbinding(SupportsShouldProcess=$true)]
		    Param(
		        [Parameter(mandatory=$true)]
		        [string]$Path,
		        
		        [Parameter(mandatory=$true)]
		        [string]$Name,
		        
		        [Parameter()]
		        [string]$Value,
		        
		        [Parameter()]
		        [string]$Type,
		        
		        [Alias("dnsHostName")]
		        [Parameter(ValueFromPipeline=$true)]
		        [string]$ComputerName = $Env:ComputerName
		    )
		    Begin 
		    {
		    
		        Write-Verbose " [New-RegistryValue] :: Start Begin"
		        Write-Verbose " [New-RegistryValue] :: `$Path = $Path"
		        Write-Verbose " [New-RegistryValue] :: `$Name = $Name"
		        Write-Verbose " [New-RegistryValue] :: `$Value = $Value"
		        
		        Switch ($Type)
		        {
		            "Unknown"       {$ValueType = [Microsoft.Win32.RegistryValueKind]::Unknown;continue}
		            "String"        {$ValueType = [Microsoft.Win32.RegistryValueKind]::String;continue}
		            "ExpandString"  {$ValueType = [Microsoft.Win32.RegistryValueKind]::ExpandString;continue}
		            "Binary"        {$ValueType = [Microsoft.Win32.RegistryValueKind]::Binary;continue}
		            "DWord"         {$ValueType = [Microsoft.Win32.RegistryValueKind]::DWord;continue}
		            "MultiString"   {$ValueType = [Microsoft.Win32.RegistryValueKind]::MultiString;continue}
		            "QWord"         {$ValueType = [Microsoft.Win32.RegistryValueKind]::QWord;continue}
		            default         {$ValueType = [Microsoft.Win32.RegistryValueKind]::String;continue}
		        }
		        Write-Verbose " [New-RegistryValue] :: `$Type = $Type"
		        Write-Verbose " [New-RegistryValue] :: End Begin"
		        
		    }
		    
		    Process 
		    {
		    
		        if(Test-RegistryValue -Path $path -Name $Name -ComputerName $ComputerName)
		        {
		            "Registry value already exist"     
		        }
		        else
		        {
		            Write-Verbose " [New-RegistryValue] :: Start Process"
		            Write-Verbose " [New-RegistryValue] :: Calling Get-RegistryKey -Path $path -ComputerName $ComputerName"
		            $Key = Get-RegistryKey -Path $path -ComputerName $ComputerName -ReadWrite
		            Write-Verbose " [New-RegistryValue] :: Get-RegistryKey returned $Key"
		            Write-Verbose " [New-RegistryValue] :: Setting Value for [$Name]"
		            if($PSCmdlet.ShouldProcess($ComputerName,"Creating Value [$Name] under $Path with value [$Value]"))
		            {
		                if($Value)
		                {
		                    $Key.SetValue($Name,$Value,$ValueType)
		                }
		                else
		                {
		                    $Key.SetValue($Name,$ValueType)
		                }
		                Write-Verbose " [New-RegistryValue] :: Returning New Key: Get-RegistryValue -Path $path -Name $Name -ComputerName $ComputerName"
		                Get-RegistryValue -Path $path -Name $Name -ComputerName $ComputerName
		            }
		        }
		        Write-Verbose " [New-RegistryValue] :: End Process"
		    
		    }
		}
		    
		#endregion 
	
	# Load Funktionen
	
	#region Load-ComboBox
	function Load-ComboBox 
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
	
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
	
		.PARAMETER  ComboBox
			The ComboBox control you want to add items to.
	
		.PARAMETER  Items
			The object or objects you wish to load into the ComboBox's Items collection.
	
		.PARAMETER  DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER  Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Load-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Load-ComboBox $combobox1 "Red" -Append
			Load-ComboBox $combobox1 "White" -Append
			Load-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Load-ComboBox $combobox1 (Get-Process) "ProcessName"
	#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.ComboBox]$ComboBox,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Items,
		    [Parameter(Mandatory=$false)]
			[string]$DisplayMember,
			[switch]$Append
		)
		
		if(-not $Append)
		{
			$ComboBox.Items.Clear()	
		}
		
		if($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [Array])
		{
			$ComboBox.BeginUpdate()
			foreach($obj in $Items)
			{
				$ComboBox.Items.Add($obj)	
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)	
		}
	
		$ComboBox.DisplayMember = $DisplayMember	
	}
	#endregion Load-Combobox
	
	# Remove Funktionen
	
	#region Remove-RegistryKey 
		
		function Remove-RegistryKey
		{
		        
		    <#
		        .Synopsis 
		            Removes a new key in the provide by Path.
		            
		        .Description
		            Removes a new key in the provide by Path.
		                        
		        .Parameter Path 
		            Path to remove the registry key from.
		            
		        .Parameter ComputerName 
		            Computer to remove the registry key from.
		            
		        .Parameter Name 
		            Name of the registry key to remove.
		            
		        .Parameter Recurse 
		            Recursively removes registry key and all children from path.
		        
		        .Example
		            Remove-registrykey HKLM\Software\Adobe -Name DeleteMe
		            Description
		            -----------
		            Removes the registry key called DeleteMe under HKLM\Software\Adobe
		            
		        .Example
		            Remove-RegistryKey HKLM\Software\Adobe -Name DeleteMe -ComputerName MyServer1
		            Description
		            -----------
		            Removes the key called DeleteMe under HKLM\Software\Adobe on MyServer1
		            
		        .Example
		            Remove-RegistryKey HKLM\Software\Adobe -Name DeleteMe -ComputerName MyServer1 -Recurse
		            Description
		            -----------
		            Removes the key called DeleteMe under HKLM\Software\Adobe on MyServer1 and all child keys.
		                    
		        .OUTPUTS
		            $null
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            Get-RegistryKey
		            New-RegistryKey
		            Test-RegistryKey
		            
		        .Notes
		        NAME:      Remove-RegistryKey
		        AUTHOR:    bsonposh
		        Website:   http://www.bsonposh.com
		        Version:   1
		        #Requires -Version 2.0
		    #>
		    
		    [Cmdletbinding(SupportsShouldProcess=$true)]
		    Param(
		    
		        [Parameter(mandatory=$true)]
		        [string]$Path,
		        
		        [Parameter(mandatory=$true)]
		        [string]$Name,
		        
		        [Alias("Server")]
		        [Parameter(ValueFromPipeline=$true)]
		        [string]$ComputerName = $Env:ComputerName,
		        
		        [Parameter()]
		        [switch]$Recurse
		    )
		    Begin 
		    {
		    
		        Write-Verbose " [Remove-RegistryKey] :: Start Begin"
		        
		        Write-Verbose " [Remove-RegistryKey] :: `$Path = $Path"
		        Write-Verbose " [Remove-RegistryKey] :: Getting `$Hive and `$KeyPath from $Path "
		        $PathParts = $Path -split "\\|/",0,"RegexMatch"
		        $Hive = $PathParts[0]
		        $KeyPath = $PathParts[1..$PathParts.count] -join "\"
		        Write-Verbose " [Remove-RegistryKey] :: `$Hive = $Hive"
		        Write-Verbose " [Remove-RegistryKey] :: `$KeyPath = $KeyPath"
		        
		        Write-Verbose " [Remove-RegistryKey] :: End Begin"
		    
		    }
		    
		    Process 
		    {
		    
		        Write-Verbose " [Remove-RegistryKey] :: Start Process"
		        Write-Verbose " [Remove-RegistryKey] :: `$ComputerName = $ComputerName"
		        
		        if(Test-RegistryKey -Path $path\$name -ComputerName $ComputerName)
		        {
		            $RegHive = Get-RegistryHive $hive
		            
		            if($RegHive -eq 1)
		            {
		                Write-Host "Invalid Path: $Path, Registry Hive [$hive] is invalid!" -ForegroundColor Red
		            }
		            else
		            {
		                Write-Verbose " [Remove-RegistryKey] :: `$RegHive = $RegHive"
		                $BaseKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($RegHive,$ComputerName)
		                Write-Verbose " [Remove-RegistryKey] :: `$BaseKey = $BaseKey"
		                
		                $Key = $BaseKey.OpenSubKey($KeyPath,$True)
		                
		                if($PSCmdlet.ShouldProcess($ComputerName,"Deleteing Key [$Name]"))
		                {
		                    if($Recurse)
		                    {
		                        Write-Verbose " [Remove-RegistryKey] :: Calling DeleteSubKeyTree($Name)"
		                        $Key.DeleteSubKeyTree($Name)
		                    }
		                    else
		                    {
		                        Write-Verbose " [Remove-RegistryKey] :: Calling DeleteSubKey($Name)"
		                        $Key.DeleteSubKey($Name)
		                    }
		                }
		            }
		        }
		        else
		        {
		            "Key [$path\$name] does not exist"
		        }
		        Write-Verbose " [Remove-RegistryKey] :: End Process"
		    
		    }
		}
		    
		#endregion 
		
	#region Remove-RegistryValue 
		
		function Remove-RegistryValue 
		{
		        
		    <#
		        .Synopsis 
		            Removes the value.
		            
		        .Description
		            Removes the value.
		                        
		        .Parameter Path 
		            Path to the key that contains the value.
		            
		        .Parameter Name 
		            Name of the Value to Remove.
		    
		        .Parameter ComputerName 
		            Computer to remove value from.
		            
		        .Example
		            Remove-RegistryValue HKLM\SOFTWARE\Adobe\MyKey -Name State
		            Description
		            -----------
		            Removes the value STATE under HKLM\SOFTWARE\Adobe\MyKey.
		            
		        .Example
		            Remove-RegistryValue HKLM\Software\Adobe\MyKey -Name State -ComputerName MyServer1
		            Description
		            -----------
		            Removes the value STATE under HKLM\SOFTWARE\Adobe\MyKey on MyServer1.
		                    
		        .OUTPUTS
		            $null
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            New-RegistryValue
		            Test-RegistryValue
		            Get-RegistryValue
		            Set-RegistryValue
		            
		        NAME:      Remove-RegistryValue
		        AUTHOR:    bsonposh
		        Website:   http://www.bsonposh.com
		        Version:   1
		        #Requires -Version 2.0
		    #>
		    
		    [Cmdletbinding(SupportsShouldProcess=$true)]
		    Param(
		        [Parameter(mandatory=$true)]
		        [string]$Path,
		        
		        [Parameter(mandatory=$true)]
		        [string]$Name,
		        
		        [Alias("dnsHostName")]
		        [Parameter(ValueFromPipeline=$true)]
		        [string]$ComputerName = $Env:ComputerName
		    )
		    Begin 
		    {
		    
		        Write-Verbose " [Remove-RegistryValue] :: Start Begin"
		        
		        Write-Verbose " [Remove-RegistryValue] :: `$Path = $Path"
		        Write-Verbose " [Remove-RegistryValue] :: `$Name = $Name"
		        
		        Write-Verbose " [Remove-RegistryValue] :: End Begin"
		        
		    }
		    
		    Process 
		    {
		    
		        if(Test-RegistryValue -Path $path -Name $Name -ComputerName $ComputerName)
		        {
		            Write-Verbose " [Remove-RegistryValue] :: Start Process"
		            Write-Verbose " [Remove-RegistryValue] :: Calling Get-RegistryKey -Path $path -ComputerName $ComputerName"
		            $Key = Get-RegistryKey -Path $path -ComputerName $ComputerName -ReadWrite
		            Write-Verbose " [Remove-RegistryValue] :: Get-RegistryKey returned $Key"
		            Write-Verbose " [Remove-RegistryValue] :: Setting Value for [$Name]"
		            if($PSCmdlet.ShouldProcess($ComputerName,"Deleting Value [$Name] under $Path"))
		            {
		                $Key.DeleteValue($Name)
		            }
		        }
		        else
		        {
		            "Registry Value is already gone"
		        }
		        
		        Write-Verbose " [Remove-RegistryValue] :: End Process"
		    
		    }
		}
		    
		#endregion 
	
	# Runner Funktionen
	
	#region Run-RemoteCMD
		#http://gallery.technet.microsoft.com/scriptcenter/56962f03-0243-4c83-8cdd-88c37898ccc4
		function Run-RemoteCMD { 
		    param( 
		    [Parameter(Mandatory=$true,valuefrompipeline=$true)] 
		    [string]$ComputerName,
			[string]$Command)
		    begin { 
		        
		        [string]$cmd = "CMD.EXE /C " +$command 
		                        } 
		    process { 
		        $newproc = Invoke-WmiMethod -class Win32_process -name Create -ArgumentList ($cmd) -ComputerName $ComputerName 
		        if ($newproc.ReturnValue -eq 0 ) 
		                { Write-Output " Command $($command) invoked Sucessfully on $($ComputerName)" } 
		                # if command is sucessfully invoked it doesn't mean that it did what its supposed to do 
		                #it means that the command only sucessfully ran on the cmd.exe of the server 
		                #syntax errors can occur due to user input  
		    } 
		    End{Write-Output "Script ...END"}
		}
	#endregion
	
	# Searcher Funktionen
	
	#region Search-Registry 
		
		function Search-Registry 
		{
		        
		    <#
		        .Synopsis 
		            Searchs the Registry.
		            
		        .Description
		            Searchs the Registry.
		                        
		        .Parameter Filter 
		            The RegEx filter you want to search for.
		            
		        .Parameter Name 
		            Name of the Key or Value you want to search for.
		        
		        .Parameter Value
		            Value to search for (Registry Values only.)
		            
		        .Parameter Path
		            Base of the Search. Should be in this format: "Software\Microsoft\..." See the Examples for specific exampl
		    es.
		            
		        .Parameter Hive
		            The Base Hive to search in (Default to LocalMachine.)
		            
		        .Parameter ComputerName 
		            Computer to search.
		            
		        .Parameter KeyOnly
		            Only returns Registry Keys. Not valid with -value parameter.
		            
		        .Example
		            Search-Registry -Hive HKLM -Filter "Powershell" -Path "SOFTWARE\Clients"
		            Description
		            -----------
		            Searchs the Registry for Keys or Values that match 'Powershell" in path "SOFTWARE\Clients"
		            
		        .Example
		            Search-Registry -Hive HKLM -Filter "Powershell" -Path "SOFTWARE\Clients" -computername MyServer1
		            Description
		            -----------
		            Searchs the Registry for Keys or Values that match 'Powershell" in path "SOFTWARE\Clients" on MyServer1
		            
		        .Example
		            Search-Registry -Hive HKLM -Name "Powershell" -Path "SOFTWARE\Clients"
		            Description
		            -----------
		            Searchs the Registry keys and values with name 'Powershell' in "SOFTWARE\Clients"
		            
		        .Example
		            Search-Registry -Hive HKLM -Name "Powershell" -Path "SOFTWARE\Clients" -KeyOnly
		            Description
		            -----------
		            Searchs the Registry keys with name 'Powershell' in "SOFTWARE\Clients"
		        
		        .Example
		            Search-Registry -Hive HKLM -Value "Powershell" -Path "SOFTWARE\Clients"
		            Description
		            -----------
		            Searchs the Registry Values with Value of 'Powershell' in "SOFTWARE\Clients"
		            
		        .OUTPUTS
		            Microsoft.Win32.RegistryKey
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            Get-RegistryKey
		            Get-RegistryValue
		            Test-RegistryKey
		        
		        .Notes
		            NAME:      Search-Registry
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		        
		    [Cmdletbinding(DefaultParameterSetName="ByFilter")]
		    Param(
		        [Parameter(ParameterSetName="ByFilter",Position=0)]
		        [string]$Filter= ".*",
		        
		        [Parameter(ParameterSetName="ByName",Position=0)]
		        [string]$Name,
		        
		        [Parameter(ParameterSetName="ByValue",Position=0)]
		        [string]$Value,
		        
		        [Parameter()]
		        [string]$Path,
		        
		        [Parameter()]
		        [string]$Hive = "LocalMachine",
		        
		        [alias('dnsHostName')]
		        [Parameter(ValueFromPipelineByPropertyName=$true,ValueFromPipeline=$true)]
		        [string]$ComputerName = $Env:COMPUTERNAME,
		            
		        [Parameter()]
		        [switch]$KeyOnly
		    )
		    Begin 
		    {
		    
		        Write-Verbose " [Search-Registry] :: Start Begin"
		        
		        Write-Verbose " [Search-Registry] :: Active Parameter Set $($PSCmdlet.ParameterSetName)"
		        switch ($PSCmdlet.ParameterSetName)
		        {
		            "ByFilter"    {Write-Verbose " [Search-Registry] :: `$Filter = $Filter"}
		            "ByName"    {Write-Verbose " [Search-Registry] :: `$Name = $Name"}
		            "ByValue"    {Write-Verbose " [Search-Registry] :: `$Value = $Value"}
		        }
		        $RegHive = Get-RegistryHive $Hive
		        Write-Verbose " [Search-Registry] :: `$Hive = $RegHive"
		        Write-Verbose " [Search-Registry] :: `$KeyOnly = $KeyOnly"
		        
		        Write-Verbose " [Search-Registry] :: End Begin"
		    
		    }
		    
		    Process 
		    {
		    
		        Write-Verbose " [Search-Registry] :: Start Process"
		        
		        Write-Verbose " [Search-Registry] :: `$ComputerName = $ComputerName"
		        switch ($PSCmdlet.ParameterSetName)
		        {
		            "ByFilter"    {
		                            if($KeyOnly)
		                            {
		                                if($Path -and (Test-RegistryKey "$RegHive\$Path"))
		                                {
		                                    Get-RegistryKey -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{$_.Name -match "$Filter"}
		                                }
		                                else
		                                {
		                                $BaseKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($RegHive,$ComputerName)
		                                foreach($SubKeyName in $BaseKey.GetSubKeyNames())
		                                {
		                                    try
		                                    {
		                                        $SubKey = $BaseKey.OpenSubKey($SubKeyName,$true)
		                                        Get-RegistryKey -Path $SubKey.Name -ComputerName $ComputerName -Recurse | ?{$_.Name -match "$Filter"}
		                                    }
		                                    catch
		                                    {
		                                        Write-Host "Access Error on Key [$SubKeyName]... skipping."
		                                    }
		                                }
		                                }
		                            }
		                            else
		                            {
		                                if($Path -and (Test-RegistryKey "$RegHive\$Path"))
		                                {
		                                    Get-RegistryKey -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{$_.Name -match "$Filter"}
		                                    Get-RegistryValue -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{$_.Name -match "$Filter"}
		                                }
		                                else
		                                {
		                                    $BaseKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($RegHive,$ComputerName)
		                                    foreach($SubKeyName in $BaseKey.GetSubKeyNames())
		                                    {
		                                        try
		                                        {
		                                            $SubKey = $BaseKey.OpenSubKey($SubKeyName,$true)
		                                            Get-RegistryKey -Path $SubKey.Name -ComputerName $ComputerName -Recurse | ?{$_.Name -match "$Filter"}
		                                            Get-RegistryValue -Path $SubKey.Name -ComputerName $ComputerName -Recurse | ?{$_.Name -match "$Filter"}
		                                        }
		                                        catch
		                                        {
		                                            Write-Host "Access Error on Key [$SubKeyName]... skipping."
		                                        }
		                                    }
		                                }
		                            }
		                        }
		            "ByName"    {
		                            if($KeyOnly)
		                            {
		                                if($Path -and (Test-RegistryKey "$RegHive\$Path"))
		                                {
		                                    $NameFilter = "^.*\\{0}$" -f $Name
		                                    Get-RegistryKey -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{$_.Name -match $NameFilter}
		                                }
		                                else
		                                {
		                                    $BaseKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($RegHive,$ComputerName)
		                                    foreach($SubKeyName in $BaseKey.GetSubKeyNames())
		                                    {
		                                        try
		                                        {
		                                            $SubKey = $BaseKey.OpenSubKey($SubKeyName,$true)
		                                            $NameFilter = "^.*\\{0}$" -f $Name
		                                            Get-RegistryKey -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{$_.Name -match $NameFilter}
		                                        }
		                                        catch
		                                        {
		                                            Write-Host "Access Error on Key [$SubKeyName]... skipping."
		                                        }
		                                    }
		                                }
		                            }
		                            else
		                            {
		                                if($Path -and (Test-RegistryKey "$RegHive\$Path"))
		                                {
		                                    $NameFilter = "^.*\\{0}$" -f $Name
		                                    Get-RegistryKey -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{$_.Name -match $NameFilter}
		                                    Get-RegistryValue -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{$_.Name -eq $Name}
		                                }
		                                else
		                                {
		                                    $BaseKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($RegHive,$ComputerName)
		                                    foreach($SubKeyName in $BaseKey.GetSubKeyNames())
		                                    {
		                                        try
		                                        {
		                                            $SubKey = $BaseKey.OpenSubKey($SubKeyName,$true)
		                                            $NameFilter = "^.*\\{0}$" -f $Name
		                                            Get-RegistryKey -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{$_.Name -match $NameFilter}
		                                            Get-RegistryValue -Path $SubKey.Name -ComputerName $ComputerName -Recurse | ?{$_.Name -eq $Name}
		                                        }
		                                        catch
		                                        {
		                                            Write-Host "Access Error on Key [$SubKeyName]... skipping."
		                                        }
		                                    }
		                                }
		                            }
		                        }
		            "ByValue"    {
		                            if($Path -and (Test-RegistryKey "$RegHive\$Path"))
		                            {
		                                Get-RegistryValue -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{$_.Value -eq $Value}
		                            }
		                            else
		                            {
		                                $BaseKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($RegHive,$ComputerName)
		                                foreach($SubKeyName in $BaseKey.GetSubKeyNames())
		                                {
		                                    try
		                                    {
		                                        $SubKey = $BaseKey.OpenSubKey($SubKeyName,$true)
		                                        Get-RegistryValue -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{$_.Value -eq $Value}
		                                    }
		                                    catch
		                                    {
		                                        Write-Host "Access Error on Key [$SubKeyName]... skipping."
		                                    }
		                                }
		                            }
		                        }
		        }
		        
		        Write-Verbose " [Search-Registry] :: End Process"
		    
		    }
		}
		    
		#endregion 
	
	# Sender Funktionen
	
	#region Send-WOL
	function Send-WOL 
	{ 
	<#  
	  .SYNOPSIS   
	    Send a WOL packet to a broadcast address 
	  .PARAMETER mac 
	   The MAC address of the device that need to wake up 
	  .PARAMETER ip 
	   The IP address where the WOL packet will be sent to 
	  .EXAMPLE  
	   Send-WOL -mac 00:11:32:21:2D:11 -ip 192.168.8.255  
	#> 
	 
	param( 
	[string]$mac, 
	[string]$ip, 
	[int]$port=9 
	) 
	$broadcast = [Net.IPAddress]::Parse($ip) 
	  
	$mac=(($mac.replace(":","")).replace("-","")).replace(".","") 
	$target=0,2,4,6,8,10 | % {[convert]::ToByte($mac.substring($_,2),16)} 
	$packet = (,[byte]255 * 6) + ($target * 16) 
	  
	$UDPclient = new-Object System.Net.Sockets.UdpClient 
	$UDPclient.Connect($broadcast,$port) 
	[void]$UDPclient.Send($packet, 102)  
	 
	} 
	#endregion Send-WOL
	
	# Setter Funktionen
	
	#region Set-RegistryValue 
		
		function Set-RegistryValue
		{
		        
		    <#
		        .Synopsis 
		            Sets a value under the registry key.
		            
		        .Description
		            Sets a value under the registry key.
		                        
		        .Parameter Path 
		            Path to the key.
		            
		        .Parameter Name 
		            Name of the Value to Set.
		            
		        .Parameter Value 
		            New Value.
		            
		        .Parameter Type
		            Type for the Value. Valid Types: Unknown, String (default,) ExpandString, Binary, DWord, MultiString, and Q
		    word
		            
		        .Parameter ComputerName 
		            Computer to set the Value on.
		            
		        .Example
		            Set-RegistryValue HKLM\SOFTWARE\Adobe\MyKey -Name State -Value "Hi There"
		            Description
		            -----------
		            Sets the Value State and sets the value to "Hi There" under HKLM\SOFTWARE\Adobe\MyKey.
		            
		        .Example
		            Set-RegistryValue HKLM\SOFTWARE\Adobe\MyKey -Name State -Value 0 -ComputerName MyServer1
		            Description
		            -----------
		            Sets the Value State and sets the value to "Hi There" under HKLM\SOFTWARE\Adobe\MyKey on MyServer1.
		            
		        .Example
		            Set-RegistryValue HKLM\SOFTWARE\Adobe\MyKey -Name MyDWord -Value 0 -Type DWord
		            Description
		            -----------
		            Sets the DWORD Value MyDWord and sets the value to 0 under HKLM\SOFTWARE\Adobe\MyKey.
		            
		        .OUTPUTS
		            PSCustomObject
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            New-RegistryValue
		            Remove-RegistryValue
		            Get-RegistryValue
		            Test-RegistryValue
		        
		        .Notes
		            NAME:      Set-RegistryValue
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		    
		    [Cmdletbinding(SupportsShouldProcess=$true)]
		    Param(
		        [Parameter(mandatory=$true)]
		        [string]$Path,
		        
		        [Parameter(mandatory=$true)]
		        [string]$Name,
		        
		        [Parameter()]
		        [string]$Value,
		        
		        [Parameter()]
		        [string]$Type,
		        
		        [Alias("dnsHostName")]
		        [Parameter(ValueFromPipeline=$true)]
		        [string]$ComputerName = $Env:ComputerName
		    )
		    
		    Begin 
		    {
		    
		        Write-Verbose " [Set-RegistryValue] :: Start Begin"
		        
		        Write-Verbose " [Set-RegistryValue] :: `$Path = $Path"
		        Write-Verbose " [Set-RegistryValue] :: `$Name = $Name"
		        Write-Verbose " [Set-RegistryValue] :: `$Value = $Value"
		        
		        Switch ($Type)
		        {
		            "Unknown"       {$ValueType = [Microsoft.Win32.RegistryValueKind]::Unknown;continue}
		            "String"        {$ValueType = [Microsoft.Win32.RegistryValueKind]::String;continue}
		            "ExpandString"  {$ValueType = [Microsoft.Win32.RegistryValueKind]::ExpandString;continue}
		            "Binary"        {$ValueType = [Microsoft.Win32.RegistryValueKind]::Binary;continue}
		            "DWord"         {$ValueType = [Microsoft.Win32.RegistryValueKind]::DWord;continue}
		            "MultiString"   {$ValueType = [Microsoft.Win32.RegistryValueKind]::MultiString;continue}
		            "QWord"         {$ValueType = [Microsoft.Win32.RegistryValueKind]::QWord;continue}
		            default         {$ValueType = [Microsoft.Win32.RegistryValueKind]::String;continue}
		        }
		        Write-Verbose " [Set-RegistryValue] :: `$Type = $Type"
		        
		        Write-Verbose " [Set-RegistryValue] :: End Begin"
		    
		    }
		    
		    Process 
		    {
		    
		        Write-Verbose " [Set-RegistryValue] :: Start Process"
		        
		        Write-Verbose " [Set-RegistryValue] :: Calling Get-RegistryKey -Path $path -ComputerName $ComputerName"
		        $Key = Get-RegistryKey -Path $path -ComputerName $ComputerName -ReadWrite
		        Write-Verbose " [Set-RegistryValue] :: Get-RegistryKey returned $Key"
		        Write-Verbose " [Set-RegistryValue] :: Setting Value for [$Name]"
		        if($PSCmdlet.ShouldProcess($ComputerName,"Creating Value [$Name] under $Path with value [$Value]"))
		        {
		            if($Value)
		            {
		                $Key.SetValue($Name,$Value,$ValueType)
		            }
		            else
		            {
		                $Key.SetValue($Name,$ValueType)
		            }
		            Write-Verbose " [Set-RegistryValue] :: Returning New Key: Get-RegistryValue -Path $path -Name $Name -ComputerName $ComputerName"
		            Get-RegistryValue -Path $path -Name $Name -ComputerName $ComputerName
		        }
		        Write-Verbose " [Set-RegistryValue] :: End Process"
		    
		    }
		}
		    
		#endregion 
	
	# Show Funktionen
	
	#region Show-MsgBox
		<# 
		            .SYNOPSIS  
		            Shows a graphical message box, with various prompt types available. 
		 
		            .DESCRIPTION 
		            Emulates the Visual Basic MsgBox function.  It takes four parameters, of which only the prompt is mandatory 
		 
		            .INPUTS 
		            The parameters are:- 
		             
		            Prompt (mandatory):  
		                Text string that you wish to display 
		                 
		            Title (optional): 
		                The title that appears on the message box 
		                 
		            Icon (optional).  Available options are: 
		                Information, Question, Critical, Exclamation (not case sensitive) 
		                
		            BoxType (optional). Available options are: 
		                OKOnly, OkCancel, AbortRetryIgnore, YesNoCancel, YesNo, RetryCancel (not case sensitive) 
		                 
		            DefaultButton (optional). Available options are: 
		                1, 2, 3 
		 
		            .OUTPUTS 
		            Microsoft.VisualBasic.MsgBoxResult 
		 
		            .EXAMPLE 
		            C:\PS> Show-MsgBox Hello 
		            Shows a popup message with the text "Hello", and the default box, icon and defaultbutton settings. 
		 
		            .EXAMPLE 
		            C:\PS> Show-MsgBox -Prompt "This is the prompt" -Title "This Is The Title" -Icon Critical -BoxType YesNo -DefaultButton 2 
		            Shows a popup with the parameter as supplied. 
		 
		            .LINK 
		            http://msdn.microsoft.com/en-us/library/microsoft.visualbasic.msgboxresult.aspx 
		 
		            .LINK 
		            http://msdn.microsoft.com/en-us/library/microsoft.visualbasic.msgboxstyle.aspx 
		            #> 
		# By BigTeddy August 24, 2011 
		# http://social.technet.microsoft.com/profile/bigteddy/. 
		 
		function Show-MsgBox 
		{ 
		 
		 [CmdletBinding()] 
		    param( 
		    [Parameter(Position=0, Mandatory=$true)] [string]$Prompt, 
		    [Parameter(Position=1, Mandatory=$false)] [string]$Title ="", 
		    [Parameter(Position=2, Mandatory=$false)] [ValidateSet("Information", "Question", "Critical", "Exclamation")] [string]$Icon ="Information", 
		    [Parameter(Position=3, Mandatory=$false)] [ValidateSet("OKOnly", "OKCancel", "AbortRetryIgnore", "YesNoCancel", "YesNo", "RetryCancel")] [string]$BoxType ="OkOnly", 
		    [Parameter(Position=4, Mandatory=$false)] [ValidateSet(1,2,3)] [int]$DefaultButton = 1 
		    ) 
		[System.Reflection.Assembly]::LoadWithPartialName("Microsoft.VisualBasic") | Out-Null 
		switch ($Icon) { 
		            "Question" {$vb_icon = [microsoft.visualbasic.msgboxstyle]::Question } 
		            "Critical" {$vb_icon = [microsoft.visualbasic.msgboxstyle]::Critical} 
		            "Exclamation" {$vb_icon = [microsoft.visualbasic.msgboxstyle]::Exclamation} 
		            "Information" {$vb_icon = [microsoft.visualbasic.msgboxstyle]::Information}} 
		switch ($BoxType) { 
		            "OKOnly" {$vb_box = [microsoft.visualbasic.msgboxstyle]::OKOnly} 
		            "OKCancel" {$vb_box = [microsoft.visualbasic.msgboxstyle]::OkCancel} 
		            "AbortRetryIgnore" {$vb_box = [microsoft.visualbasic.msgboxstyle]::AbortRetryIgnore} 
		            "YesNoCancel" {$vb_box = [microsoft.visualbasic.msgboxstyle]::YesNoCancel} 
		            "YesNo" {$vb_box = [microsoft.visualbasic.msgboxstyle]::YesNo} 
		            "RetryCancel" {$vb_box = [microsoft.visualbasic.msgboxstyle]::RetryCancel}} 
		switch ($Defaultbutton) { 
		            1 {$vb_defaultbutton = [microsoft.visualbasic.msgboxstyle]::DefaultButton1} 
		            2 {$vb_defaultbutton = [microsoft.visualbasic.msgboxstyle]::DefaultButton2} 
		            3 {$vb_defaultbutton = [microsoft.visualbasic.msgboxstyle]::DefaultButton3}} 
		$popuptype = $vb_icon -bor $vb_box -bor $vb_defaultbutton 
		$ans = [Microsoft.VisualBasic.Interaction]::MsgBox($prompt,$popuptype,$title) 
		return $ans 
		} #end
	#endregion
	
	#region Show-InputBox
		#http://www.sapien.com/forums/scriptinganswers/forum_posts.asp?TID=2890
		#$c=Show-Inputbox -message "Enter a computername" -title "Computername" -default $env:Computername
		#
		#if ($c.Trim()) {
		#  Get-WmiObject win32_computersystem -computer $c
		#  }
		Function Show-InputBox {
		 Param([string]$message=$(Throw "You must enter a prompt message"),
		       [string]$title="Input",
		       [string]$default
		       )
		       
		 [reflection.assembly]::loadwithpartialname("microsoft.visualbasic") | Out-Null
		 [microsoft.visualbasic.interaction]::InputBox($message,$title,$default)
		 
		}
	#endregion
	
	# Tester Funktionen
	
	#region Test-Host 
		
		function Test-Host
		{
		        
		    <#
		        .Synopsis 
		            Test a host for connectivity using either WMI ping or TCP port
		            
		        .Description
		            Allows you to test a host for connectivity before further processing
		            
		        .Parameter Server
		            Name of the Server to Process.
		            
		        .Parameter TCPPort
		            TCP Port to connect to. (default 135)
		            
		        .Parameter Timeout
		            Timeout for the TCP connection (default 1 sec)
		            
		        .Parameter Property
		            Name of the Property that contains the value to test.
		            
		        .Example
		            cat ServerFile.txt | Test-Host | Invoke-DoSomething
		            Description
		            -----------
		            To test a list of hosts.
		            
		        .Example
		            cat ServerFile.txt | Test-Host -tcp 80 | Invoke-DoSomething
		            Description
		            -----------
		            To test a list of hosts against port 80.
		            
		        .Example
		            Get-ADComputer | Test-Host -property dnsHostname | Invoke-DoSomething
		            Description
		            -----------
		            To test the output of Get-ADComputer using the dnshostname property
		            
		            
		        .OUTPUTS
		            System.Object
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            Test-Port
		            
		        NAME:      Test-Host
		        AUTHOR:    YetiCentral\bshell
		        Website:   www.bsonposh.com
		        LASTEDIT:  02/04/2009 18:25:15
		        #Requires -Version 2.0
		    #>
		    
		    [CmdletBinding()]
		    
		    Param(
		    
		        [Parameter(ValueFromPipelineByPropertyName=$true,ValueFromPipeline=$true,Mandatory=$True)]
		        [string]$ComputerName,
		        
		        [Parameter()]
		        [int]$TCPPort=80,
		        
		        [Parameter()]
		        [int]$timeout=3000,
		        
		        [Parameter()]
		        [string]$property
		        
		    )
		    Begin 
		    {
		    
		        function PingServer 
		        {
		            Param($MyHost)
		            $ErrorActionPreference = "SilentlyContinue"
		            Write-Verbose " [PingServer] :: Pinging [$MyHost]"
		            try
		            {
		                $pingresult = Get-WmiObject win32_pingstatus -f "address='$MyHost'"
		                $ResultCode = $pingresult.statuscode
		                Write-Verbose " [PingServer] :: Ping returned $ResultCode"
		                if($ResultCode -eq 0) {$true} else {$false}
		            }
		            catch
		            {
		                Write-Verbose " [PingServer] :: Ping Failed with Error: ${error[0]}"
		                $false
		            }
		        }
		    
		    }
		    
		    Process 
		    {
		    
		        Write-Verbose " [Test-Host] :: Begin Process"
		        if($ComputerName -match "(.*)(\$)$")
		        {
		            $ComputerName = $ComputerName -replace "(.*)(\$)$",'$1'
		        }
		        Write-Verbose " [Test-Host] :: ComputerName   : $ComputerName"
		        if($TCPPort)
		        {
		            Write-Verbose " [Test-Host] :: Timeout  : $timeout"
		            Write-Verbose " [Test-Host] :: Port     : $TCPPort"
		            if($property)
		            {
		                Write-Verbose " [Test-Host] :: Property : $Property"
		                $Result = Test-Port $_.$property -tcp $TCPPort -timeout $timeout
		                if($Result)
		                {
		                    if($_){ $_ }else{ $ComputerName }
		                }
		            }
		            else
		            {
		                Write-Verbose " [Test-Host] :: Running - 'Test-Port $ComputerName -tcp $TCPPort -timeout $timeout'"
		                $Result = Test-Port $ComputerName -tcp $TCPPort -timeout $timeout
		                if($Result)
		                {
		                    if($_){ $_ }else{ $ComputerName }
		                } 
		            }
		        }
		        else
		        {
		            if($property)
		            {
		                Write-Verbose " [Test-Host] :: Property : $Property"
		                try
		                {
		                    if(PingServer $_.$property)
		                    {
		                        if($_){ $_ }else{ $ComputerName }
		                    } 
		                }
		                catch
		                {
		                    Write-Verbose " [Test-Host] :: $($_.$property) Failed Ping"
		                }
		            }
		            else
		            {
		                Write-Verbose " [Test-Host] :: Simple Ping"
		                try
		                {
		                    if(PingServer $ComputerName){$ComputerName}
		                }
		                catch
		                {
		                    Write-Verbose " [Test-Host] :: $ComputerName Failed Ping"
		                }
		            }
		        }
		        Write-Verbose " [Test-Host] :: End Process"
		    
		    }
		    
		}
		    
		#endregion 
	
	#region Test-Port 
		
		function Test-Port
		{
		        
		    <#
		        .Synopsis 
		            Test a host to see if the specified port is open.
		            
		        .Description
		            Test a host to see if the specified port is open.
		                        
		        .Parameter TCPPort 
		            Port to test (Default 135.)
		            
		        .Parameter Timeout 
		            How long to wait (in milliseconds) for the TCP connection (Default 3000.)
		            
		        .Parameter ComputerName 
		            Computer to test the port against (Default in localhost.)
		            
		        .Example
		            Test-Port -tcp 3389
		            Description
		            -----------
		            Returns $True if the localhost is listening on 3389
		            
		        .Example
		            Test-Port -tcp 3389 -ComputerName MyServer1
		            Description
		            -----------
		            Returns $True if MyServer1 is listening on 3389
		                    
		        .OUTPUTS
		            System.Boolean
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            Test-Host
		            Wait-Port
		            
		        .Notes
		            NAME:      Test-Port
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		    
		    [Cmdletbinding()]
		    Param(
		        [Parameter()]
		        [int]$TCPport = 135,
		        [Parameter()]
		        [int]$TimeOut = 3000,
		        [Alias("dnsHostName")]
		        [Parameter(ValueFromPipelineByPropertyName=$true,ValueFromPipeline=$true)]
		        [String]$ComputerName = $env:COMPUTERNAME
		    )
		    Begin 
		    {
		        Write-Verbose " [Test-Port] :: Start Script"
		        Write-Verbose " [Test-Port] :: Setting Error state = 0"
		    }
		    
		    Process 
		    {
		    
		        Write-Verbose " [Test-Port] :: Creating [system.Net.Sockets.TcpClient] instance"
		        $tcpclient = New-Object system.Net.Sockets.TcpClient
		        
		        Write-Verbose " [Test-Port] :: Calling BeginConnect($ComputerName,$TCPport,$null,$null)"
		        try
		        {
		            $iar = $tcpclient.BeginConnect($ComputerName,$TCPport,$null,$null)
		            Write-Verbose " [Test-Port] :: Waiting for timeout [$timeout]"
		            $wait = $iar.AsyncWaitHandle.WaitOne($TimeOut,$false)
		        }
		        catch [System.Net.Sockets.SocketException]
		        {
		            Write-Verbose " [Test-Port] :: Exception: $($_.exception.message)"
		            Write-Verbose " [Test-Port] :: End"
		            return $false
		        }
		        catch
		        {
		            Write-Verbose " [Test-Port] :: General Exception"
		            Write-Verbose " [Test-Port] :: End"
		            return $false
		        }
		    
		        if(!$wait)
		        {
		            $tcpclient.Close()
		            Write-Verbose " [Test-Port] :: Connection Timeout"
		            Write-Verbose " [Test-Port] :: End"
		            return $false
		        }
		        else
		        {
		            Write-Verbose " [Test-Port] :: Closing TCP Socket"
		            try
		            {
		                $tcpclient.EndConnect($iar) | out-Null
		                $tcpclient.Close()
		            }
		            catch
		            {
		                Write-Verbose " [Test-Port] :: Unable to Close TCP Socket"
		            }
		            $true
		        }
		    }
		    End 
		    {
		        Write-Verbose " [Test-Port] :: End Script"
		    }
		}  
		#endregion 
	
	#region Test-PSRemoting
		
		function Test-PSRemoting 
		{ 
		    Param(
		        [alias('dnsHostName')]
		        [Parameter(Mandatory=$true,ValueFromPipelineByPropertyName=$true,ValueFromPipeline=$true)]
		        [string]$ComputerName
		    )
		    Process
		    {
		        Write-Verbose " [Test-PSRemoting] :: Start Process"
		        if($ComputerName -match "(.*)(\$)$")
		        {
		            $ComputerName = $ComputerName -replace "(.*)(\$)$",'$1'
		        }
		        
		        try 
		        { 
		            
		            $result = Invoke-Command -ComputerName $computername { 1 } -ErrorAction SilentlyContinue
		            
		            if($result -eq 1 )
		            {
		                return $True
		            }
		            else
		            {
		                return $False
		            }
		        } 
		        catch 
		        { 
		            return $False 
		        } 
		    }
		} 
		
	#endregion
	
	#region Test-RegistryKey 
		
		function Test-RegistryKey 
		{
		        
		    <#
		        .Synopsis 
		            Test for given the registry key.
		            
		        .Description
		            Test for given the registry key.
		                        
		        .Parameter Path 
		            Path to the key.
		            
		        .Parameter ComputerName 
		            Computer to test the registry key on.
		            
		        .Example
		            Test-registrykey HKLM\Software\Adobe
		            Description
		            -----------
		            Returns $True if the Registry key for HKLM\Software\Adobe
		            
		        .Example
		            Test-registrykey HKLM\Software\Adobe -ComputerName MyServer1
		            Description
		            -----------
		            Returns $True if the Registry key for HKLM\Software\Adobe on MyServer1
		                    
		        .OUTPUTS
		            System.Boolean
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            New-RegistryKey
		            Remove-RegistryKey
		            Get-RegistryKey
		        
		        .Notes
		            NAME:      Test-RegistryKey
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		    
		    [Cmdletbinding(SupportsShouldProcess=$true)]
		    Param(
		    
		        [Parameter(ValueFromPipelineByPropertyName=$True,mandatory=$true)]
		        [string]$Path,
		        
		        [alias('dnsHostName')]
		        [Parameter(ValueFromPipelineByPropertyName=$true,ValueFromPipeline=$true)]
		        [string]$ComputerName = $Env:COMPUTERNAME
		        
		    )
		    
		    Begin 
		    {
		    
		        Write-Verbose " [Test-RegistryKey] :: Start Begin"
		        
		        Write-Verbose " [Test-RegistryKey] :: `$Path = $Path"
		        Write-Verbose " [Test-RegistryKey] :: Getting `$Hive and `$KeyPath from $Path "
		        $PathParts = $Path -split "\\|/",0,"RegexMatch"
		        $Hive = $PathParts[0]
		        $KeyPath = $PathParts[1..$PathParts.count] -join "\"
		        Write-Verbose " [Test-RegistryKey] :: `$Hive = $Hive"
		        Write-Verbose " [Test-RegistryKey] :: `$KeyPath = $KeyPath"
		        
		        Write-Verbose " [Test-RegistryKey] :: End Begin"
		    
		    }
		    
		    Process 
		    {
		    
		        Write-Verbose " [Test-RegistryKey] :: Start Process"
		        
		        Write-Verbose " [Test-RegistryKey] :: `$ComputerName = $ComputerName"
		        
		        $RegHive = Get-RegistryHive $hive
		        
		        if($RegHive -eq 1)
		        {
		            Write-Host "Invalid Path: $Path, Registry Hive [$hive] is invalid!" -ForegroundColor Red
		        }
		        else
		        {
		            Write-Verbose " [Test-RegistryKey] :: `$RegHive = $RegHive"
		            
		            $BaseKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($RegHive,$ComputerName)
		            Write-Verbose " [Test-RegistryKey] :: `$BaseKey = $BaseKey"
		            
		            Try
		            {
		                $Key = $BaseKey.OpenSubKey($KeyPath) 
		                if($Key)
		                {
		                    $true
		                }
		                else
		                {
		                    $false
		                }
		            }
		            catch
		            {
		                $false
		            }
		        }
		        Write-Verbose " [Test-RegistryKey] :: End Process"
		    
		    }
		}
		    
		#endregion 
		
	#region Test-RegistryValue 
		
		function Test-RegistryValue
		{
		        
		    <#
		        .Synopsis 
		            Test the value for given the registry value.
		            
		        .Description
		            Test the value for given the registry value.
		                        
		        .Parameter Path 
		            Path to the key that contains the value.
		            
		        .Parameter Name 
		            Name of the Value to check.
		            
		        .Parameter Value 
		            Value to check for.
		            
		        .Parameter ComputerName 
		            Computer to test.
		            
		        .Example
		            Test-RegistryValue HKLM\SOFTWARE\Adobe\SwInstall -Name State -Value 0
		            Description
		            -----------
		            Returns $True if the value of State under HKLM\SOFTWARE\Adobe\SwInstall is 0
		            
		        .Example
		            Test-RegistryValue HKLM\Software\Adobe -ComputerName MyServer1
		            Description
		            -----------
		            Returns $True if the value of State under HKLM\SOFTWARE\Adobe\SwInstall is 0 on MyServer1
		                    
		        .OUTPUTS
		            System.Boolean
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            New-RegistryValue
		            Remove-RegistryValue
		            Get-RegistryValue
		        
		        .Notes    
		            NAME:      Test-RegistryValue
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		    
		    [Cmdletbinding()]
		    Param(
		    
		        [Parameter(mandatory=$true)]
		        [string]$Path,
		    
		        [Parameter(mandatory=$true)]
		        [string]$Name,
		        
		        [Parameter()]
		        [string]$Value,
		        
		        [alias('dnsHostName')]
		        [Parameter(ValueFromPipelineByPropertyName=$true,ValueFromPipeline=$true)]
		        [string]$ComputerName = $Env:COMPUTERNAME
		        
		    )
		    
		    Process 
		    {
		    
		        Write-Verbose " [Test-RegistryValue] :: Begin Process"
		        Write-Verbose " [Test-RegistryValue] :: Calling Get-RegistryKey -Path $path -ComputerName $ComputerName"
		        $Key = Get-RegistryKey -Path $path -ComputerName $ComputerName 
		        Write-Verbose " [Test-RegistryValue] :: Get-RegistryKey returned $Key"
		        if($Value)
		        {
		            try
		            {
		                $CurrentValue = $Key.GetValue($Name)
		                $Value -eq $CurrentValue
		            }
		            catch
		            {
		                $false
		            }
		        }
		        else
		        {
		            try
		            {
		                $CurrentValue = $Key.GetValue($Name)
		                if($CurrentValue){$True}else{$false}
		            }
		            catch
		            {
		                $false
		            }
		        }
		        Write-Verbose " [Test-RegistryValue] :: End Process"
		    
		    }
		}
		    
		#endregion 
		
	
		
	
		
	
		
	
		
	
		
	
	
	
	
	
	
	
#endregion Source: Globals.ps1

#region Source: About.pff
function Call-About_pff
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
KiYAAB+LCAAAAAAABADVWl1v4jgUfV9p/0MU7SMLhBCgK0ACOl1VbadVodN9W5nkpvWOY0eO05b5
9et80UBocUKpGlWqyPX11znnXjuOh7dgsyfgq1Mk0Pj33zRteM3xA6aInGEC35EH48mShaLpu+6w
VSiLa0RPP4AHmNGx0ewMW3lD0ubyP7CFJlY+jPT5KhDgNe8xddhz0Dxj3Ev+N7RdRQ0tbWrUbbaj
v4Y2C4kIOYwohIIj0tBuwiXB9gWsFuwn0NGy30eWbfWME7ML7cGJrlE52JHuyvYMXbMfMXG49NNn
jArOSKDHw5QDveHMBy5WaYWJbYMvpqEQjGY+0usWXJD1bUjdlrHD9YWutbKGWllLb7Q8IxiomONf
oI9Ny2ponb6xt1KEx5RxB/hcrIiseYZfwDnFiLCHvZWv0Av2ZH9T9iIrIhLA/iqYlq0SqUIfx0Dv
9Z0LxMUNC7DAEbwzCYicmc0B6N66C3gReiLNou+3J9lU6njJkJMO6N/o97AVl2au+5V5iZZAji5N
EvVi9N4TZxGES2ajBDujO2hohlXE/C2G0v4U/BONGv2e1Kip4L9Ay3PqgFTMjuZlCokB/5rw9yvD
b1RBv6+OfrtdHn1LxT0Oo++YX6KQ2o/Aa8aYeVjA9LslKVOh4ICA6dQM/s5BAVMa/SI8HxowKvGb
BIwEF0eLldwKBdo8xAL+qhlz7XLMnUkPfXyFbc4C5gptjqicOHDsNrRBs2P5oqEF0Z5kNGXEaWh3
ElJOMC1uGN5VRUeqojMoqYr2UVVxoiyKBZMQ1kwH1Ve87onkqq2yxuS4KrHiVUifKsJJqPpj4vsS
o3gulygQd76DxI7N7VemblCZuk4F5lSwrR5kKrpImIvY0upIl3FSmS9L9j1QWfvyWVElb1UPNZUX
hyzUQvHI+P39fc34qh5fZgW6jhtf6q8C97CU7+M1iy3roNCyVEIlx5UKmJ8TWa+LWIpnvWirftph
lmetxFHHUQOslkxVf82OAsxUwT5H1XFfslVeOjeWrm8ewqRefHUPiayydKkAWj2ylLxjuqJ5InvH
cfBXZqr6CUoUWUrnUTmqShygVIgsldY3Iisy1Yuud78e7QussmypnEcdcNylzFZC1kecbCRf0o5O
1ev3uDJkTagtp6mPp0zW9hraLX54LGaTYr3k+9stBHK0+vj6otSRV6c3iJhTT7nZ3JS10bdKS0Pl
RC2RhtI47gL4gYMQkfir5RTZP2eMREgveLgn/jcfJkEAnlQABJlvalmNU0VdIYoewAMqmlK1zItR
flWWqaos01i65sDqIcfsdcGU27t1T9s9e4HNOMHLD9DvO70cKWL293jK0TOmD1X6apuu5fZdw3Cs
NjLR3r4+Zz5IoE/p6B+PfM6EMJcBwvhqDvwJ21BJFmWpas4Yh0+ZXjormSTk1I4wt/VjllWGNzJB
ySTCsxH9DRRkw7n0ljisL8AkWWunNTWe2+lNmA3XTatMXdiFQMw4xFkrWqALtrX3LAxkesvKc22/
VXBDkIhuQYz/jBb+7GFdfBvS+WISZf7012tF9gx8/giEZFd6on1ewZgl7020hnOwQ47lUrC+GbNZ
Qdu+PhSzWrxClK0rTmiLgvOWfdt/m6hd1lMIbI79TZBbO60z5vmIrvKYb1tmzF/xaPuw4VSwnaff
ELcGuNu88+5VumC+WSRH5r3edknHmrMMWxv3tFo57Usl5O+G/Q/p4MQFKiYAAA==#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load("mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
	[void][reflection.assembly]::Load("System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
	[void][reflection.assembly]::Load("System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$form1 = New-Object 'System.Windows.Forms.Form'
	$label16 = New-Object 'System.Windows.Forms.Label'
	$label17 = New-Object 'System.Windows.Forms.Label'
	$label13 = New-Object 'System.Windows.Forms.Label'
	$label12 = New-Object 'System.Windows.Forms.Label'
	$label10 = New-Object 'System.Windows.Forms.Label'
	$label7 = New-Object 'System.Windows.Forms.Label'
	$label8 = New-Object 'System.Windows.Forms.Label'
	$label19 = New-Object 'System.Windows.Forms.Label'
	$label18 = New-Object 'System.Windows.Forms.Label'
	$label5 = New-Object 'System.Windows.Forms.Label'
	$label6 = New-Object 'System.Windows.Forms.Label'
	$label3 = New-Object 'System.Windows.Forms.Label'
	$label4 = New-Object 'System.Windows.Forms.Label'
	$label2 = New-Object 'System.Windows.Forms.Label'
	$label1 = New-Object 'System.Windows.Forms.Label'
	$buttonOK = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	$form1_Load={
		if(Test-Path "C:\Program Files (x86)\Sysinternals" -ErrorAction 'SilentlyContinue') {
			$label13.Text = "Installiert"
			$label13.ForeColor = "Green"
		}
		else {
			$label13.Text = "Nicht Installiert"
			$label13.ForeColor = "Red"
		}	
		
		if(Test-Path "C:\Program Files\Nirsoft\NirLauncher.exe" -ErrorAction 'SilentlyContinue') {
			$label16.Text = "Installiert"
			$label16.ForeColor = "Green"
		}
		else {
			$label16.Text = "Nicht Installiert"
			$label16.ForeColor = "Red"			
		}
	}
	
	
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$form1.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$form1.remove_Load($form1_Load)
			$form1.remove_Load($Form_StateCorrection_Load)
			$form1.remove_Closing($Form_StoreValues_Closing)
			$form1.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	#
	# form1
	#
	$form1.Controls.Add($label16)
	$form1.Controls.Add($label17)
	$form1.Controls.Add($label13)
	$form1.Controls.Add($label12)
	$form1.Controls.Add($label10)
	$form1.Controls.Add($label7)
	$form1.Controls.Add($label8)
	$form1.Controls.Add($label19)
	$form1.Controls.Add($label18)
	$form1.Controls.Add($label5)
	$form1.Controls.Add($label6)
	$form1.Controls.Add($label3)
	$form1.Controls.Add($label4)
	$form1.Controls.Add($label2)
	$form1.Controls.Add($label1)
	$form1.Controls.Add($buttonOK)
	$form1.AcceptButton = $buttonOK
	$form1.ClientSize = '355, 271'
	$form1.FormBorderStyle = 'FixedDialog'
	$form1.MaximizeBox = $False
	$form1.MinimizeBox = $False
	$form1.Name = "form1"
	$form1.StartPosition = 'CenterScreen'
	$form1.Text = "About"
	$form1.add_Load($form1_Load)
	#
	# label16
	#
	$label16.Location = '148, 151'
	$label16.Name = "label16"
	$label16.Size = '176, 23'
	$label16.TabIndex = 16
	#
	# label17
	#
	$label17.Location = '11, 151'
	$label17.Name = "label17"
	$label17.Size = '100, 23'
	$label17.TabIndex = 15
	$label17.Text = "NirLauncher"
	#
	# label13
	#
	$label13.Location = '148, 174'
	$label13.Name = "label13"
	$label13.Size = '176, 23'
	$label13.TabIndex = 12
	#
	# label12
	#
	$label12.Location = '11, 174'
	$label12.Name = "label12"
	$label12.Size = '100, 23'
	$label12.TabIndex = 11
	$label12.Text = "Sysinternals Suite:"
	#
	# label10
	#
	$label10.Font = "Microsoft Sans Serif, 8.25pt, style=Bold, Underline"
	$label10.Location = '12, 128'
	$label10.Name = "label10"
	$label10.Size = '100, 23'
	$label10.TabIndex = 9
	$label10.Text = "Tools:"
	#
	# label7
	#
	$label7.Location = '149, 105'
	$label7.Name = "label7"
	$label7.Size = '176, 23'
	$label7.TabIndex = 8
	$label7.Text = "$ApplicationLastUpdate"
	#
	# label8
	#
	$label8.Location = '12, 105'
	$label8.Name = "label8"
	$label8.Size = '100, 23'
	$label8.TabIndex = 7
	$label8.Text = "Last Update"
	#
	# label19
	#
	$label19.Location = '150, 82'
	$label19.Name = "label19"
	$label19.Size = '176, 23'
	$label19.TabIndex = 6
	$label19.Text = "$AuthorWWW"
	#
	# label18
	#
	$label18.Location = '13, 82'
	$label18.Name = "label18"
	$label18.Size = '100, 23'
	$label18.TabIndex = 5
	$label18.Text = "Website"
	#
	# label5
	#
	$label5.Location = '150, 59'
	$label5.Name = "label5"
	$label5.Size = '176, 23'
	$label5.TabIndex = 6
	$label5.Text = "$ApplicationVersion"
	#
	# label6
	#
	$label6.Location = '13, 59'
	$label6.Name = "label6"
	$label6.Size = '100, 23'
	$label6.TabIndex = 5
	$label6.Text = "Version"
	#
	# label3
	#
	$label3.Location = '150, 36'
	$label3.Name = "label3"
	$label3.Size = '176, 23'
	$label3.TabIndex = 4
	$label3.Text = "$AuthorEmail"
	#
	# label4
	#
	$label4.Location = '13, 36'
	$label4.Name = "label4"
	$label4.Size = '100, 23'
	$label4.TabIndex = 3
	$label4.Text = "Contact"
	#
	# label2
	#
	$label2.Location = '150, 13'
	$label2.Name = "label2"
	$label2.Size = '176, 23'
	$label2.TabIndex = 2
	$label2.Text = "$Authorname"
	#
	# label1
	#
	$label1.Location = '13, 13'
	$label1.Name = "label1"
	$label1.Size = '100, 23'
	$label1.TabIndex = 1
	$label1.Text = "Author:"
	#
	# buttonOK
	#
	$buttonOK.Anchor = 'Bottom, Right'
	$buttonOK.DialogResult = 'OK'
	$buttonOK.Location = '268, 236'
	$buttonOK.Name = "buttonOK"
	$buttonOK.Size = '75, 23'
	$buttonOK.TabIndex = 0
	$buttonOK.Text = "OK"
	$buttonOK.UseVisualStyleBackColor = $True
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $form1.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$form1.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$form1.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$form1.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $form1.ShowDialog()

}
#endregion Source: About.pff

#region Source: Feature_Request.pff
function Call-Feature_Request_pff
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
zg8AAB+LCAAAAAAABAC9V92O6jYQvq/Ud4hyTYGQsCwSRFqypVqdP0ToOb07cpIB3HVs6ji75Dxb
7/pinfxBQtiS3R6OEAiPZzwz/j6PPZMl+OIJZHJPFLF//knTJp8k3VBO2Jwy+EhCsOdAVCzh6xL+
iiFS3d16Pek1tDLbdPQZZEQFt43uYNKrCvLVvT/BV5pKdjDV3SRSEHa/UB6I56g7FzLMfzvauamO
Viw1tbr99NPRnJilsU05xEoS1tEWsceo/w6SlXgEPvVGIzL0hzfG2LSgfzvWNY7BTvU1rveFfiMy
0DV/S1kgUVl3BFdSsEjPYsVoF1LsQKqksHIYBa5c+g1027KsjmYOxpNeqfSCURr6TMgApKsShpZz
uofgnhImNheNP5A9DdHfTOzRkLAILpqkaOj2McGLBq4iUi1ERBVurW47mCLG6ksAftF2BXul2wUz
tHnM/XSRptll2GexUoJfHXgvc2P8F+rNLHOwlhChU93+9K6RX9PkvfBJvp+G2dEGY6uFTY5cEWEL
/ZyIoyGub7ZQXxHvgQeARBq10c6QdQEtmng21X+P4DONYsIyks+I/+gIJqRur2Tc5Cza//qEPDue
K//xkPnXbDjpZRolgXo5g9rzaUn9bZoDnpyrk0qiL4W+PLF/JbPqNLH6rVlSddmaKpYxRq5Yt68i
y01rshxmG8f/1ei9Jx6wq+PGUi//CzGjzcHLEcudtcZqYI5ffa6HraGaUaVA8yDytxKoB1xzKWgB
fjfw/M/fPErZldbzx/P1vApofXAXRRDi7kNU6haSxC7Q/EA42UCIh7t7FysRZtt5RNVsi6ppeGvz
dnhDAvPGAhOTP3g67/noY/BW5lz08RJXr+gxfbr9GEeSPFO+eYuvvrkerkdrwwiGfWKSy77+CNmP
yYlKpK6QiQvyifrwJsjaZxdGvpCMet+hiF3OrUgJzy7mdeXECpeOkPD9czsMy6oyWeADA4uILOP4
DTjgwpWqlyscWpPiXjonLYQPftGj1FTrUixddI0vXUdCVrVsrOcN2UHbiSMsb+V8Ze2XJhaMqPTh
bv+S3hPl4DC9jLm7urPxkVD8OxqKZ3yyb4GxstnC3qspLIt3fbcmLvixpHhD9EpJ3aDR2GWoNpu7
8roJYl81lE/kp/qnQJ2T3uN1Jemuvsm9s1JHhDvCk+qen0ocsUuwid3WgGnKHtJuCBvdkwDPi892
xcWF+eIURhYeX7pFrGH17VvroHsV7iMTqv37vwzVGknODwAA#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load("System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
	[void][reflection.assembly]::Load("System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
	[void][reflection.assembly]::Load("mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
	[void][reflection.assembly]::Load("System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formWizard = New-Object 'System.Windows.Forms.Form'
	$button1 = New-Object 'System.Windows.Forms.Button'
	$richtextbox1 = New-Object 'System.Windows.Forms.RichTextBox'
	$label1 = New-Object 'System.Windows.Forms.Label'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	$button1_Click={
		$ol = New-Object -comObject Outlook.Application
		$text = $richtextbox1.Text
		$newmail = $ol.CreateItem(0) 
		$newmail.Recipients.Add('renato.bacchi@ur.ch') | Out-Null
		$newmail.Subject = "LAFIT - Feature Request"
		$newmail.HTMLBody = "<b>Feature Request für LAFIT</b> <br>Version $ApplicationVersion <br><br>" + "$text" 
		$newmail.Send()	
	}
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formWizard.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:Feature_Request_richtextbox1 = $richtextbox1.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$button1.remove_Click($button1_Click)
			$formWizard.remove_Load($Form_StateCorrection_Load)
			$formWizard.remove_Closing($Form_StoreValues_Closing)
			$formWizard.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	#
	# formWizard
	#
	$formWizard.Controls.Add($button1)
	$formWizard.Controls.Add($richtextbox1)
	$formWizard.Controls.Add($label1)
	$formWizard.ClientSize = '444, 329'
	$formWizard.FormBorderStyle = 'FixedDialog'
	$formWizard.MaximizeBox = $False
	$formWizard.Name = "formWizard"
	$formWizard.StartPosition = 'CenterScreen'
	$formWizard.Text = "Request Function"
	#
	# button1
	#
	$button1.DialogResult = 'OK'
	$button1.Location = '13, 294'
	$button1.Name = "button1"
	$button1.Size = '75, 23'
	$button1.TabIndex = 7
	$button1.Text = "Senden"
	$button1.UseVisualStyleBackColor = $True
	$button1.add_Click($button1_Click)
	#
	# richtextbox1
	#
	$richtextbox1.Location = '13, 40'
	$richtextbox1.Name = "richtextbox1"
	$richtextbox1.Size = '419, 248'
	$richtextbox1.TabIndex = 6
	$richtextbox1.Text = ""
	#
	# label1
	#
	$label1.Location = '13, 13'
	$label1.Name = "label1"
	$label1.Size = '239, 23'
	$label1.TabIndex = 5
	$label1.Text = "Bitte beschreiben Sie die gewünschte Funktion"
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formWizard.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formWizard.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formWizard.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formWizard.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formWizard.ShowDialog()

}
#endregion Source: Feature_Request.pff

#region Source: Changelog.pff
function Call-Changelog_pff
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
qA4AAB+LCAAAAAAABAC9V19v2jAQf5+07xDlmRFoCBQJIkG6TlXXFQHr9jYZ5wLeHBs5Tkv26XcJ
CQRCRzqtFRKKz/f/fj6fB1Og8hFUckU0cd+/M4zBvWJLJgi/Zhy+kBBcb0XEErhcNtdBMLAq+5lU
unoAFTEp3HbzYmCVCVu9i59AtaGTNQzNWRJpCJvfmPDlU9S8lirc/jeMU1sNI1c17DRb6a9heDHX
sYKhgFgrwhvGJF5wRm8hmctfIIaLXo841Om2+3YHWpd90xDo7NAMUF/bNOiKcV8hn+lJoZXkkZm5
iY5OlFyD0kkuMKIU1nocay1FwYNcUwgA5SnkbIuM4f7WNKxCkVVoekazxxkIPWO/wXR7zkXDcPr9
s0JpPsZS+aBmOuEoec024F8xggU6K3xHNixEe2O5QUHCIzgvwsRLRVJUmG6W6LO8M02UnsiIaZam
18OEYGRUAYizsnPYaHMPzyr/x0dUlzN/lsTHANCpjPojXQ+s7LtgP4/QKaOr1Com49WBqtCWRlsL
ufkrXqt5+Swp2aazbTeMtl1JzHMlK5usIZQj96KHyO04NQTmZHEjfEAg1VG/Le9ut1Jda1uv+tXb
nuFXL9y+E7ykaCNBV1KZ7liiNLbBKVuudI0sbU/+FCL01nTvb2uI7PHR7TpYu26nNkKK2OqjAw1c
1EHgHhut2tio5cfXCB5YFBOe9csxob88ydNMz1V8opeVUXW4GEURhIgAiArenJK4OaLuiCBLCLGl
NEcxVjHL8h5Zdl1k2e1FYF86XeLb3Q7YeLR2lo4thxGVirPFf8DvX6y80ok5b/FKkScmlv9iq2UH
TtAL2m3faRGbnLX1NvHgmPUmhr6H/G0CYgoPiFTJDNQjo/BPsHhpqZqeVPAm4eVRYZPA0F4htt2y
6CqDCTYobCKq8OgTCEDFpfa2ZdiN3vnleIqaE29oPoMfsB5SsXWxACLtKci6VnpDV2g7bi+OsL0V
+yXdz21MONHpQOh+SG/+YrEfpmMxm4/Szp9/7QXlE86DK+C8eEzg26JKLJr3YbYGM6CxYngV7Gby
Q4HKwyWravXxUtwrfkx1hfmIfsx/XKhT1CuIqGLrwyRbJ6meDNdEJOWcH1M8uU5UOj4cMFVoN+mo
jQ+5IwdPk0+++vIL89kt9Czcz9e5ryXKwDp4IVol7CMSyi/TPx1hjQWoDgAA#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load("mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
	[void][reflection.assembly]::Load("System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
	[void][reflection.assembly]::Load("System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$form1 = New-Object 'System.Windows.Forms.Form'
	$richtextbox1 = New-Object 'System.Windows.Forms.RichTextBox'
	$buttonOK = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$FormEvent_Load={
		#TODO: Initialize Form Controls here
		
	Get-ComputerTxtBox
	$richtextbox1.Appendtext($changelog)
	}	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$form1.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:Changelog_richtextbox1 = $richtextbox1.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$form1.remove_Load($FormEvent_Load)
			$form1.remove_Load($Form_StateCorrection_Load)
			$form1.remove_Closing($Form_StoreValues_Closing)
			$form1.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	#
	# form1
	#
	$form1.Controls.Add($richtextbox1)
	$form1.Controls.Add($buttonOK)
	$form1.AcceptButton = $buttonOK
	$form1.ClientSize = '752, 599'
	$form1.FormBorderStyle = 'FixedDialog'
	$form1.MaximizeBox = $False
	$form1.MinimizeBox = $False
	$form1.Name = "form1"
	$form1.StartPosition = 'CenterScreen'
	$form1.Text = "Changelog"
	$form1.add_Load($FormEvent_Load)
	#
	# richtextbox1
	#
	$richtextbox1.Location = '13, 13'
	$richtextbox1.Name = "richtextbox1"
	$richtextbox1.Size = '727, 545'
	$richtextbox1.TabIndex = 1
	$richtextbox1.Text = ""
	#
	# buttonOK
	#
	$buttonOK.Anchor = 'Bottom, Right'
	$buttonOK.DialogResult = 'OK'
	$buttonOK.Location = '665, 564'
	$buttonOK.Name = "buttonOK"
	$buttonOK.Size = '75, 23'
	$buttonOK.TabIndex = 0
	$buttonOK.Text = "OK"
	$buttonOK.UseVisualStyleBackColor = $True
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $form1.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$form1.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$form1.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$form1.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $form1.ShowDialog()

}
#endregion Source: Changelog.pff

#region Source: Options.pff
function Call-Options_pff
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
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
ALQDQPv7ALTk9WlBr0p/9CqA9jLQ+F0BWuSPzQv61rSg16SifGjyIhHFt71VGndXJHp7S56mZ793
+XtnjwGv/uzWv7ojLp6ix1lEr0np+7r8MZeZ030W0Sztn5rz/gH93bIfZomT/ZLsh+eGXpP9kI2q
PLa7hZ84fu+r2L7dyg0/3nDpNo6q8FLXn9h1HaVbLrWd+Kpcil8nBb4m59qXQV9jRRB48TfXr82K
qNtx418xk3+AN3+DRzjrk3yFN78qzff/13SGv9A1v0UP16YHvmvwt8rsJWbv6pZ/8SL6wfdJf5iH
8hW5nS/jFPyH5aF8ix56NVyd0vAaJfz8PJSTLPH/4EV0dWTzVWLdVyRzvSaueOXHBv68RfQWPfRq
uDrF5FXB3U/PC9oXBlH8ruvoF+qOeFsUcdUXO+4a/K2S26t5abvhJcl4r08Q+ktpcP/YTlbW12UI
pVI3PKNRdNZfIfl4o0Tb8Dlk79sHRDvOtopf9T3uH5Ht1PWfzbX5ouXA4Hndo5fkC30M692N8eKs
pDj6gvF8x/k++6WXZy2HcpzS700nvUDi2tz4L4OAd1PwHBL4xD6fHvzYVPks9vySLvsSv7xT70+3
2+C2TeeuTe+2zf5GAlza5VXup3zvd39Rb3sNpWc3/9DRh1n/Gvfoq9yZ7FcC32j5Gcn6DBIwqv4/
rF37kZ/+73//5VbtV5JPVUtVlZ/0A/Crh8vel3Sf7ydkYaf21k96Q/mLavplfrsE/50Y+NKJgUEn
gAkUsz0YQ3y4f2D+0tLXLSeVm5Vx5LzD9H+nlZ+k8B+3yJb2IUq3r2lrDAdogAcg6KFjG7Z/2Nav
GY9d27+kITOJf82Aot4z11nZnbN/R67/KrO4VlV/MVnp/5Lh3Y+q9wr90H7C2L4cPniVT1J/x+qd
SPnQo/v82o/ud3cVzp7vUfz0bOl94dTN0m+rPi3tXVcU+FXNlP6t1zo/G31T9qU201S9e3s4/+ja
L52QYrsOeq/x+X/O3vnh4MtppUnVNXV+FLj/9a9gdvBLNfTj+H7qbx+6vyl8uC8/na1Pqu82ZdT7
feCh5KlAX3C+izwUgnda/QQ8LnwcaHiNW39T+avyr+t/rajnSlm/cssofzrJwLOlTJbkdvo4dP6m
hMnyrjzHl08qfVM2Pb+QTu34qw4+X7zqhaO+9OGm+zh0f/FU37Pk6fvTpyWfgMeT9sUyz7bfW4Lv
Zq1fdmeX+fn/Ad+YIv5KygAA#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load("mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
	[void][reflection.assembly]::Load("System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
	[void][reflection.assembly]::Load("System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$form1 = New-Object 'System.Windows.Forms.Form'
	$groupbox3 = New-Object 'System.Windows.Forms.GroupBox'
	$button2 = New-Object 'System.Windows.Forms.Button'
	$button1 = New-Object 'System.Windows.Forms.Button'
	$textbox8 = New-Object 'System.Windows.Forms.TextBox'
	$textbox9 = New-Object 'System.Windows.Forms.TextBox'
	$label10 = New-Object 'System.Windows.Forms.Label'
	$label12 = New-Object 'System.Windows.Forms.Label'
	$button_OK = New-Object 'System.Windows.Forms.Button'
	$button_Export = New-Object 'System.Windows.Forms.Button'
	$button_import = New-Object 'System.Windows.Forms.Button'
	$button_save = New-Object 'System.Windows.Forms.Button'
	$groupbox2 = New-Object 'System.Windows.Forms.GroupBox'
	$button3 = New-Object 'System.Windows.Forms.Button'
	$textbox10 = New-Object 'System.Windows.Forms.TextBox'
	$label14 = New-Object 'System.Windows.Forms.Label'
	$textbox6 = New-Object 'System.Windows.Forms.TextBox'
	$label7 = New-Object 'System.Windows.Forms.Label'
	$checkbox1 = New-Object 'System.Windows.Forms.CheckBox'
	$textbox4 = New-Object 'System.Windows.Forms.TextBox'
	$textbox5 = New-Object 'System.Windows.Forms.TextBox'
	$label5 = New-Object 'System.Windows.Forms.Label'
	$label6 = New-Object 'System.Windows.Forms.Label'
	$label4 = New-Object 'System.Windows.Forms.Label'
	$groupbox1 = New-Object 'System.Windows.Forms.GroupBox'
	$button6 = New-Object 'System.Windows.Forms.Button'
	$button5 = New-Object 'System.Windows.Forms.Button'
	$button4 = New-Object 'System.Windows.Forms.Button'
	$textbox0 = New-Object 'System.Windows.Forms.TextBox'
	$label13 = New-Object 'System.Windows.Forms.Label'
	$combobox1 = New-Object 'System.Windows.Forms.ComboBox'
	$textbox3 = New-Object 'System.Windows.Forms.TextBox'
	$label3 = New-Object 'System.Windows.Forms.Label'
	$textbox2 = New-Object 'System.Windows.Forms.TextBox'
	$label2 = New-Object 'System.Windows.Forms.Label'
	$textbox1 = New-Object 'System.Windows.Forms.TextBox'
	$label1 = New-Object 'System.Windows.Forms.Label'
	$label8 = New-Object 'System.Windows.Forms.Label'
	$button_abort = New-Object 'System.Windows.Forms.Button'
	$folderbrowserdialog1 = New-Object 'System.Windows.Forms.FolderBrowserDialog'
	$openfiledialog1 = New-Object 'System.Windows.Forms.OpenFileDialog'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$FormEvent_Load={
		if ($global:Language -eq "Deutsch") {
			$form1.Text = "Optionen"
			$label8.Text = "Sprache:"	
		}
		if ($global:Language -eq "English") {
			$form1.Text = "Options"
			$label8.Text = "Language:"	
		}
		
		#Load Variables into textboxes
		$textbox0.Text = $global:Confpath
		$textbox1.Text = $global:Profilefolder
		$textbox2.Text = $global:Homefolder
		$textbox3.Text = $global:Outfile
		if ($global:SCCMEnabled -eq $true) {
			$checkbox1.Checked = $global:SCCMEnabled
			$textbox4.Text = $global:SiteName
			$textbox5.Text = $global:SCCMServer
			$textbox6.Text = $global:SCCMNameSpace
			$textbox10.Text = $global:CmRCViewer
		}
		else {
			$checkbox1.Checked = $global:SCCMEnabled
			$textbox4.enabled = $false
			$textbox5.enabled = $false
			$textbox6.enabled = $false
			$textbox10.enabled = $false
		}
		$textbox8.Text = $global:Nirlauncher
		$textbox9.Text = $global:Sysinternals
		Load-ComboBox $combobox1 "Deutsch", "English"
		$combobox1.SelectedItem = $global:Language
	}
	############################################################################################
	$checkbox1_CheckedChanged={
	if ($checkbox1.Checked -eq $true) {
			$textbox4.Text = $global:SiteName
			$textbox5.Text = $global:SCCMServer
			$textbox6.Text = $global:SCCMNameSpace
			$textbox10.Text = $global:CmRCViewer
		}
		else {
			$textbox4.enabled = $false
			$textbox5.enabled = $false
			$textbox6.enabled = $false
			$textbox10.enabled = $false
		}	
	}
	############################################################################################
	$button_save_Click={
		$global:Profilefolder =  $textbox1.Text
		$global:Homefolder = $textbox2.Text
		$global:Outfile = $textbox3.Text
		$global:SiteName = $textbox4.Text
		$global:SCCMServer = $textbox5.Text
		$global:SCCMNameSpace = $textbox6.Text
		$global:SCCMEnabled = [bool]$checkbox1.Checked
		$global:Language = $combobox1.Text
		$global:Nirlauncher = $textbox8.Text
		$global:Sysinternals = $textbox9.Text
		$global:CmRCViewer = $textbox10.Text
		$Exportpath = $Confpath + "/Config.csv"
		New-Object -TypeName PSCustomObject -Property @{
			"global:Language" = $Language
			"global:Profilefolder" = $Profilefolder
			"global:Homefolder" = $Homefolder
			"global:Outfile" = $Outfile
			"global:SiteName" = $SiteName
			"global:SCCMServer" = $SCCMServer
			"global:SCCMNameSpace" = $SCCMNameSpace
			"global:SCCMEnabled" = $SCCMEnabled
			"global:Nirlauncher" = $Nirlauncher
			"global:Sysinternals" = $Sysinternals
			"global:CmRCViewer" = $CmRCViewer
		} | Export-Csv -Path $Exportpath -NoTypeInformation
	}
	############################################################################################
	$button_OK_Click={
		$global:Language = $combobox1.SelectedItem
		$global:Profilefolder =  $textbox1.Text
		$global:Homefolder = $textbox2.Text
		$global:Outfile = $textbox3.Text
		$global:SiteName = $textbox4.Text
		$global:SCCMServer = $textbox5.Text
		$global:SCCMNameSpace = $textbox6.Text
		$global:SCCMEnabled = [bool]$checkbox1.Checked
		$global:Language = $combobox1.Text
		$global:Nirlauncher = $textbox8.Text
		$global:Sysinternals = $textbox9.Text
		$global:CmRCViewer = $textbox10.Text
		$Exportpath = $Confpath + "/Config.csv"
		New-Object -TypeName PSCustomObject -Property @{
			"global:Language" = $Language
			"global:Profilefolder" = $Profilefolder
			"global:Homefolder" = $Homefolder
			"global:Outfile" = $Outfile
			"global:SiteName" = $SiteName
			"global:SCCMServer" = $SCCMServer
			"global:SCCMNameSpace" = $SCCMNameSpace
			"global:SCCMEnabled" = $SCCMEnabled
			"global:Nirlauncher" = $Nirlauncher
			"global:Sysinternals" = $Sysinternals
			"global:CmRCViewer" = $CmRCViewer
		} | Export-Csv -Path $Exportpath -NoTypeInformation
	}
	
	$button_Export_Click={
		$folderbrowserdialog1.ShowDialog()
		$save = $folderbrowserdialog1.SelectedPath += "/config.csv"
		New-Object -TypeName PSCustomObject -Property @{
			"global:Language" = $Language
			"global:Profilefolder" = $Profilefolder
			"global:Homefolder" = $Homefolder
			"global:Outfile" = $Outfile
			"global:SiteName" = $SiteName
			"global:SCCMServer" = $SCCMServer
			"global:SCCMNameSpace" = $SCCMNameSpace
			"global:SCCMEnabled"= [bool]$SCCMEnabled
			"global:Nirlauncher" = $Nirlauncher
			"global:Sysinternals" = $Sysinternals
			"global:CmRCViewer" = $CmRCViewer
		} | Export-Csv -Path $save -NoTypeInformation -Force
	}
	############################################################################################
	$button_abort_Click={$Options.Close()}
	############################################################################################
	$button_import_Click={
		$openfiledialog1.ShowDialog()
		$load = $openfiledialog1.FileNames
		$Import = Import-Csv -Path $load
		Add-RichTextBox -text $Import
		foreach ($Line in $Import) {
			$global:Language=$($Line."global:Language")
			$global:Profilefolder=$($Line."global:Profilefolder")
			$global:Homefolder=$($Line."global:Homefolder")
			$global:Outfile=$($Line."global:Outfile")
			$global:SiteName=$($Line."global:SiteName")
			$global:SCCMServer=$($Line."global:SCCMServer")
			$global:SCCMNameSpace=$($Line."global:SCCMNameSpace")
			$global:SCCMEnabled=[bool]$($Line."global:SCCMEnabled")
			$global:Nirlauncher=$($Line."global:Nirlauncher")
			$global:Sysinternals=$($Line."global:Sysinternals")
			$global:CmRCViewer=$($Line."global:CmRCViewer")
		}
		# Saving the imported Config
		$Exportpath = $Confpath + "/Config.csv"
		New-Object -TypeName PSCustomObject -Property @{
			"global:Language" = $Language
			"global:Profilefolder" = $Profilefolder
			"global:Homefolder" = $Homefolder
			"global:Outfile" = $Outfile
			"global:SiteName" = $SiteName
			"global:SCCMServer" = $SCCMServer
			"global:SCCMNameSpace" = $SCCMNameSpace
			"global:SCCMEnabled" = [bool]$SCCMEnabled
			"global:Nirlauncher" = $Nirlauncher
			"global:Sysinternals" = $Sysinternals
			"global:CmRCViewer" = $CmRCViewer
		} | Export-Csv -Path $Exportpath -NoTypeInformation
	}
	############################################################################################
	
	$button1_Click={
		$folderbrowserdialog1.ShowDialog()
		$textbox8.Text = $folderbrowserdialog1.SelectedPath
		$global:Nirlauncher = $textbox8.Text
	}
	
	$button2_Click={
		$folderbrowserdialog1.ShowDialog()
		$textbox9.Text = $folderbrowserdialog1.SelectedPath
		$global:Sysinternals = $textbox9.Text
	}
	
	$button3_Click={
		$folderbrowserdialog1.ShowDialog()
		$textbox10.Text = $folderbrowserdialog1.SelectedPath
		$global:CmRCViewer = $textbox9.Text
	}
	
	$button4_Click={
		$folderbrowserdialog1.ShowDialog()
		$textbox3.Text = $folderbrowserdialog1.SelectedPath
		$global:logpath = $textbox3.Text
	}
	
	$button5_Click={
		$folderbrowserdialog1.ShowDialog()
		$textbox1.Text = $folderbrowserdialog1.SelectedPath
		$global:profilepath = $textbox1.Text	
	}
	
	$button6_Click={
		$folderbrowserdialog1.ShowDialog()
		$textbox2.Text = $folderbrowserdialog1.SelectedPath
		$global:outfile = $textbox2.Text	
	}
	
	$form1_FormClosed=[System.Windows.Forms.FormClosedEventHandler]{
	$Options.Close()
	}
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$form1.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:Options_textbox8 = $textbox8.Text
		$script:Options_textbox9 = $textbox9.Text
		$script:Options_textbox10 = $textbox10.Text
		$script:Options_textbox6 = $textbox6.Text
		$script:Options_checkbox1 = $checkbox1.Checked
		$script:Options_textbox4 = $textbox4.Text
		$script:Options_textbox5 = $textbox5.Text
		$script:Options_textbox0 = $textbox0.Text
		$script:Options_combobox1 = $combobox1.Text
		$script:Options_textbox3 = $textbox3.Text
		$script:Options_textbox2 = $textbox2.Text
		$script:Options_textbox1 = $textbox1.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$button2.remove_Click($button2_Click)
			$button1.remove_Click($button1_Click)
			$button_OK.remove_Click($button_OK_Click)
			$button_Export.remove_Click($button_Export_Click)
			$button_import.remove_Click($button_import_Click)
			$button_save.remove_Click($button_save_Click)
			$button3.remove_Click($button3_Click)
			$checkbox1.remove_CheckedChanged($checkbox1_CheckedChanged)
			$button6.remove_Click($button6_Click)
			$button5.remove_Click($button5_Click)
			$button4.remove_Click($button4_Click)
			$button_abort.remove_Click($button_abort_Click)
			$form1.remove_FormClosed($form1_FormClosed)
			$form1.remove_Load($FormEvent_Load)
			$form1.remove_Load($Form_StateCorrection_Load)
			$form1.remove_Closing($Form_StoreValues_Closing)
			$form1.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	#
	# form1
	#
	$form1.Controls.Add($groupbox3)
	$form1.Controls.Add($button_OK)
	$form1.Controls.Add($button_Export)
	$form1.Controls.Add($button_import)
	$form1.Controls.Add($button_save)
	$form1.Controls.Add($groupbox2)
	$form1.Controls.Add($groupbox1)
	$form1.Controls.Add($button_abort)
	$form1.AcceptButton = $button_OK
	$form1.CancelButton = $button_abort
	$form1.ClientSize = '484, 489'
	$form1.FormBorderStyle = 'FixedDialog'
	$form1.MaximizeBox = $False
	$form1.MinimizeBox = $False
	$form1.Name = "form1"
	$form1.StartPosition = 'CenterScreen'
	$form1.Text = "Optionen"
	$form1.add_FormClosed($form1_FormClosed)
	$form1.add_Load($FormEvent_Load)
	#
	# groupbox3
	#
	$groupbox3.Controls.Add($button2)
	$groupbox3.Controls.Add($button1)
	$groupbox3.Controls.Add($textbox8)
	$groupbox3.Controls.Add($textbox9)
	$groupbox3.Controls.Add($label10)
	$groupbox3.Controls.Add($label12)
	$groupbox3.Location = '12, 357'
	$groupbox3.Name = "groupbox3"
	$groupbox3.Size = '461, 87'
	$groupbox3.TabIndex = 9
	$groupbox3.TabStop = $False
	$groupbox3.Text = "External Tools"
	#
	# button2
	#
	$button2.BackColor = 'Transparent'
	#region Binary Data
	$button2.BackgroundImage = [System.Convert]::FromBase64String('
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')
	#endregion
	$button2.BackgroundImageLayout = 'Center'
	$button2.FlatStyle = 'Flat'
	$button2.ForeColor = 'Control'
	$button2.Location = '419, 42'
	$button2.Name = "button2"
	$button2.Size = '30, 26'
	$button2.TabIndex = 7
	$button2.UseVisualStyleBackColor = $False
	$button2.add_Click($button2_Click)
	#
	# button1
	#
	$button1.BackColor = 'Transparent'
	#region Binary Data
	$button1.BackgroundImage = [System.Convert]::FromBase64String('
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')
	#endregion
	$button1.BackgroundImageLayout = 'Center'
	$button1.FlatStyle = 'Flat'
	$button1.ForeColor = 'Control'
	$button1.Location = '419, 15'
	$button1.Name = "button1"
	$button1.Size = '30, 26'
	$button1.TabIndex = 6
	$button1.UseVisualStyleBackColor = $False
	$button1.add_Click($button1_Click)
	#
	# textbox8
	#
	$textbox8.Location = '76, 19'
	$textbox8.Name = "textbox8"
	$textbox8.Size = '337, 20'
	$textbox8.TabIndex = 5
	#
	# textbox9
	#
	$textbox9.Location = '76, 46'
	$textbox9.Name = "textbox9"
	$textbox9.Size = '337, 20'
	$textbox9.TabIndex = 3
	#
	# label10
	#
	$label10.Location = '7, 21'
	$label10.Name = "label10"
	$label10.Size = '100, 23'
	$label10.TabIndex = 2
	$label10.Text = "Nirlauncher:"
	#
	# label12
	#
	$label12.Location = '7, 48'
	$label12.Name = "label12"
	$label12.Size = '100, 23'
	$label12.TabIndex = 4
	$label12.Text = "Sysinternals:"
	#
	# button_OK
	#
	$button_OK.Anchor = 'Bottom, Right'
	$button_OK.DialogResult = 'OK'
	$button_OK.Location = '398, 454'
	$button_OK.Name = "button_OK"
	$button_OK.Size = '75, 23'
	$button_OK.TabIndex = 0
	$button_OK.Text = "OK"
	$button_OK.UseVisualStyleBackColor = $True
	$button_OK.add_Click($button_OK_Click)
	#
	# button_Export
	#
	$button_Export.Anchor = 'Bottom, Right'
	$button_Export.Location = '74, 454'
	$button_Export.Name = "button_Export"
	$button_Export.Size = '75, 23'
	$button_Export.TabIndex = 9
	$button_Export.Text = "Export"
	$button_Export.UseVisualStyleBackColor = $True
	$button_Export.add_Click($button_Export_Click)
	#
	# button_import
	#
	$button_import.Anchor = 'Bottom, Right'
	$button_import.DialogResult = 'OK'
	$button_import.Location = '155, 454'
	$button_import.Name = "button_import"
	$button_import.Size = '75, 23'
	$button_import.TabIndex = 8
	$button_import.Text = "Import"
	$button_import.UseVisualStyleBackColor = $True
	$button_import.add_Click($button_import_Click)
	#
	# button_save
	#
	$button_save.Anchor = 'Bottom, Right'
	$button_save.Location = '236, 454'
	$button_save.Name = "button_save"
	$button_save.Size = '75, 23'
	$button_save.TabIndex = 7
	$button_save.Text = "Speichern"
	$button_save.UseVisualStyleBackColor = $True
	$button_save.add_Click($button_save_Click)
	#
	# groupbox2
	#
	$groupbox2.Controls.Add($button3)
	$groupbox2.Controls.Add($textbox10)
	$groupbox2.Controls.Add($label14)
	$groupbox2.Controls.Add($textbox6)
	$groupbox2.Controls.Add($label7)
	$groupbox2.Controls.Add($checkbox1)
	$groupbox2.Controls.Add($textbox4)
	$groupbox2.Controls.Add($textbox5)
	$groupbox2.Controls.Add($label5)
	$groupbox2.Controls.Add($label6)
	$groupbox2.Controls.Add($label4)
	$groupbox2.Location = '13, 183'
	$groupbox2.Name = "groupbox2"
	$groupbox2.Size = '460, 168'
	$groupbox2.TabIndex = 6
	$groupbox2.TabStop = $False
	$groupbox2.Text = "SCCM"
	#
	# button3
	#
	$button3.BackColor = 'Transparent'
	#region Binary Data
	$button3.BackgroundImage = [System.Convert]::FromBase64String('
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')
	#endregion
	$button3.BackgroundImageLayout = 'Center'
	$button3.FlatStyle = 'Flat'
	$button3.ForeColor = 'Control'
	$button3.Location = '418, 123'
	$button3.Name = "button3"
	$button3.Size = '30, 26'
	$button3.TabIndex = 8
	$button3.UseVisualStyleBackColor = $False
	$button3.add_Click($button3_Click)
	#
	# textbox10
	#
	$textbox10.Location = '76, 126'
	$textbox10.Name = "textbox10"
	$textbox10.Size = '337, 20'
	$textbox10.TabIndex = 10
	#
	# label14
	#
	$label14.Location = '6, 128'
	$label14.Name = "label14"
	$label14.Size = '100, 23'
	$label14.TabIndex = 9
	$label14.Text = "CmRCViewer:"
	#
	# textbox6
	#
	$textbox6.Location = '76, 100'
	$textbox6.Name = "textbox6"
	$textbox6.Size = '337, 20'
	$textbox6.TabIndex = 8
	#
	# label7
	#
	$label7.Location = '6, 102'
	$label7.Name = "label7"
	$label7.Size = '100, 23'
	$label7.TabIndex = 7
	$label7.Text = "Namespace:"
	#
	# checkbox1
	#
	$checkbox1.Checked = $True
	$checkbox1.CheckState = 'Checked'
	$checkbox1.Location = '76, 19'
	$checkbox1.Name = "checkbox1"
	$checkbox1.Size = '15, 24'
	$checkbox1.TabIndex = 6
	$checkbox1.UseVisualStyleBackColor = $True
	$checkbox1.add_CheckedChanged($checkbox1_CheckedChanged)
	#
	# textbox4
	#
	$textbox4.Location = '76, 47'
	$textbox4.Name = "textbox4"
	$textbox4.Size = '337, 20'
	$textbox4.TabIndex = 5
	#
	# textbox5
	#
	$textbox5.Location = '76, 74'
	$textbox5.Name = "textbox5"
	$textbox5.Size = '337, 20'
	$textbox5.TabIndex = 3
	#
	# label5
	#
	$label5.Location = '7, 49'
	$label5.Name = "label5"
	$label5.Size = '100, 23'
	$label5.TabIndex = 2
	$label5.Text = "Site:"
	#
	# label6
	#
	$label6.Location = '6, 22'
	$label6.Name = "label6"
	$label6.Size = '100, 23'
	$label6.TabIndex = 0
	$label6.Text = "SCCM:"
	#
	# label4
	#
	$label4.Location = '7, 76'
	$label4.Name = "label4"
	$label4.Size = '100, 23'
	$label4.TabIndex = 4
	$label4.Text = "Server:"
	#
	# groupbox1
	#
	$groupbox1.Controls.Add($button6)
	$groupbox1.Controls.Add($button5)
	$groupbox1.Controls.Add($button4)
	$groupbox1.Controls.Add($textbox0)
	$groupbox1.Controls.Add($label13)
	$groupbox1.Controls.Add($combobox1)
	$groupbox1.Controls.Add($textbox3)
	$groupbox1.Controls.Add($label3)
	$groupbox1.Controls.Add($textbox2)
	$groupbox1.Controls.Add($label2)
	$groupbox1.Controls.Add($textbox1)
	$groupbox1.Controls.Add($label1)
	$groupbox1.Controls.Add($label8)
	$groupbox1.Location = '13, 13'
	$groupbox1.Name = "groupbox1"
	$groupbox1.Size = '460, 164'
	$groupbox1.TabIndex = 1
	$groupbox1.TabStop = $False
	$groupbox1.Text = "General"
	#
	# button6
	#
	$button6.BackColor = 'Transparent'
	#region Binary Data
	$button6.BackgroundImage = [System.Convert]::FromBase64String('
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')
	#endregion
	$button6.BackgroundImageLayout = 'Center'
	$button6.FlatStyle = 'Flat'
	$button6.ForeColor = 'Control'
	$button6.Location = '418, 66'
	$button6.Name = "button6"
	$button6.Size = '30, 26'
	$button6.TabIndex = 13
	$button6.UseVisualStyleBackColor = $False
	$button6.add_Click($button6_Click)
	#
	# button5
	#
	$button5.BackColor = 'Transparent'
	#region Binary Data
	$button5.BackgroundImage = [System.Convert]::FromBase64String('
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')
	#endregion
	$button5.BackgroundImageLayout = 'Center'
	$button5.FlatStyle = 'Flat'
	$button5.ForeColor = 'Control'
	$button5.Location = '418, 41'
	$button5.Name = "button5"
	$button5.Size = '30, 26'
	$button5.TabIndex = 12
	$button5.UseVisualStyleBackColor = $False
	$button5.add_Click($button5_Click)
	#
	# button4
	#
	$button4.BackColor = 'Transparent'
	#region Binary Data
	$button4.BackgroundImage = [System.Convert]::FromBase64String('
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')
	#endregion
	$button4.BackgroundImageLayout = 'Center'
	$button4.FlatStyle = 'Flat'
	$button4.ForeColor = 'Control'
	$button4.Location = '418, 93'
	$button4.Name = "button4"
	$button4.Size = '30, 26'
	$button4.TabIndex = 11
	$button4.UseVisualStyleBackColor = $False
	$button4.add_Click($button4_Click)
	#
	# textbox0
	#
	$textbox0.Location = '76, 18'
	$textbox0.Name = "textbox0"
	$textbox0.ReadOnly = $True
	$textbox0.Size = '337, 20'
	$textbox0.TabIndex = 9
	#
	# label13
	#
	$label13.Location = '8, 20'
	$label13.Name = "label13"
	$label13.Size = '100, 23'
	$label13.TabIndex = 8
	$label13.Text = "Configpath:"
	#
	# combobox1
	#
	$combobox1.DisplayMember = "Deutsch, English"
	$combobox1.FormattingEnabled = $True
	$combobox1.Location = '76, 124'
	$combobox1.Name = "combobox1"
	$combobox1.Size = '121, 21'
	$combobox1.TabIndex = 6
	$combobox1.ValueMember = "Deutsch, English"
	#
	# textbox3
	#
	$textbox3.Location = '76, 98'
	$textbox3.Name = "textbox3"
	$textbox3.Size = '337, 20'
	$textbox3.TabIndex = 5
	#
	# label3
	#
	$label3.Location = '7, 100'
	$label3.Name = "label3"
	$label3.Size = '100, 23'
	$label3.TabIndex = 4
	$label3.Text = "Logpath:"
	#
	# textbox2
	#
	$textbox2.Location = '76, 70'
	$textbox2.Name = "textbox2"
	$textbox2.Size = '337, 20'
	$textbox2.TabIndex = 3
	#
	# label2
	#
	$label2.Location = '7, 72'
	$label2.Name = "label2"
	$label2.Size = '100, 23'
	$label2.TabIndex = 2
	$label2.Text = "Homepath:"
	#
	# textbox1
	#
	$textbox1.Location = '76, 44'
	$textbox1.Name = "textbox1"
	$textbox1.Size = '337, 20'
	$textbox1.TabIndex = 1
	#
	# label1
	#
	$label1.Location = '7, 46'
	$label1.Name = "label1"
	$label1.Size = '100, 23'
	$label1.TabIndex = 0
	$label1.Text = "Profilepath:"
	#
	# label8
	#
	$label8.Location = '7, 126'
	$label8.Name = "label8"
	$label8.Size = '100, 23'
	$label8.TabIndex = 7
	$label8.Text = "Sprache:"
	#
	# button_abort
	#
	$button_abort.Anchor = 'Bottom, Right'
	$button_abort.DialogResult = 'Cancel'
	$button_abort.Location = '317, 454'
	$button_abort.Name = "button_abort"
	$button_abort.Size = '75, 23'
	$button_abort.TabIndex = 10
	$button_abort.Text = "Abbrechen"
	$button_abort.UseVisualStyleBackColor = $True
	$button_abort.add_Click($button_abort_Click)
	#
	# folderbrowserdialog1
	#
	#
	# openfiledialog1
	#
	$openfiledialog1.FileName = "openfiledialog1"
	$openfiledialog1.Filter = "CSV-Dateien|*.csv"
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $form1.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$form1.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$form1.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$form1.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $form1.ShowDialog()

}
#endregion Source: Options.pff

#Start the application
Main ($CommandLine)
